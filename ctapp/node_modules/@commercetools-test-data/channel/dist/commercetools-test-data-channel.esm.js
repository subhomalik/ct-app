import { Generator, fake, Transformer, Builder, sequence } from '@commercetools-test-data/core';
import { LocalizedString, Address, ClientLogging } from '@commercetools-test-data/commons';
import _slicedToArray from '@babel/runtime-corejs3/helpers/esm/slicedToArray';
import { createRelatedDates } from '@commercetools-test-data/utils';

const roles = {
  InventorySupply: 'InventorySupply',
  ProductDistribution: 'ProductDistribution',
  OrderExport: 'OrderExport',
  OrderImport: 'OrderImport',
  Primary: 'Primary'
};

var constants = /*#__PURE__*/Object.freeze({
  __proto__: null,
  roles: roles
});

// https://docs.commercetools.com/api/projects/channels#channeldraft
const generator$1 = Generator({
  fields: {
    key: fake(f => f.lorem.slug(2)),
    roles: [roles.Primary],
    name: fake(() => LocalizedString.random()),
    description: fake(() => LocalizedString.random()),
    address: fake(() => Address.random()),
    custom: null,
    geoLocation: {
      type: 'Point',
      coordinates: [fake(f => f.location.longitude()), fake(f => f.location.latitude())]
    }
  }
});

const transformers$1 = {
  default: Transformer('default', {
    buildFields: ['name', 'description', 'address']
  }),
  rest: Transformer('rest', {
    buildFields: ['name', 'description', 'address']
  }),
  graphql: Transformer('graphql', {
    buildFields: ['name', 'description', 'address']
  })
};

const ChannelDraft = () => Builder({
  generator: generator$1,
  transformers: transformers$1
});

const empty = () => ChannelDraft().roles(undefined).name(undefined).description(undefined).address(undefined).custom(undefined).geoLocation(undefined);

const hub = () => presets$1.empty().key('hub').description(LocalizedString.presets.empty()['en-US']('Hub')).name(LocalizedString.presets.empty()['en-US']('Hub')).roles([roles.ProductDistribution, roles.InventorySupply]);

const storeOther = () => presets$1.empty().key('store_other').description(LocalizedString.presets.empty()['en-US']('Store Other')).name(LocalizedString.presets.empty()['en-US']('Store Other')).roles([roles.ProductDistribution]);

const storeUsa = () => presets$1.empty().key('store_usa').description(LocalizedString.presets.empty()['en-US']('USA Store')).name(LocalizedString.presets.empty()['en-US']('USA Store')).roles([roles.ProductDistribution]);

const presets$3 = {
  storeUsa,
  storeOther,
  hub
};

const inventoryChannel = () => presets$1.empty().key('inventory-channel').description(LocalizedString.presets.empty()['en-US']('Inventory Channel')).name(LocalizedString.presets.empty()['en-US']('Inventory Channel')).roles([roles.InventorySupply]);

const distributionChannel = () => presets$1.empty().key('distribution-channel').description(LocalizedString.presets.empty()['en-US']('Distribution Channel')).name(LocalizedString.presets.empty()['en-US']('Distribution Channel')).roles([roles.ProductDistribution]);

const presets$2 = {
  inventoryChannel,
  distributionChannel
};

const withGeoLocationOnly = () => ChannelDraft().name(undefined).description(undefined).address(undefined).custom(undefined);

const withInventorySupplyAndProductDistributionRoles = () => ChannelDraft().roles([roles.InventorySupply, roles.ProductDistribution]);

const withInventorySupplyAndProductDistributionRolesNoAddress = () => ChannelDraft().address(undefined).roles([roles.InventorySupply, roles.ProductDistribution]);

const withInventorySupplyRole = () => ChannelDraft().roles([roles.InventorySupply]);

const withInventorySupplyRoleNoAddress = () => ChannelDraft().address(undefined).roles([roles.InventorySupply]);

const withProductDistributionRole = () => ChannelDraft().roles([roles.ProductDistribution]);

const presets$1 = {
  empty,
  sampleDataFashion: presets$3,
  withProductDistributionRole,
  withInventorySupplyRole,
  withInventorySupplyRoleNoAddress,
  withInventorySupplyAndProductDistributionRoles,
  withInventorySupplyAndProductDistributionRolesNoAddress,
  withGeoLocationOnly,
  sampleDataGoodStore: presets$2
};

var index$1 = /*#__PURE__*/Object.freeze({
  __proto__: null,
  constants: constants,
  random: ChannelDraft,
  presets: presets$1
});

const _createRelatedDates = createRelatedDates(),
  _createRelatedDates2 = _slicedToArray(_createRelatedDates, 2),
  getOlderDate = _createRelatedDates2[0],
  getNewerDate = _createRelatedDates2[1];

// https://docs.commercetools.com/api/projects/channels#channel
const generator = Generator({
  fields: {
    id: fake(f => f.string.uuid()),
    key: fake(f => f.lorem.slug(2)),
    version: sequence(),
    createdAt: fake(getOlderDate),
    lastModifiedAt: fake(getNewerDate),
    createdBy: fake(() => ClientLogging.random()),
    lastModifiedBy: fake(() => ClientLogging.random()),
    roles: [roles.Primary],
    name: null,
    description: null,
    address: fake(() => Address.random()),
    reviewRatingStatistics: null,
    custom: null,
    geoLocation: {
      type: 'Point',
      coordinates: [fake(f => f.location.longitude()), fake(f => f.location.latitude())]
    }
  }
});

const transformers = {
  default: Transformer('default', {
    buildFields: ['createdBy', 'lastModifiedBy', 'name', 'description', 'address']
  }),
  rest: Transformer('rest', {
    buildFields: ['createdBy', 'lastModifiedBy', 'name', 'description', 'address']
  }),
  graphql: Transformer('graphql', {
    buildFields: ['address', 'createdBy', 'lastModifiedBy'],
    addFields: _ref => {
      let fields = _ref.fields;
      const nameAllLocales = LocalizedString.toLocalizedField(fields.name);
      const descriptionAllLocales = LocalizedString.toLocalizedField(fields.description);
      return {
        __typename: 'Channel',
        nameAllLocales,
        descriptionAllLocales
      };
    }
  })
};

const Model = () => Builder({
  generator,
  transformers
});

const clothesStore = () => Model().name(LocalizedString.presets.empty().en('Clothes Store')).key('clothes-store-key');

const foodStore = () => Model().name(LocalizedString.presets.empty().en('Food Store').de('Lebensmittelgesch√§ft')).key('food-store-key');

const presets = {
  foodStore,
  clothesStore
};

var index = /*#__PURE__*/Object.freeze({
  __proto__: null,
  ChannelDraft: index$1,
  Channel: index,
  constants: constants,
  random: Model,
  presets: presets,
  draftPresets: presets$1
});

export { index as Channel, index$1 as ChannelDraft, constants, presets$1 as draftPresets, presets, Model as random };
