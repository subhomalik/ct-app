'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var core = require('@commercetools-test-data/core');
var commons = require('@commercetools-test-data/commons');
var _slicedToArray = require('@babel/runtime-corejs3/helpers/slicedToArray');
var utils = require('@commercetools-test-data/utils');

const roles = {
  InventorySupply: 'InventorySupply',
  ProductDistribution: 'ProductDistribution',
  OrderExport: 'OrderExport',
  OrderImport: 'OrderImport',
  Primary: 'Primary'
};

var constants = /*#__PURE__*/Object.freeze({
  __proto__: null,
  roles: roles
});

// https://docs.commercetools.com/api/projects/channels#channeldraft
const generator$1 = core.Generator({
  fields: {
    key: core.fake(f => f.lorem.slug(2)),
    roles: [roles.Primary],
    name: core.fake(() => commons.LocalizedString.random()),
    description: core.fake(() => commons.LocalizedString.random()),
    address: core.fake(() => commons.Address.random()),
    custom: null,
    geoLocation: {
      type: 'Point',
      coordinates: [core.fake(f => f.location.longitude()), core.fake(f => f.location.latitude())]
    }
  }
});

const transformers$1 = {
  default: core.Transformer('default', {
    buildFields: ['name', 'description', 'address']
  }),
  rest: core.Transformer('rest', {
    buildFields: ['name', 'description', 'address']
  }),
  graphql: core.Transformer('graphql', {
    buildFields: ['name', 'description', 'address']
  })
};

const ChannelDraft = () => core.Builder({
  generator: generator$1,
  transformers: transformers$1
});

const empty = () => ChannelDraft().roles(undefined).name(undefined).description(undefined).address(undefined).custom(undefined).geoLocation(undefined);

const hub = () => presets$1.empty().key('hub').description(commons.LocalizedString.presets.empty()['en-US']('Hub')).name(commons.LocalizedString.presets.empty()['en-US']('Hub')).roles([roles.ProductDistribution, roles.InventorySupply]);

const storeOther = () => presets$1.empty().key('store_other').description(commons.LocalizedString.presets.empty()['en-US']('Store Other')).name(commons.LocalizedString.presets.empty()['en-US']('Store Other')).roles([roles.ProductDistribution]);

const storeUsa = () => presets$1.empty().key('store_usa').description(commons.LocalizedString.presets.empty()['en-US']('USA Store')).name(commons.LocalizedString.presets.empty()['en-US']('USA Store')).roles([roles.ProductDistribution]);

const presets$3 = {
  storeUsa,
  storeOther,
  hub
};

const inventoryChannel = () => presets$1.empty().key('inventory-channel').description(commons.LocalizedString.presets.empty()['en-US']('Inventory Channel')).name(commons.LocalizedString.presets.empty()['en-US']('Inventory Channel')).roles([roles.InventorySupply]);

const distributionChannel = () => presets$1.empty().key('distribution-channel').description(commons.LocalizedString.presets.empty()['en-US']('Distribution Channel')).name(commons.LocalizedString.presets.empty()['en-US']('Distribution Channel')).roles([roles.ProductDistribution]);

const presets$2 = {
  inventoryChannel,
  distributionChannel
};

const withGeoLocationOnly = () => ChannelDraft().name(undefined).description(undefined).address(undefined).custom(undefined);

const withInventorySupplyAndProductDistributionRoles = () => ChannelDraft().roles([roles.InventorySupply, roles.ProductDistribution]);

const withInventorySupplyAndProductDistributionRolesNoAddress = () => ChannelDraft().address(undefined).roles([roles.InventorySupply, roles.ProductDistribution]);

const withInventorySupplyRole = () => ChannelDraft().roles([roles.InventorySupply]);

const withInventorySupplyRoleNoAddress = () => ChannelDraft().address(undefined).roles([roles.InventorySupply]);

const withProductDistributionRole = () => ChannelDraft().roles([roles.ProductDistribution]);

const presets$1 = {
  empty,
  sampleDataFashion: presets$3,
  withProductDistributionRole,
  withInventorySupplyRole,
  withInventorySupplyRoleNoAddress,
  withInventorySupplyAndProductDistributionRoles,
  withInventorySupplyAndProductDistributionRolesNoAddress,
  withGeoLocationOnly,
  sampleDataGoodStore: presets$2
};

var index$1 = /*#__PURE__*/Object.freeze({
  __proto__: null,
  constants: constants,
  random: ChannelDraft,
  presets: presets$1
});

const _createRelatedDates = utils.createRelatedDates(),
  _createRelatedDates2 = _slicedToArray(_createRelatedDates, 2),
  getOlderDate = _createRelatedDates2[0],
  getNewerDate = _createRelatedDates2[1];

// https://docs.commercetools.com/api/projects/channels#channel
const generator = core.Generator({
  fields: {
    id: core.fake(f => f.string.uuid()),
    key: core.fake(f => f.lorem.slug(2)),
    version: core.sequence(),
    createdAt: core.fake(getOlderDate),
    lastModifiedAt: core.fake(getNewerDate),
    createdBy: core.fake(() => commons.ClientLogging.random()),
    lastModifiedBy: core.fake(() => commons.ClientLogging.random()),
    roles: [roles.Primary],
    name: null,
    description: null,
    address: core.fake(() => commons.Address.random()),
    reviewRatingStatistics: null,
    custom: null,
    geoLocation: {
      type: 'Point',
      coordinates: [core.fake(f => f.location.longitude()), core.fake(f => f.location.latitude())]
    }
  }
});

const transformers = {
  default: core.Transformer('default', {
    buildFields: ['createdBy', 'lastModifiedBy', 'name', 'description', 'address']
  }),
  rest: core.Transformer('rest', {
    buildFields: ['createdBy', 'lastModifiedBy', 'name', 'description', 'address']
  }),
  graphql: core.Transformer('graphql', {
    buildFields: ['address', 'createdBy', 'lastModifiedBy'],
    addFields: _ref => {
      let fields = _ref.fields;
      const nameAllLocales = commons.LocalizedString.toLocalizedField(fields.name);
      const descriptionAllLocales = commons.LocalizedString.toLocalizedField(fields.description);
      return {
        __typename: 'Channel',
        nameAllLocales,
        descriptionAllLocales
      };
    }
  })
};

const Model = () => core.Builder({
  generator,
  transformers
});

const clothesStore = () => Model().name(commons.LocalizedString.presets.empty().en('Clothes Store')).key('clothes-store-key');

const foodStore = () => Model().name(commons.LocalizedString.presets.empty().en('Food Store').de('Lebensmittelgesch√§ft')).key('food-store-key');

const presets = {
  foodStore,
  clothesStore
};

var index = /*#__PURE__*/Object.freeze({
  __proto__: null,
  ChannelDraft: index$1,
  Channel: index,
  constants: constants,
  random: Model,
  presets: presets,
  draftPresets: presets$1
});

exports.Channel = index;
exports.ChannelDraft = index$1;
exports.constants = constants;
exports.draftPresets = presets$1;
exports.presets = presets;
exports.random = Model;
