'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var core = require('@commercetools-test-data/core');
var _Object$keys = require('@babel/runtime-corejs3/core-js-stable/object/keys');
var _Object$getOwnPropertySymbols = require('@babel/runtime-corejs3/core-js-stable/object/get-own-property-symbols');
var _filterInstanceProperty = require('@babel/runtime-corejs3/core-js-stable/instance/filter');
var _Object$getOwnPropertyDescriptor = require('@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptor');
var _forEachInstanceProperty = require('@babel/runtime-corejs3/core-js-stable/instance/for-each');
var _Object$getOwnPropertyDescriptors = require('@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptors');
var _Object$defineProperties = require('@babel/runtime-corejs3/core-js-stable/object/define-properties');
var _Object$defineProperty = require('@babel/runtime-corejs3/core-js-stable/object/define-property');
var _defineProperty = require('@babel/runtime-corejs3/helpers/defineProperty');
var omit = require('lodash/omit');
var faker = require('@faker-js/faker');
var _slicedToArray = require('@babel/runtime-corejs3/helpers/slicedToArray');
var _mapInstanceProperty = require('@babel/runtime-corejs3/core-js-stable/instance/map');
var _Object$entries = require('@babel/runtime-corejs3/core-js-stable/object/entries');
var utils = require('@commercetools-test-data/utils');

function _interopDefault (e) { return e && e.__esModule ? e : { 'default': e }; }

var _Object$keys__default = /*#__PURE__*/_interopDefault(_Object$keys);
var _Object$getOwnPropertySymbols__default = /*#__PURE__*/_interopDefault(_Object$getOwnPropertySymbols);
var _filterInstanceProperty__default = /*#__PURE__*/_interopDefault(_filterInstanceProperty);
var _Object$getOwnPropertyDescriptor__default = /*#__PURE__*/_interopDefault(_Object$getOwnPropertyDescriptor);
var _forEachInstanceProperty__default = /*#__PURE__*/_interopDefault(_forEachInstanceProperty);
var _Object$getOwnPropertyDescriptors__default = /*#__PURE__*/_interopDefault(_Object$getOwnPropertyDescriptors);
var _Object$defineProperties__default = /*#__PURE__*/_interopDefault(_Object$defineProperties);
var _Object$defineProperty__default = /*#__PURE__*/_interopDefault(_Object$defineProperty);
var omit__default = /*#__PURE__*/_interopDefault(omit);
var _mapInstanceProperty__default = /*#__PURE__*/_interopDefault(_mapInstanceProperty);
var _Object$entries__default = /*#__PURE__*/_interopDefault(_Object$entries);

const generator$b = core.Generator({
  fields: {
    id: core.fake(f => f.string.alphanumeric(8)),
    key: core.fake(f => f.lorem.slug(2)),
    title: core.fake(f => f.person.jobTitle()),
    salutation: core.oneOf('Dear', 'To Whom it May Concern', 'Members of the Committee'),
    firstName: core.fake(f => f.person.firstName()),
    lastName: core.fake(f => f.person.lastName()),
    streetName: core.fake(f => f.location.street()),
    streetNumber: core.fake(f => String(f.number.int())),
    additionalStreetInfo: core.fake(f => f.location.street()),
    postalCode: core.fake(f => f.location.zipCode()),
    city: core.fake(f => f.location.city()),
    region: null,
    state: core.fake(f => f.location.state()),
    country: 'DE',
    company: core.fake(f => f.company.name()),
    department: core.fake(f => f.commerce.department()),
    building: null,
    apartment: null,
    pOBox: 'PO Box 1033',
    phone: core.fake(f => f.phone.number()),
    mobile: core.fake(f => f.phone.number()),
    fax: core.fake(f => f.phone.number()),
    email: core.fake(f => f.internet.email()),
    additionalAddressInfo: null,
    externalId: null,
    custom: null
  }
});

const transformers$b = {
  default: core.Transformer('default', {}),
  rest: core.Transformer('rest', {}),
  graphql: core.Transformer('graphql', {
    addFields: () => ({
      __typename: 'Address'
    })
  })
};

const Model$9 = () => core.Builder({
  generator: generator$b,
  transformers: transformers$b
});

const presets$N = {};

var index$c = /*#__PURE__*/Object.freeze({
  __proto__: null,
  random: Model$9,
  presets: presets$N
});

// https://docs.commercetools.com/api/types#addressdraft
const generator$a = core.Generator({
  fields: {
    id: null,
    key: core.fake(f => f.lorem.slug(2)),
    title: core.fake(f => f.person.jobTitle()),
    salutation: core.oneOf('Dear', 'To Whom it May Concern', 'Members of the Committee'),
    firstName: core.fake(f => f.person.firstName()),
    lastName: core.fake(f => f.person.lastName()),
    streetName: core.fake(f => f.location.street()),
    streetNumber: core.fake(f => String(f.number.int())),
    additionalStreetInfo: core.fake(f => f.location.street()),
    postalCode: core.fake(f => f.location.zipCode()),
    city: core.fake(f => f.location.city()),
    region: null,
    state: core.fake(f => f.location.state()),
    country: 'DE',
    company: core.fake(f => f.company.name()),
    department: core.fake(f => f.commerce.department()),
    building: null,
    apartment: null,
    pOBox: 'PO Box 1033',
    phone: core.fake(f => f.phone.number()),
    mobile: core.fake(f => f.phone.number()),
    fax: core.fake(f => f.phone.number()),
    email: core.fake(f => f.internet.email()),
    additionalAddressInfo: null,
    externalId: null,
    custom: null
  }
});

const transformers$a = {
  default: core.Transformer('default', {}),
  rest: core.Transformer('rest', {}),
  graphql: core.Transformer('graphql', {})
};

const AddressDraft = () => core.Builder({
  generator: generator$a,
  transformers: transformers$a
});

const withCountryUs = () => AddressDraft().country('US');

const withCountryUsNoState = () => AddressDraft().state(null).country('US');

const presets$M = {
  withCountryUs,
  withCountryUsNoState
};

const empty$2 = () => AddressDraft().id(undefined).key(undefined).title(undefined).salutation(undefined).firstName(undefined).lastName(undefined).streetName(undefined).streetNumber(undefined).additionalStreetInfo(undefined).postalCode(undefined).city(undefined).state(undefined).region(undefined).company(undefined).department(undefined).building(undefined).apartment(undefined).pOBox(undefined).phone(undefined).mobile(undefined).fax(undefined).email(undefined).additionalAddressInfo(undefined).externalId(undefined).custom(undefined);

const sampleAustralia = () => presets$J.empty().firstName('Sample Customer').lastName('Australia').streetName('Center Road').streetNumber('1').postalCode('34567').city('Center Town').country('AU');

const sampleGermany = () => presets$J.empty().firstName('Sample Customer').lastName('Germany').streetName('Sample Street').streetNumber('1').postalCode('12345').city('Sample Town').country('DE');

const sampleUsa = () => presets$J.empty().firstName('Sample Customer').lastName('USA').streetName('Main Street').streetNumber('1').postalCode('56789').city('Mainville').state('New Jersey').country('US');

const presets$L = {
  sampleUsa,
  sampleAustralia,
  sampleGermany
};

const jenniferJonesAddress = () => presets$J.empty().firstName('Jennifer').lastName('Jones').streetName('Main Road').streetNumber('100').postalCode('SW1A2AA').city('Westminster').country('GB');

const jenniferRobinsonAddress = () => presets$J.empty().firstName('Jennifer').lastName('Robinson').streetName('Second Street').streetNumber('15').postalCode('10001').city('New York City').state('New York').country('US');

const jenniferSchmidtAddress = () => presets$J.empty().firstName('Jennifer').lastName('Schmidt').streetName('Hauptstrasse').streetNumber('25').postalCode('14467').city('Potsdam').country('DE');

const sebastianFranklinAddress = () => presets$J.empty().firstName('Sebastian').lastName('Franklin').streetName('South Road').streetNumber('9').postalCode('27517').city('Durham').state('North Carolina').country('US');

const sebastianMullerAddress = () => presets$J.empty().firstName('Sebastian').lastName('Müller').streetName('Schulstrasse').streetNumber('12').postalCode('80331').city('München').country('DE');

const sebastianSmithAddress = () => presets$J.empty().firstName('Sebastian').lastName('Smith').streetName('Center Street').streetNumber('1').postalCode('PO167GZ').city('Fareham').country('GB');

const presets$K = {
  jenniferJonesAddress,
  jenniferRobinsonAddress,
  jenniferSchmidtAddress,
  sebastianFranklinAddress,
  sebastianMullerAddress,
  sebastianSmithAddress
};

const presets$J = {
  changeHistoryData: presets$M,
  empty: empty$2,
  sampleDataFashion: presets$L,
  sampleDataGoodStore: presets$K
};

var index$b = /*#__PURE__*/Object.freeze({
  __proto__: null,
  random: AddressDraft,
  presets: presets$J
});

// https://docs.commercetools.com/api/types#centprecisionmoneydraft

const generator$9 = core.Generator({
  fields: {
    centAmount: core.fake(f => f.number.int({
      min: 10
    })),
    currencyCode: core.oneOf('EUR', 'USD'),
    type: 'centPrecision',
    // Default fraction digits for a currency for EUR and USD
    fractionDigits: 2
  }
});

const transformers$9 = {
  default: core.Transformer('default', {
    buildFields: []
  }),
  rest: core.Transformer('rest', {
    buildFields: []
  }),
  graphql: core.Transformer('graphql', {
    buildFields: []
  })
};

const Model$8 = () => core.Builder({
  generator: generator$9,
  transformers: transformers$9
});

const presets$I = {};

var index$a = /*#__PURE__*/Object.freeze({
  __proto__: null,
  random: Model$8,
  presets: presets$I
});

// https://docs.commercetools.com/api/types#centprecisionmoney

const generator$8 = core.Generator({
  fields: {
    centAmount: core.fake(f => f.number.int({
      min: 10
    })),
    currencyCode: core.oneOf('EUR', 'USD'),
    type: 'centPrecision',
    // Default fraction digits for a currency for EUR and USD
    fractionDigits: 2
  }
});

const transformers$8 = {
  default: core.Transformer('default', {
    buildFields: []
  }),
  rest: core.Transformer('rest', {
    buildFields: []
  }),
  graphql: core.Transformer('graphql', {
    buildFields: [],
    addFields: () => ({
      __typename: 'Money'
    })
  })
};

const Model$7 = () => core.Builder({
  generator: generator$8,
  transformers: transformers$8
});

const presets$H = {};

var index$9 = /*#__PURE__*/Object.freeze({
  __proto__: null,
  CentPrecisionMoneyDraft: index$a,
  random: Model$7,
  presets: presets$H
});

// https://docs.commercetools.com/api/types#referencetype
const generator$7 = core.Generator({
  fields: {
    id: core.fake(f => f.string.uuid()),
    typeId: null
  }
});

function ownKeys$1(e, r) { var t = _Object$keys__default["default"](e); if (_Object$getOwnPropertySymbols__default["default"]) { var o = _Object$getOwnPropertySymbols__default["default"](e); r && (o = _filterInstanceProperty__default["default"](o).call(o, function (r) { return _Object$getOwnPropertyDescriptor__default["default"](e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread$1(e) { for (var r = 1; r < arguments.length; r++) { var _context, _context2; var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? _forEachInstanceProperty__default["default"](_context = ownKeys$1(Object(t), !0)).call(_context, function (r) { _defineProperty(e, r, t[r]); }) : _Object$getOwnPropertyDescriptors__default["default"] ? _Object$defineProperties__default["default"](e, _Object$getOwnPropertyDescriptors__default["default"](t)) : _forEachInstanceProperty__default["default"](_context2 = ownKeys$1(Object(t))).call(_context2, function (r) { _Object$defineProperty__default["default"](e, r, _Object$getOwnPropertyDescriptor__default["default"](t, r)); }); } return e; }
const transformers$7 = {
  default: core.Transformer('default', {}),
  rest: core.Transformer('rest', {
    replaceFields: _ref => {
      let fields = _ref.fields;
      return _objectSpread$1(_objectSpread$1({}, fields), {}, {
        obj: omit__default["default"](fields, ['typeId'])
      });
    }
  }),
  // we do not add the expanded object ourselves
  // since some fields are pure `*Ref`, e.g `channelsRef`
  // with no option to expand.
  graphql: core.Transformer('graphql', {
    addFields: () => ({
      __typename: 'Reference'
    })
  })
};

const Model$6 = () => core.Builder({
  generator: generator$7,
  transformers: transformers$7
});

const associateRoleReference = () => Model$6().typeId('associate-role');

const presets$G = {
  associateRoleReference
};

const attributeGroupReference = () => Model$6().typeId('attribute-group');

const presets$F = {
  attributeGroupReference
};

const businessUnitReference = () => Model$6().typeId('business-unit');

const presets$E = {
  businessUnitReference
};

const cartReference = () => Model$6().typeId('cart');

const presets$D = {
  cartReference
};

const cartDiscountReference = () => Model$6().typeId('cart-discount');

const presets$C = {
  cartDiscountReference
};

const categoryReference = () => Model$6().typeId('category');

const presets$B = {
  categoryReference
};

const channelReference = () => Model$6().typeId('channel');

const presets$A = {
  channelReference
};

const customerReference = () => Model$6().typeId('customer');

const presets$z = {
  customerReference
};

const customerGroupReference = () => Model$6().typeId('customer-group');

const presets$y = {
  customerGroupReference
};

const directDiscountReference = () => Model$6().typeId('direct-discount');

const presets$x = {
  directDiscountReference
};

const discountCodeReference = () => Model$6().typeId('discount-code');

const presets$w = {
  discountCodeReference
};

const extensionReference = () => Model$6().typeId('extension');

const presets$v = {
  extensionReference
};

const inventoryEntryReference = () => Model$6().typeId('inventory-entry');

const presets$u = {
  inventoryEntryReference
};

const keyValueDocumentReference = () => Model$6().typeId('key-value-document');

const presets$t = {
  keyValueDocumentReference
};

const orderReference = () => Model$6().typeId('order');

const presets$s = {
  orderReference
};

const orderEditReference = () => Model$6().typeId('order-edit');

const presets$r = {
  orderEditReference
};

const paymentReference = () => Model$6().typeId('payment');

const presets$q = {
  paymentReference
};

const productReference = () => Model$6().typeId('product');

const presets$p = {
  productReference
};

const productDiscountReference = () => Model$6().typeId('product-discount');

const presets$o = {
  productDiscountReference
};

const productPriceReference = () => Model$6().typeId('product-price');

const presets$n = {
  productPriceReference
};

const productSelectionReference = () => Model$6().typeId('product-selection');

const presets$m = {
  productSelectionReference
};

const productTypeReference = () => Model$6().typeId('product-type');

const presets$l = {
  productTypeReference
};

const quoteReference = () => Model$6().typeId('quote');

const presets$k = {
  quoteReference
};

const quoteRequestReference = () => Model$6().typeId('quote-request');

const presets$j = {
  quoteRequestReference
};

const reviewReference = () => Model$6().typeId('review');

const presets$i = {
  reviewReference
};

const shippingMethodReference = () => Model$6().typeId('shipping-method');

const presets$h = {
  shippingMethodReference
};

const shoppingListReference = () => Model$6().typeId('shopping-list');

const presets$g = {
  shoppingListReference
};

const stagedQuoteReference = () => Model$6().typeId('staged-quote');

const presets$f = {
  stagedQuoteReference
};

const standalonePriceReference = () => Model$6().typeId('standalone-price');

const presets$e = {
  standalonePriceReference
};

const stateReference = () => Model$6().typeId('state');

const presets$d = {
  stateReference
};

const storeReference$1 = () => Model$6().typeId('store');

const presets$c = {
  storeReference: storeReference$1
};

const subscriptionReference = () => Model$6().typeId('subscription');

const presets$b = {
  subscriptionReference
};

const taxCategoryReference = () => Model$6().typeId('tax-category');

const presets$a = {
  taxCategoryReference
};

const typeReference = () => Model$6().typeId('type');

const presets$9 = {
  typeReference
};

const zoneReference$1 = () => Model$6().typeId('zone');

const presets$8 = {
  zoneReference: zoneReference$1
};

const presets$7 = {
  associateRoleReference: presets$G,
  attributeGroupReference: presets$F,
  businessUnitReference: presets$E,
  cartDiscountReference: presets$C,
  cartReference: presets$D,
  categoryReference: presets$B,
  channelReference: presets$A,
  customerReference: presets$z,
  customerGroupReference: presets$y,
  directDiscountReference: presets$x,
  discountCodeReference: presets$w,
  extensionReference: presets$v,
  inventoryEntryReference: presets$u,
  keyValueDocumentReference: presets$t,
  orderReference: presets$s,
  orderEditReference: presets$r,
  paymentReference: presets$q,
  productReference: presets$p,
  productDiscountReference: presets$o,
  productPriceReference: presets$n,
  productSelectionReference: presets$m,
  productTypeReference: presets$l,
  quoteReference: presets$k,
  quoteRequestReference: presets$j,
  reviewReference: presets$i,
  shippingMethodReference: presets$h,
  shoppingListReference: presets$g,
  stagedQuoteReference: presets$f,
  standalonePriceReference: presets$e,
  stateReference: presets$d,
  storeReference: presets$c,
  subscriptionReference: presets$b,
  taxCategoryReference: presets$a,
  typeReference: presets$9,
  zoneReference: presets$8
};

var index$8 = /*#__PURE__*/Object.freeze({
  __proto__: null,
  random: Model$6,
  presets: presets$7
});

// https://docs.commercetools.com/api/types#client-logging
const generator$6 = core.Generator({
  fields: {
    externalUserId: core.fake(f => f.string.uuid()),
    anonymousId: core.fake(f => f.string.uuid()),
    clientId: core.fake(f => f.string.uuid()),
    customer: core.fake(() => Model$6().typeId('customer'))
  }
});

const transformers$6 = {
  default: core.Transformer('default', {
    buildFields: ['customer']
  }),
  rest: core.Transformer('rest', {
    buildFields: ['customer']
  }),
  graphql: core.Transformer('graphql', {
    replaceFields: _ref => {
      let fields = _ref.fields;
      const customerRef = core.buildField(fields.customer, 'graphql');
      const userRef = Model$6().typeId('user').buildGraphql();
      return {
        __typename: 'Initiator',
        isPlatformClient: faker.faker.datatype.boolean(),
        externalUserId: fields.externalUserId,
        anonymousId: fields.anonymousId,
        clientId: fields.clientId,
        customerRef,
        userRef
      };
    }
  })
};

const Model$5 = () => core.Builder({
  generator: generator$6,
  transformers: transformers$6
});

var index$7 = {};

var index$6 = /*#__PURE__*/Object.freeze({
  __proto__: null,
  random: Model$5,
  presets: index$7
});

// https://docs.commercetools.com/api/types#keyreference
const generator$5 = core.Generator({
  fields: {
    typeId: null,
    key: core.fake(f => f.string.alphanumeric(8))
  }
});

const transformers$5 = {
  default: core.Transformer('default', {}),
  rest: core.Transformer('rest', {}),
  graphql: core.Transformer('graphql', {
    addFields: () => ({
      __typename: 'Reference'
    })
  })
};

const Model$4 = () => core.Builder({
  generator: generator$5,
  transformers: transformers$5
});

const associateRole = () => Model$4().typeId('associate-role');

const businessUnit = () => Model$4().typeId('business-unit');

const category = () => Model$4().typeId('category');

const customerGroup = () => Model$4().typeId('customer-group');

const customer = () => Model$4().typeId('customer');

const productType = () => Model$4().typeId('product-type');

const shippingMethod = () => Model$4().typeId('shipping-method');

const storeReference = () => Model$4().typeId('store');

const taxCategory = () => Model$4().typeId('tax-category');

const zoneReference = () => Model$4().typeId('zone');

const presets$6 = {
  associateRole,
  businessUnit,
  category,
  customer,
  customerGroup,
  productType,
  taxCategory,
  shippingMethod,
  zone: zoneReference,
  store: storeReference
};

var index$5 = /*#__PURE__*/Object.freeze({
  __proto__: null,
  random: Model$4,
  presets: presets$6
});

const generator$4 = core.Generator({
  fields: {
    locale: core.fake(f => f.helpers.arrayElement(['en', 'de', 'es'])),
    value: core.fake(f => f.lorem.words({
      min: 1,
      max: 4
    }))
  }
});

const transformers$4 = {
  default: core.Transformer('default', {}),
  graphql: core.Transformer('graphql', {
    addFields: () => ({
      __typename: 'LocalizedField'
    })
  })
};

const Model$3 = () => core.Builder({
  generator: generator$4,
  transformers: transformers$4
});

const presets$5 = {};

var index$4 = /*#__PURE__*/Object.freeze({
  __proto__: null,
  random: Model$3,
  presets: presets$5
});

// https://docs.commercetools.com/api/types#localizedstring
const generator$3 = core.Generator({
  fields: {
    de: core.fake(f => f.lorem.words(5)),
    en: core.fake(f => f.lorem.words(3)),
    fr: core.fake(f => f.lorem.words(4))
  }
});

const isNil = value => value === undefined || value === null;
const transformers$3 = {
  default: core.Transformer('default', {}),
  rest: core.Transformer('rest', {}),
  graphql: core.Transformer('graphql', {
    replaceFields: _ref => {
      var _context, _context2;
      let fields = _ref.fields;
      return _mapInstanceProperty__default["default"](_context = _filterInstanceProperty__default["default"](_context2 = _Object$entries__default["default"](fields)).call(_context2, _ref2 => {
        let _ref3 = _slicedToArray(_ref2, 2),
          value = _ref3[1];
        return !isNil(value);
      })).call(_context, _ref4 => {
        let _ref5 = _slicedToArray(_ref4, 2),
          locale = _ref5[0],
          value = _ref5[1];
        return {
          locale,
          value,
          __typename: 'LocalizedString'
        };
      });
    }
  })
};

const Model$2 = () => core.Builder({
  generator: generator$3,
  transformers: transformers$3
});

const empty$1 = () => Model$2().en(undefined).de(undefined).fr(undefined);

const ofSlugs = () => Model$2().en(faker.faker.lorem.slug()).de(faker.faker.lorem.slug()).fr(faker.faker.lorem.slug());

const presets$4 = {
  empty: empty$1,
  ofSlugs
};

const toLocalizedField = value => {
  if (!value) {
    return null;
  }
  const localizedField = core.buildField(value, 'graphql');
  return localizedField;
};

var index$3 = /*#__PURE__*/Object.freeze({
  __proto__: null,
  random: Model$2,
  presets: presets$4,
  toLocalizedField: toLocalizedField
});

// https://docs.commercetools.com/api/types#money

const generator$2 = core.Generator({
  fields: {
    centAmount: core.fake(f => f.number.int({
      min: 5,
      max: 10
    })),
    currencyCode: core.oneOf('EUR', 'USD')
  }
});

const transformers$2 = {
  default: core.Transformer('default', {
    buildFields: []
  }),
  rest: core.Transformer('rest', {
    buildFields: []
  }),
  graphql: core.Transformer('graphql', {
    buildFields: []
  })
};

const Model$1 = () => core.Builder({
  generator: generator$2,
  transformers: transformers$2
});

const withUsdCurrencyCode = () => Model$1().currencyCode('USD');

const presets$3 = {
  withUsdCurrencyCode
};

const withCent = function () {
  let centAmount = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 10;
  let currencyCode = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'USD';
  return Model$1().centAmount(centAmount).currencyCode(currencyCode);
};

const withCurrency = function () {
  let currency = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'USD';
  return Model$1().currencyCode(currency);
};

const presets$2 = {
  changeHistoryData: presets$3,
  withCent,
  withCurrency
};

var index$2 = /*#__PURE__*/Object.freeze({
  __proto__: null,
  random: Model$1,
  presets: presets$2
});

const _createRelatedDates$1 = utils.createRelatedDates(),
  _createRelatedDates2$1 = _slicedToArray(_createRelatedDates$1, 2),
  getOlderDate$1 = _createRelatedDates2$1[0],
  getNewerDate$1 = _createRelatedDates2$1[1];

// https://docs.commercetools.com/api/types#pricedraft
const generator$1 = core.Generator({
  fields: {
    key: null,
    value: core.fake(() => Model$1()),
    country: core.fake(f => f.location.countryCode()),
    customerGroup: null,
    channel: null,
    validFrom: core.fake(getOlderDate$1),
    validUntil: core.fake(getNewerDate$1),
    tiers: null,
    discounted: null,
    custom: null
  }
});

function ownKeys(e, r) { var t = _Object$keys__default["default"](e); if (_Object$getOwnPropertySymbols__default["default"]) { var o = _Object$getOwnPropertySymbols__default["default"](e); r && (o = _filterInstanceProperty__default["default"](o).call(o, function (r) { return _Object$getOwnPropertyDescriptor__default["default"](e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var _context, _context2; var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? _forEachInstanceProperty__default["default"](_context = ownKeys(Object(t), !0)).call(_context, function (r) { _defineProperty(e, r, t[r]); }) : _Object$getOwnPropertyDescriptors__default["default"] ? _Object$defineProperties__default["default"](e, _Object$getOwnPropertyDescriptors__default["default"](t)) : _forEachInstanceProperty__default["default"](_context2 = ownKeys(Object(t))).call(_context2, function (r) { _Object$defineProperty__default["default"](e, r, _Object$getOwnPropertyDescriptor__default["default"](t, r)); }); } return e; }
const transformers$1 = {
  default: core.Transformer('default', {
    buildFields: ['value', 'customerGroup', 'channel', 'tiers', 'discounted', 'custom']
  }),
  rest: core.Transformer('rest', {
    buildFields: ['value', 'customerGroup', 'channel', 'tiers', 'discounted', 'custom']
  }),
  graphql: core.Transformer('graphql', {
    buildFields: ['value', 'customerGroup', 'channel', 'tiers', 'discounted', 'custom'],
    replaceFields: _ref => {
      let fields = _ref.fields;
      return _objectSpread(_objectSpread({}, fields), {}, {
        value: {
          centPrecision: fields.value
        }
      });
    }
  })
};

const PriceDraft = () => core.Builder({
  generator: generator$1,
  transformers: transformers$1
});

const empty = () => PriceDraft().key(undefined).country(undefined).customerGroup(undefined).channel(undefined).validFrom(undefined).validUntil(undefined).tiers(undefined).discounted(undefined).custom(undefined);

const minimal = () => PriceDraft().value(presets$2.withCurrency('USD'));

const withValue = function () {
  let _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
    _ref$currency = _ref.currency,
    currency = _ref$currency === void 0 ? 'USD' : _ref$currency;
  return PriceDraft().value(presets$2.withCurrency(currency));
};

const presets$1 = {
  empty,
  minimal,
  withValue
};

var index$1 = /*#__PURE__*/Object.freeze({
  __proto__: null,
  random: PriceDraft,
  presets: presets$1
});

const _createRelatedDates = utils.createRelatedDates(),
  _createRelatedDates2 = _slicedToArray(_createRelatedDates, 2),
  getOlderDate = _createRelatedDates2[0],
  getNewerDate = _createRelatedDates2[1];

// https://docs.commercetools.com/api/types#price
const generator = core.Generator({
  fields: {
    id: core.fake(f => f.string.uuid()),
    key: null,
    value: core.fake(() => Model$7()),
    country: core.fake(f => f.location.countryCode()),
    customerGroup: null,
    channel: null,
    validFrom: core.fake(getOlderDate),
    validUntil: core.fake(getNewerDate),
    tiers: null,
    discounted: null,
    custom: null
  }
});

const transformers = {
  default: core.Transformer('default', {
    buildFields: ['value', 'customerGroup', 'channel', 'tiers', 'discounted', 'custom']
  }),
  rest: core.Transformer('rest', {
    buildFields: ['value', 'customerGroup', 'channel', 'tiers', 'discounted', 'custom']
  }),
  graphql: core.Transformer('graphql', {
    buildFields: ['value', 'customerGroup', 'channel', 'tiers', 'discounted', 'custom'],
    addFields: () => ({
      __typename: 'ProductPrice'
    })
  })
};

const Model = () => core.Builder({
  generator,
  transformers
});

const presets = {};

var index = /*#__PURE__*/Object.freeze({
  __proto__: null,
  PriceDraft: index$1,
  random: Model,
  presets: presets
});

exports.Address = index$c;
exports.AddressDraft = index$b;
exports.CentPrecisionMoney = index$9;
exports.CentPrecisionMoneyDraft = index$a;
exports.ClientLogging = index$6;
exports.KeyReference = index$5;
exports.LocalizedField = index$4;
exports.LocalizedString = index$3;
exports.Money = index$2;
exports.Price = index;
exports.PriceDraft = index$1;
exports.Reference = index$8;
