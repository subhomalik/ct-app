'use strict';

var crypto = require('crypto');
var fs = require('fs');
var pluginutils = require('@rollup/pluginutils');
var vite = require('vite');

function _interopDefault (e) { return e && e.__esModule ? e : { 'default': e }; }

function _interopNamespace(e) {
  if (e && e.__esModule) return e;
  var n = Object.create(null);
  if (e) {
    Object.keys(e).forEach(function (k) {
      if (k !== 'default') {
        var d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: function () { return e[k]; }
        });
      }
    });
  }
  n["default"] = e;
  return Object.freeze(n);
}

var crypto__default = /*#__PURE__*/_interopDefault(crypto);
var fs__default = /*#__PURE__*/_interopDefault(fs);

/**
 * COPIED FROM https://github.com/pd4d10/vite-plugin-svgr
 */
function vitePluginSvgr() {
  const filter = pluginutils.createFilter('**/*.react.svg');
  return {
    name: 'vite-plugin-svgr',
    async transform(_code, id) {
      if (filter(id)) {
        const _await$import = await Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(require('@svgr/core')); }),
          transform = _await$import.transform;
        const svgCode = await fs__default["default"].promises.readFile(id, 'utf8');
        const componentCode = await transform(svgCode, {
          icon: false,
          svgoConfig: {
            plugins: [{
              // https://github.com/svg/svgo#default-preset
              name: 'preset-default',
              params: {
                overrides: {
                  removeViewBox: false
                }
              }
            },
            // Avoid collisions with ids in other SVGs,
            // which was causing incorrect masking, gradient directions, etc
            // this is an ongoing issue with both SVGR and SVGO,
            // https://github.com/svg/svgo/issues/913#issuecomment-369373572
            // see SVGR issues:
            // https://github.com/gregberge/svgr/issues/322
            // https://github.com/gregberge/svgr/issues/210
            // see SVGO issues:
            // https://github.com/svg/svgo/issues/674
            // https://github.com/svg/svgo/issues/1746
            //
            // Initially, a naive counter was implemented based on this github comment:
            // https://github.com/svg/svgo/issues/1746#issuecomment-1803600573
            // But while that implementation insured idâ€™s that are unique,
            // it did not work in cases where the id is both declared and referenced in the same file,
            // because the refernce gets a separate unique ID (a different number from the counter).
            //
            // The current implementation is based on this github comment:
            // https://github.com/svg/svgo/issues/913#issuecomment-369373572
            // Generates a hash of the filepath of the svg file, resulting in a prefix which is:
            // - Short,
            // - With characters valid for IDs,
            // - The same within a file,
            // - And different in different files.
            {
              name: 'prefixIds',
              params: {
                delim: '',
                prefix: (_, info) => "svg".concat(crypto__default["default"].createHash('shake256', {
                  outputLength: 6
                }).update(info.path || '').digest('hex'))
              }
            }]
          }
        }, {
          filePath: id,
          caller: {
            previousExport: null
          }
        });
        const res = await vite.transformWithEsbuild(componentCode, id, {
          loader: 'jsx'
        });
        return {
          code: res.code,
          map: null // TODO:
        };
      }

      return null;
    }
  };
}

exports.vitePluginSvgr = vitePluginSvgr;
