import _defineProperty from '@babel/runtime-corejs3/helpers/esm/defineProperty';
import _slicedToArray from '@babel/runtime-corejs3/helpers/esm/slicedToArray';
import _pt from 'prop-types';
import _filterInstanceProperty from '@babel/runtime-corejs3/core-js-stable/instance/filter';
import _mapInstanceProperty from '@babel/runtime-corejs3/core-js-stable/instance/map';
import _concatInstanceProperty from '@babel/runtime-corejs3/core-js-stable/instance/concat';
import _Array$isArray from '@babel/runtime-corejs3/core-js-stable/array/is-array';
import _Object$keys from '@babel/runtime-corejs3/core-js-stable/object/keys';
import _Object$getOwnPropertySymbols from '@babel/runtime-corejs3/core-js-stable/object/get-own-property-symbols';
import _Object$getOwnPropertyDescriptor from '@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptor';
import _forEachInstanceProperty from '@babel/runtime-corejs3/core-js-stable/instance/for-each';
import _Object$getOwnPropertyDescriptors from '@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptors';
import _Object$defineProperties from '@babel/runtime-corejs3/core-js-stable/object/define-properties';
import _Object$defineProperty from '@babel/runtime-corejs3/core-js-stable/object/define-property';
import { forwardRef, Fragment as Fragment$1, lazy, useRef, useReducer, useCallback, useEffect, useLayoutEffect, useState, useMemo } from 'react';
import snakeCase from 'lodash/snakeCase';
import { defineMessages, FormattedMessage } from 'react-intl';
import { NavLink, matchPath, useLocation } from 'react-router-dom';
import { useMcQuery, normalizeAllAppliedPermissions, normalizeAllAppliedActionRights, normalizeAllAppliedDataFences, normalizeAllAppliedMenuVisibilities } from '@commercetools-frontend/application-shell-connectors';
import LogoSVG from '@commercetools-frontend/assets/logos/commercetools_small-logo.svg';
import { NO_VALUE_FALLBACK, GRAPHQL_TARGETS, STORAGE_KEYS, SUPPORT_PORTAL_URL } from '@commercetools-frontend/constants';
import { SidebarCollapseIcon, SidebarExpandIcon, SupportIcon } from '@commercetools-uikit/icons';
import Spacings from '@commercetools-uikit/spacings';
import _taggedTemplateLiteral from '@babel/runtime-corejs3/helpers/esm/taggedTemplateLiteral';
import _styled from '@emotion/styled/base';
import { css, keyframes, Global } from '@emotion/react';
import { designTokens as designTokens$1 } from '@commercetools-frontend/application-components';
import { designTokens } from '@commercetools-uikit/design-system';
import { N as NAVBAR, D as DIMENSIONS, W as WINDOW_SIZES } from './oidc-ff53dfd3.esm.js';
import _objectWithoutProperties from '@babel/runtime-corejs3/helpers/esm/objectWithoutProperties';
import _includesInstanceProperty from '@babel/runtime-corejs3/core-js-stable/instance/includes';
import _everyInstanceProperty from '@babel/runtime-corejs3/core-js-stable/instance/every';
import _findInstanceProperty from '@babel/runtime-corejs3/core-js-stable/instance/find';
import _startsWithInstanceProperty from '@babel/runtime-corejs3/core-js-stable/instance/starts-with';
import { useFlagVariation } from '@flopflip/react-broadcast';
import classnames from 'classnames';
import MissingImageSvg from '@commercetools-frontend/assets/images/diagonal-line.svg';
import { RestrictedByPermissions } from '@commercetools-frontend/permissions';
import InlineSvg from '@commercetools-uikit/icons/inline-svg';
import { l as location } from './use-is-served-by-proxy-77984220.esm.js';
import { jsx, Fragment, jsxs } from '@emotion/react/jsx-runtime';
import _keysInstanceProperty from '@babel/runtime-corejs3/core-js-stable/instance/keys';
import _sortInstanceProperty from '@babel/runtime-corejs3/core-js-stable/instance/sort';
import isNil from 'lodash/isNil';
import throttle from 'lodash/throttle';
import { reportErrorToSentry } from '@commercetools-frontend/sentry';
import { u as useApplicationsMenu } from './use-applications-menu-03759eab.esm.js';
import '@apollo/client';
import '@commercetools-frontend/l10n';

function _EMOTION_STRINGIFIED_CSS_ERROR__$2() { return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop)."; }
const IconWrapper = /*#__PURE__*/_styled("div", process.env.NODE_ENV === "production" ? {
  target: "e1wv1pdj3"
} : {
  target: "e1wv1pdj3",
  label: "IconWrapper"
})(process.env.NODE_ENV === "production" ? {
  name: "ex9e0f",
  styles: "width:auto;display:flex;justify-content:center"
} : {
  name: "ex9e0f",
  styles: "width:auto;display:flex;justify-content:center",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNoYXJlZC5zdHlsZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBSThCIiwiZmlsZSI6InNoYXJlZC5zdHlsZXMudHMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgc3R5bGVkIGZyb20gJ0BlbW90aW9uL3N0eWxlZCc7XG5pbXBvcnQgeyBkZXNpZ25Ub2tlbnMgYXMgdWlLaXREZXNpZ25Ub2tlbnMgfSBmcm9tICdAY29tbWVyY2V0b29scy11aWtpdC9kZXNpZ24tc3lzdGVtJztcbmltcG9ydCB7IE5BVkJBUiB9IGZyb20gJy4uLy4uL2NvbnN0YW50cyc7XG5cbmNvbnN0IEljb25XcmFwcGVyID0gc3R5bGVkLmRpdmBcbiAgd2lkdGg6IGF1dG87XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuYDtcbmNvbnN0IEljb24gPSBzdHlsZWQuZGl2YFxuICB3aWR0aDogJHtOQVZCQVIuaWNvblNpemV9O1xuICBoZWlnaHQ6ICR7TkFWQkFSLmljb25TaXplfTtcbiAgdHJhbnNpdGlvbjogJHtOQVZCQVIubGVmdE5hdmlnYXRpb25UcmFuc2l0aW9ufTtcblxuICA+IHN2ZyAqOm5vdChbZmlsbD0nbm9uZSddKSB7XG4gICAgZmlsbDogJHt1aUtpdERlc2lnblRva2Vucy5jb2xvclN1cmZhY2V9O1xuICB9XG5gO1xuXG5jb25zdCBJdGVtSWNvblRleHQgPSBzdHlsZWQuZGl2YFxuICBkaXNwbGF5OiBmbGV4O1xuICBmbGV4LWRpcmVjdGlvbjogcm93O1xuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbmA7XG5cbmNvbnN0IFRpdGxlID0gc3R5bGVkLmRpdmBcbiAgZmxleDogMTtcbiAgZm9udC13ZWlnaHQ6IDYwMDtcbiAgZm9udC1zaXplOiAke3VpS2l0RGVzaWduVG9rZW5zLmZvbnRTaXplMjB9O1xuICBsaW5lLWhlaWdodDogJHt1aUtpdERlc2lnblRva2Vucy5saW5lSGVpZ2h0MjB9O1xuICBjb2xvcjogJHt1aUtpdERlc2lnblRva2Vucy5jb2xvck5ldXRyYWx9O1xuICBvcGFjaXR5OiAwO1xuICB0cmFuc2l0aW9uOiAke05BVkJBUi5sZWZ0TmF2aWdhdGlvblRyYW5zaXRpb259O1xuICB0ZXh0LWFsaWduOiBsZWZ0O1xuICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XG4gIHotaW5kZXg6IDE7XG5gO1xuXG5leHBvcnQgeyBJY29uLCBJY29uV3JhcHBlciwgSXRlbUljb25UZXh0LCBUaXRsZSB9O1xuIl19 */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__$2
});
const Icon = /*#__PURE__*/_styled("div", process.env.NODE_ENV === "production" ? {
  target: "e1wv1pdj2"
} : {
  target: "e1wv1pdj2",
  label: "Icon"
})("width:", NAVBAR.iconSize, ";height:", NAVBAR.iconSize, ";transition:", NAVBAR.leftNavigationTransition, ";>svg *:not([fill='none']){fill:", designTokens.colorSurface, ";}" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNoYXJlZC5zdHlsZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBU3VCIiwiZmlsZSI6InNoYXJlZC5zdHlsZXMudHMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgc3R5bGVkIGZyb20gJ0BlbW90aW9uL3N0eWxlZCc7XG5pbXBvcnQgeyBkZXNpZ25Ub2tlbnMgYXMgdWlLaXREZXNpZ25Ub2tlbnMgfSBmcm9tICdAY29tbWVyY2V0b29scy11aWtpdC9kZXNpZ24tc3lzdGVtJztcbmltcG9ydCB7IE5BVkJBUiB9IGZyb20gJy4uLy4uL2NvbnN0YW50cyc7XG5cbmNvbnN0IEljb25XcmFwcGVyID0gc3R5bGVkLmRpdmBcbiAgd2lkdGg6IGF1dG87XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuYDtcbmNvbnN0IEljb24gPSBzdHlsZWQuZGl2YFxuICB3aWR0aDogJHtOQVZCQVIuaWNvblNpemV9O1xuICBoZWlnaHQ6ICR7TkFWQkFSLmljb25TaXplfTtcbiAgdHJhbnNpdGlvbjogJHtOQVZCQVIubGVmdE5hdmlnYXRpb25UcmFuc2l0aW9ufTtcblxuICA+IHN2ZyAqOm5vdChbZmlsbD0nbm9uZSddKSB7XG4gICAgZmlsbDogJHt1aUtpdERlc2lnblRva2Vucy5jb2xvclN1cmZhY2V9O1xuICB9XG5gO1xuXG5jb25zdCBJdGVtSWNvblRleHQgPSBzdHlsZWQuZGl2YFxuICBkaXNwbGF5OiBmbGV4O1xuICBmbGV4LWRpcmVjdGlvbjogcm93O1xuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbmA7XG5cbmNvbnN0IFRpdGxlID0gc3R5bGVkLmRpdmBcbiAgZmxleDogMTtcbiAgZm9udC13ZWlnaHQ6IDYwMDtcbiAgZm9udC1zaXplOiAke3VpS2l0RGVzaWduVG9rZW5zLmZvbnRTaXplMjB9O1xuICBsaW5lLWhlaWdodDogJHt1aUtpdERlc2lnblRva2Vucy5saW5lSGVpZ2h0MjB9O1xuICBjb2xvcjogJHt1aUtpdERlc2lnblRva2Vucy5jb2xvck5ldXRyYWx9O1xuICBvcGFjaXR5OiAwO1xuICB0cmFuc2l0aW9uOiAke05BVkJBUi5sZWZ0TmF2aWdhdGlvblRyYW5zaXRpb259O1xuICB0ZXh0LWFsaWduOiBsZWZ0O1xuICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XG4gIHotaW5kZXg6IDE7XG5gO1xuXG5leHBvcnQgeyBJY29uLCBJY29uV3JhcHBlciwgSXRlbUljb25UZXh0LCBUaXRsZSB9O1xuIl19 */"));
const ItemIconText = /*#__PURE__*/_styled("div", process.env.NODE_ENV === "production" ? {
  target: "e1wv1pdj1"
} : {
  target: "e1wv1pdj1",
  label: "ItemIconText"
})(process.env.NODE_ENV === "production" ? {
  name: "192s9p1",
  styles: "display:flex;flex-direction:row;justify-content:center;align-items:center"
} : {
  name: "192s9p1",
  styles: "display:flex;flex-direction:row;justify-content:center;align-items:center",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNoYXJlZC5zdHlsZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBbUIrQiIsImZpbGUiOiJzaGFyZWQuc3R5bGVzLnRzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnO1xuaW1wb3J0IHsgZGVzaWduVG9rZW5zIGFzIHVpS2l0RGVzaWduVG9rZW5zIH0gZnJvbSAnQGNvbW1lcmNldG9vbHMtdWlraXQvZGVzaWduLXN5c3RlbSc7XG5pbXBvcnQgeyBOQVZCQVIgfSBmcm9tICcuLi8uLi9jb25zdGFudHMnO1xuXG5jb25zdCBJY29uV3JhcHBlciA9IHN0eWxlZC5kaXZgXG4gIHdpZHRoOiBhdXRvO1xuICBkaXNwbGF5OiBmbGV4O1xuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbmA7XG5jb25zdCBJY29uID0gc3R5bGVkLmRpdmBcbiAgd2lkdGg6ICR7TkFWQkFSLmljb25TaXplfTtcbiAgaGVpZ2h0OiAke05BVkJBUi5pY29uU2l6ZX07XG4gIHRyYW5zaXRpb246ICR7TkFWQkFSLmxlZnROYXZpZ2F0aW9uVHJhbnNpdGlvbn07XG5cbiAgPiBzdmcgKjpub3QoW2ZpbGw9J25vbmUnXSkge1xuICAgIGZpbGw6ICR7dWlLaXREZXNpZ25Ub2tlbnMuY29sb3JTdXJmYWNlfTtcbiAgfVxuYDtcblxuY29uc3QgSXRlbUljb25UZXh0ID0gc3R5bGVkLmRpdmBcbiAgZGlzcGxheTogZmxleDtcbiAgZmxleC1kaXJlY3Rpb246IHJvdztcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG5gO1xuXG5jb25zdCBUaXRsZSA9IHN0eWxlZC5kaXZgXG4gIGZsZXg6IDE7XG4gIGZvbnQtd2VpZ2h0OiA2MDA7XG4gIGZvbnQtc2l6ZTogJHt1aUtpdERlc2lnblRva2Vucy5mb250U2l6ZTIwfTtcbiAgbGluZS1oZWlnaHQ6ICR7dWlLaXREZXNpZ25Ub2tlbnMubGluZUhlaWdodDIwfTtcbiAgY29sb3I6ICR7dWlLaXREZXNpZ25Ub2tlbnMuY29sb3JOZXV0cmFsfTtcbiAgb3BhY2l0eTogMDtcbiAgdHJhbnNpdGlvbjogJHtOQVZCQVIubGVmdE5hdmlnYXRpb25UcmFuc2l0aW9ufTtcbiAgdGV4dC1hbGlnbjogbGVmdDtcbiAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xuICB6LWluZGV4OiAxO1xuYDtcblxuZXhwb3J0IHsgSWNvbiwgSWNvbldyYXBwZXIsIEl0ZW1JY29uVGV4dCwgVGl0bGUgfTtcbiJdfQ== */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__$2
});
const Title = /*#__PURE__*/_styled("div", process.env.NODE_ENV === "production" ? {
  target: "e1wv1pdj0"
} : {
  target: "e1wv1pdj0",
  label: "Title"
})("flex:1;font-weight:600;font-size:", designTokens.fontSize20, ";line-height:", designTokens.lineHeight20, ";color:", designTokens.colorNeutral, ";opacity:0;transition:", NAVBAR.leftNavigationTransition, ";text-align:left;text-decoration:none;z-index:1;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNoYXJlZC5zdHlsZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBMEJ3QiIsImZpbGUiOiJzaGFyZWQuc3R5bGVzLnRzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnO1xuaW1wb3J0IHsgZGVzaWduVG9rZW5zIGFzIHVpS2l0RGVzaWduVG9rZW5zIH0gZnJvbSAnQGNvbW1lcmNldG9vbHMtdWlraXQvZGVzaWduLXN5c3RlbSc7XG5pbXBvcnQgeyBOQVZCQVIgfSBmcm9tICcuLi8uLi9jb25zdGFudHMnO1xuXG5jb25zdCBJY29uV3JhcHBlciA9IHN0eWxlZC5kaXZgXG4gIHdpZHRoOiBhdXRvO1xuICBkaXNwbGF5OiBmbGV4O1xuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbmA7XG5jb25zdCBJY29uID0gc3R5bGVkLmRpdmBcbiAgd2lkdGg6ICR7TkFWQkFSLmljb25TaXplfTtcbiAgaGVpZ2h0OiAke05BVkJBUi5pY29uU2l6ZX07XG4gIHRyYW5zaXRpb246ICR7TkFWQkFSLmxlZnROYXZpZ2F0aW9uVHJhbnNpdGlvbn07XG5cbiAgPiBzdmcgKjpub3QoW2ZpbGw9J25vbmUnXSkge1xuICAgIGZpbGw6ICR7dWlLaXREZXNpZ25Ub2tlbnMuY29sb3JTdXJmYWNlfTtcbiAgfVxuYDtcblxuY29uc3QgSXRlbUljb25UZXh0ID0gc3R5bGVkLmRpdmBcbiAgZGlzcGxheTogZmxleDtcbiAgZmxleC1kaXJlY3Rpb246IHJvdztcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG5gO1xuXG5jb25zdCBUaXRsZSA9IHN0eWxlZC5kaXZgXG4gIGZsZXg6IDE7XG4gIGZvbnQtd2VpZ2h0OiA2MDA7XG4gIGZvbnQtc2l6ZTogJHt1aUtpdERlc2lnblRva2Vucy5mb250U2l6ZTIwfTtcbiAgbGluZS1oZWlnaHQ6ICR7dWlLaXREZXNpZ25Ub2tlbnMubGluZUhlaWdodDIwfTtcbiAgY29sb3I6ICR7dWlLaXREZXNpZ25Ub2tlbnMuY29sb3JOZXV0cmFsfTtcbiAgb3BhY2l0eTogMDtcbiAgdHJhbnNpdGlvbjogJHtOQVZCQVIubGVmdE5hdmlnYXRpb25UcmFuc2l0aW9ufTtcbiAgdGV4dC1hbGlnbjogbGVmdDtcbiAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xuICB6LWluZGV4OiAxO1xuYDtcblxuZXhwb3J0IHsgSWNvbiwgSWNvbldyYXBwZXIsIEl0ZW1JY29uVGV4dCwgVGl0bGUgfTtcbiJdfQ== */"));

function _EMOTION_STRINGIFIED_CSS_ERROR__$1() { return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop)."; }
const getSubmenuPositionBasedOnMenuItemPosition = (isSubmenuAboveMenuItem, submenuVerticalPosition) => /*#__PURE__*/css(isSubmenuAboveMenuItem ? 'bottom' : 'top', ":", submenuVerticalPosition, "px;" + (process.env.NODE_ENV === "production" ? "" : ";label:getSubmenuPositionBasedOnMenuItemPosition;"), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1lbnUtaXRlbXMuc3R5bGVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQVdRIiwiZmlsZSI6Im1lbnUtaXRlbXMuc3R5bGVzLnRzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY3NzIH0gZnJvbSAnQGVtb3Rpb24vcmVhY3QnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnO1xuaW1wb3J0IHsgZGVzaWduVG9rZW5zIGFzIGFwcEtpdERlc2lnblRva2VucyB9IGZyb20gJ0Bjb21tZXJjZXRvb2xzLWZyb250ZW5kL2FwcGxpY2F0aW9uLWNvbXBvbmVudHMnO1xuaW1wb3J0IHsgZGVzaWduVG9rZW5zIGFzIHVpS2l0RGVzaWduVG9rZW5zIH0gZnJvbSAnQGNvbW1lcmNldG9vbHMtdWlraXQvZGVzaWduLXN5c3RlbSc7XG5pbXBvcnQgeyBOQVZCQVIgfSBmcm9tICcuLi8uLi9jb25zdGFudHMnO1xuaW1wb3J0IHR5cGUgeyBNZW51R3JvdXBQcm9wcyB9IGZyb20gJy4vbWVudS1pdGVtcyc7XG5pbXBvcnQgeyBJY29uLCBJY29uV3JhcHBlciwgSXRlbUljb25UZXh0LCBUaXRsZSB9IGZyb20gJy4vc2hhcmVkLnN0eWxlcyc7XG5cbmNvbnN0IGdldFN1Ym1lbnVQb3NpdGlvbkJhc2VkT25NZW51SXRlbVBvc2l0aW9uID0gKFxuICBpc1N1Ym1lbnVBYm92ZU1lbnVJdGVtPzogYm9vbGVhbixcbiAgc3VibWVudVZlcnRpY2FsUG9zaXRpb24/OiBudW1iZXJcbikgPT4gY3NzYFxuICAke2lzU3VibWVudUFib3ZlTWVudUl0ZW0gPyAnYm90dG9tJyA6ICd0b3AnfTogJHtzdWJtZW51VmVydGljYWxQb3NpdGlvbn1weFxuYDtcblxuY29uc3QgZ2V0Q29udGFpbmVyUG9zaXRpb25CYXNlZE9uTWVudUl0ZW1Qb3NpdGlvbiA9IChcbiAgaXNTdWJtZW51QWJvdmVNZW51SXRlbT86IGJvb2xlYW4sXG4gIGlzU3VibGlzdEFjdGl2ZVdoaWxlSXNNZW51RXhwYW5kZWQ/OiBib29sZWFuLFxuICBpc1N1Ymxpc3RBY3RpdmVXaGlsZUlzTWVudUNvbGxhcHNlZD86IGJvb2xlYW5cbikgPT4gW1xuICBpc1N1Ymxpc3RBY3RpdmVXaGlsZUlzTWVudUNvbGxhcHNlZCAmJlxuICAgIGNzc2BcbiAgICAgICR7aXNTdWJtZW51QWJvdmVNZW51SXRlbSA/ICdib3R0b20nIDogJ3RvcCd9OiAtJHtOQVZCQVIuaXRlbVNpemV9O1xuICAgIGAsXG4gIGlzU3VibGlzdEFjdGl2ZVdoaWxlSXNNZW51RXhwYW5kZWQgJiZcbiAgICBpc1N1Ym1lbnVBYm92ZU1lbnVJdGVtICYmXG4gICAgY3NzYFxuICAgICAgYm90dG9tOiAwO1xuICAgIGAsXG4gIGlzU3VibGlzdEFjdGl2ZVdoaWxlSXNNZW51RXhwYW5kZWQgJiZcbiAgICAhaXNTdWJtZW51QWJvdmVNZW51SXRlbSAmJlxuICAgIGNzc2BcbiAgICAgIHRvcDogMDtcbiAgICBgLFxuXTtcblxuY29uc3QgRmFkZWQgPSBzdHlsZWQuZGl2YFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gIHRvcDogLTMycHg7XG4gIGhlaWdodDogMzJweDtcbiAgd2lkdGg6IDEwMCU7XG4gIGJhY2tncm91bmQ6IGxpbmVhci1ncmFkaWVudCgxODBkZWcsIHJnYmEoMCwgMTUzLCAxMzUsIDApIDAlLCAjMDBiMzllIDEwMCUpO1xuICB6LWluZGV4OiAxO1xuICB2aXNpYmlsaXR5OiAke2FwcEtpdERlc2lnblRva2Vucy52aXNpYmlsaXR5Rm9yTmF2YmFyRmFkZWR9O1xuYDtcblxuY29uc3QgRXhwYW5kZXIgPSBzdHlsZWQubGk8eyBpc1Zpc2libGU6IGJvb2xlYW4gfT5gXG4gIGRpc3BsYXk6IGZsZXg7XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICBiYWNrZ3JvdW5kOiAke2FwcEtpdERlc2lnblRva2Vucy5iYWNrZ3JvdW5kQ29sb3JGb3JOYXZiYXJFeHBhbmRlcn07XG4gIHBhZGRpbmc6ICR7dWlLaXREZXNpZ25Ub2tlbnMuc3BhY2luZzMwfSAke3VpS2l0RGVzaWduVG9rZW5zLnNwYWNpbmcyNX07XG4gICR7KHByb3BzKSA9PlxuICAgICFwcm9wcy5pc1Zpc2libGUgJiZcbiAgICBjc3NgXG4gICAgICBkaXNwbGF5OiBub25lO1xuICAgIGB9XG5cbiAgLyogRGl2aWRlciAqL1xuICA6OmJlZm9yZSB7XG4gICAgY29udGVudDogJyc7XG4gICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgIHRvcDogJHtOQVZCQVIuaXRlbUhlaWdodH07XG4gICAgaGVpZ2h0OiAxcHg7XG4gICAgYmFja2dyb3VuZDogcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjUpO1xuICAgIHdpZHRoOiBjYWxjKDEwMCUgLSAyICogJHt1aUtpdERlc2lnblRva2Vucy5zcGFjaW5nMzB9KTtcbiAgfVxuXG4gIC8vIFRPRE86IHJlbW92ZSBjb21wbGV0ZWx5IGFzIHBhcnQgb2YgdGhlIHJlY29sb3VyaW5nIHJvbGxvdXQgY2xlYW51cCBwcm9jZXNzXG4gIDpob3ZlcixcbiAgOmZvY3VzIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAke2FwcEtpdERlc2lnblRva2Vucy5iYWNrZ3JvdW5kQ29sb3JGb3JOYXZiYXJFeHBhbmRlcldoZW5Ib3ZlcmVkfTtcbiAgfVxuYDtcblxuY29uc3QgRXhwYW5kZXJJY29uID0gc3R5bGVkLmRpdmBcbiAgaGVpZ2h0OiAke05BVkJBUi5leHBhbmRlclNpemV9O1xuICB3aWR0aDogJHtOQVZCQVIuZXhwYW5kZXJTaXplfTtcbiAgYm9yZGVyLXJhZGl1czogJHt1aUtpdERlc2lnblRva2Vucy5ib3JkZXJSYWRpdXM0fTtcbiAgcGFkZGluZzogJHt1aUtpdERlc2lnblRva2Vucy5zcGFjaW5nMjB9O1xuICBiYWNrZ3JvdW5kOiByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMik7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICBhbGlnbi1pdGVtczogY2VudGVyO1xuXG4gIDpob3ZlcixcbiAgOmZvY3VzIHtcbiAgICBiYWNrZ3JvdW5kOiByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMyk7XG4gICAgY3Vyc29yOiBwb2ludGVyO1xuICB9XG5gO1xuXG5jb25zdCBMZWZ0TmF2aWdhdGlvbiA9IHN0eWxlZC5uYXZgXG4gIGRpc3BsYXk6IGdyaWQ7XG4gIHdpZHRoOiAke05BVkJBUi53aWR0aExlZnROYXZpZ2F0aW9ufTtcbiAgYmFja2dyb3VuZDogJHthcHBLaXREZXNpZ25Ub2tlbnMuYmFja2dyb3VuZENvbG9yRm9yTmF2YmFyfTtcbiAgaGVpZ2h0OiAxMDAlO1xuICBncmlkLXRlbXBsYXRlLXJvd3M6IDU2cHggMWZyO1xuICB0cmFuc2l0aW9uOiAke05BVkJBUi5sZWZ0TmF2aWdhdGlvblRyYW5zaXRpb259O1xuYDtcblxuY29uc3QgVGV4dExpbmtTdWJsaXN0V3JhcHBlciA9IHN0eWxlZC5kaXZgXG4gIGRpc3BsYXk6IGZsZXg7XG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgbWluLWhlaWdodDogMDtcbmA7XG5cbmNvbnN0IE5hdmxpbmtDbGlja2FibGVDb250ZW50ID0gc3R5bGVkLmRpdmBcbiAgaGVpZ2h0OiAxMDAlO1xuICB3aWR0aDogMTAwJTtcbmA7XG5cbmNvbnN0IGxpc3RTdHlsZXMgPSBjc3NgXG4gIG1hcmdpbjogMDtcbiAgcGFkZGluZzogMDtcbiAgZGlzcGxheTogZmxleDtcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgbWluLWhlaWdodDogMDtcbiAgZmxleDogMSAxIDA7XG5gO1xuXG5jb25zdCBzdWJsaXN0U3R5bGVzID0gY3NzYFxuICBwYWRkaW5nOiAke3VpS2l0RGVzaWduVG9rZW5zLnNwYWNpbmczMH07XG4gIGZvbnQtd2VpZ2h0OiAke3VpS2l0RGVzaWduVG9rZW5zLmZvbnRXZWlnaHQ0MDB9O1xuICBmb250LXNpemU6ICR7dWlLaXREZXNpZ25Ub2tlbnMuZm9udFNpemUyMH07XG4gIGJhY2tncm91bmQtY29sb3I6ICR7dWlLaXREZXNpZ25Ub2tlbnMuY29sb3JBY2NlbnQxMH07XG4gIGxlZnQ6ICR7TkFWQkFSLnN1Ymxpc3RJbmRlbnRhdGlvbldoZW5Db2xsYXBzZWR9O1xuICB6LWluZGV4OiAtMTtcbiAgbGlzdC1zdHlsZTogbm9uZTtcbiAgcG9zaXRpb246IGZpeGVkO1xuICBkaXNwbGF5OiBub25lO1xuYDtcblxuY29uc3QgTWVudUxpc3QgPSBzdHlsZWQudWw8XG4gIE1lbnVHcm91cFByb3BzICYge1xuICAgIGlzU3VibGlzdEFjdGl2ZVdoaWxlSXNNZW51RXhwYW5kZWQ6IGJvb2xlYW47XG4gICAgaXNTdWJsaXN0QWN0aXZlV2hpbGVJc01lbnVDb2xsYXBzZWQ6IGJvb2xlYW47XG4gICAgaXNTdWJsaXN0Q29sbGFwc2VkQW5kQWN0aXZlOiBib29sZWFuO1xuICAgIGlzU3VibGlzdENvbGxhcHNlZEFuZEFjdGl2ZUFuZEFib3ZlOiBib29sZWFuO1xuICB9XG4+YFxuICAkeyhwcm9wcykgPT4gW1xuICAgIHByb3BzLmxldmVsID09PSAxICYmIGxpc3RTdHlsZXMsXG4gICAgZ2V0U3VibWVudVBvc2l0aW9uQmFzZWRPbk1lbnVJdGVtUG9zaXRpb24oXG4gICAgICBwcm9wcy5pc1N1Ym1lbnVBYm92ZU1lbnVJdGVtLFxuICAgICAgcHJvcHMuc3VibWVudVZlcnRpY2FsUG9zaXRpb25cbiAgICApLFxuICAgIHByb3BzLmxldmVsID09PSAyICYmIHN1Ymxpc3RTdHlsZXMsXG4gICAgLy8gcHJldmVudCBnbGl0Y2h5IGJlaGF2aW9yIGR1cmluZyB0aGUgaW5pdGlhbCByZW5kZXIgd2hlbiB0aGUgc3VibWVudSdzIHZlcnRpY2FsIHBvc2l0aW9uIGlzIGV2YWx1YXRlZCBhcyAwXG4gICAgcHJvcHMuc3VibWVudVZlcnRpY2FsUG9zaXRpb24gPT09IDAgJiZcbiAgICAgIGNzc2BcbiAgICAgICAgdmlzaWJpbGl0eTogaGlkZGVuO1xuICAgICAgYCxcbiAgICAocHJvcHMuaXNTdWJsaXN0QWN0aXZlV2hpbGVJc01lbnVFeHBhbmRlZCB8fFxuICAgICAgcHJvcHMuaXNTdWJsaXN0Q29sbGFwc2VkQW5kQWN0aXZlIHx8XG4gICAgICBwcm9wcy5pc1N1Ymxpc3RDb2xsYXBzZWRBbmRBY3RpdmVBbmRBYm92ZSkgJiZcbiAgICAgIGNzc2BcbiAgICAgICAgb3BhY2l0eTogMTtcbiAgICAgICAgZGlzcGxheTogbm9uZTtcbiAgICAgICAgdGV4dC1hbGlnbjogbGVmdDtcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogJHt1aUtpdERlc2lnblRva2Vucy5jb2xvckFjY2VudDIwfTtcblxuICAgICAgICAvKiBUaGlzIHBzZXVkby1lbGVtZW50IGlzIHJlcXVpcmVkIHRvIGVuYWJsZSBzbW9vdGggY291cnNvciBtb3ZlbWVudCBmcm9tIHRoZSBtYWluIG1lbnUgaXRlbSB0byBzdWJtZW51IGl0ZW1zIHdpdGggdGhlIGdhcCBpbiBiZXR3ZWVuICovXG4gICAgICAgIDo6YmVmb3JlIHtcbiAgICAgICAgICBjb250ZW50OiAnJztcbiAgICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgICAgICAgZGlzcGxheTogYmxvY2s7XG4gICAgICAgICAgd2lkdGg6IGNhbGMoJHtOQVZCQVIuc3VibGlzdFdpZHRofSArICR7dWlLaXREZXNpZ25Ub2tlbnMuc3BhY2luZzIwfSk7XG4gICAgICAgICAgaGVpZ2h0OiAke05BVkJBUi5pdGVtU2l6ZX07XG4gICAgICAgICAgbGVmdDogY2FsYygtMSAqICR7dWlLaXREZXNpZ25Ub2tlbnMuc3BhY2luZzIwfSk7XG5cbiAgICAgICAgICAke2dldENvbnRhaW5lclBvc2l0aW9uQmFzZWRPbk1lbnVJdGVtUG9zaXRpb24oXG4gICAgICAgICAgICBwcm9wcy5pc1N1Ym1lbnVBYm92ZU1lbnVJdGVtLFxuICAgICAgICAgICAgcHJvcHMuaXNTdWJsaXN0QWN0aXZlV2hpbGVJc01lbnVFeHBhbmRlZCxcbiAgICAgICAgICAgIHByb3BzLmlzU3VibGlzdEFjdGl2ZVdoaWxlSXNNZW51Q29sbGFwc2VkXG4gICAgICAgICAgKX1cbiAgICAgICAgfVxuICAgICAgYCxcbiAgXX1cblxuICAmIC5oaWdobGlnaHRlZCxcbiAgJiAuaGlnaGxpZ2h0ZWQgJHtUaXRsZX0ge1xuICAgIGNvbG9yOiAke3VpS2l0RGVzaWduVG9rZW5zLmNvbG9yU3VyZmFjZX0gIWltcG9ydGFudDtcbiAgICBmb250LXdlaWdodDogJHt1aUtpdERlc2lnblRva2Vucy5mb250V2VpZ2h0NjAwfTtcbiAgfVxuYDtcblxuY29uc3QgU3VibGlzdEl0ZW0gPSBzdHlsZWQubGk8eyBpc0FjdGl2ZTogYm9vbGVhbiB9PmBcbiAgZGlzcGxheTogZmxleDtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgYWxpZ24tc2VsZjogc3RyZXRjaDtcblxuICAkeyhwcm9wcykgPT4gW1xuICAgIHByb3BzLmlzQWN0aXZlICYmXG4gICAgICBjc3NgXG4gICAgICAgIGJvcmRlci1yYWRpdXM6ICR7dWlLaXREZXNpZ25Ub2tlbnMuYm9yZGVyUmFkaXVzNH07XG4gICAgICAgIGJhY2tncm91bmQ6ICR7YXBwS2l0RGVzaWduVG9rZW5zLmJhY2tncm91bmRDb2xvckZvck5hdmJhclN1Ym1lbnVJdGVtV2hlbkFjdGl2ZX07XG4gICAgICBgLFxuICAgICFwcm9wcy5pc0FjdGl2ZSAmJlxuICAgICAgY3NzYFxuICAgICAgICA6aG92ZXIsXG4gICAgICAgIDpmb2N1cy13aXRoaW4ge1xuICAgICAgICAgIGNvbG9yOiAke3VpS2l0RGVzaWduVG9rZW5zLmNvbG9yU3VyZmFjZX07XG4gICAgICAgICAgZm9udC13ZWlnaHQ6ICR7dWlLaXREZXNpZ25Ub2tlbnMuZm9udFdlaWdodDYwMH07XG4gICAgICAgICAgYm9yZGVyLXJhZGl1czogJHt1aUtpdERlc2lnblRva2Vucy5ib3JkZXJSYWRpdXM0fTtcbiAgICAgICAgICBiYWNrZ3JvdW5kOiAke3VpS2l0RGVzaWduVG9rZW5zLmNvbG9yUHJpbWFyeTk1fTtcblxuICAgICAgICAgIFtkYXRhLWxpbmstbGV2ZWw9J3RleHQtbGluay1zdWJsaXN0J10ge1xuICAgICAgICAgICAgLyogYWRkaXRpb25hbCBsZWZ0IHBhZGRpbmcgb24gaG92ZXIgYW5kIGZvY3VzICovXG4gICAgICAgICAgICBwYWRkaW5nOiAke3VpS2l0RGVzaWduVG9rZW5zLnNwYWNpbmcyNX1cbiAgICAgICAgICAgICAgJHt1aUtpdERlc2lnblRva2Vucy5zcGFjaW5nMjV9ICR7dWlLaXREZXNpZ25Ub2tlbnMuc3BhY2luZzI1fVxuICAgICAgICAgICAgICBjYWxjKFxuICAgICAgICAgICAgICAgICR7dWlLaXREZXNpZ25Ub2tlbnMuc3BhY2luZzMwfSArICR7dWlLaXREZXNpZ25Ub2tlbnMuc3BhY2luZzIwfVxuICAgICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgYCxcbiAgXX1cbmA7XG5cbmNvbnN0IE1lbnVMaXN0SXRlbSA9IHN0eWxlZC5saTx7XG4gIGlzQWN0aXZlOiBib29sZWFuO1xuICBpc1JvdXRlQWN0aXZlOiBib29sZWFuO1xuICBpc0NvbGxhcHNlZDogYm9vbGVhbjtcbn0+YFxuICBoZWlnaHQ6ICR7TkFWQkFSLml0ZW1TaXplfTtcbiAgd2lkdGg6ICR7TkFWQkFSLml0ZW1TaXplfTtcbiAgbWFyZ2luOiAwO1xuICBiYWNrZ3JvdW5kOiAke2FwcEtpdERlc2lnblRva2Vucy5iYWNrZ3JvdW5kQ29sb3JGb3JOYXZiYXJ9O1xuICBsaXN0LXN0eWxlOiBub25lO1xuICBjdXJzb3I6IHBvaW50ZXI7XG5cbiAgJHtJY29uV3JhcHBlcn0ge1xuICAgIHdpZHRoOiBhdXRvO1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gIH1cblxuICAkeyhwcm9wcykgPT4gW1xuICAgIHByb3BzLmlzUm91dGVBY3RpdmUgJiZcbiAgICAgIGNzc2BcbiAgICAgICAgYmFja2dyb3VuZDogJHthcHBLaXREZXNpZ25Ub2tlbnMuYmFja2dyb3VuZENvbG9yRm9yTmF2YmFyTWVudUl0ZW1XaGVuQWN0aXZlfTtcbiAgICAgICAgYm9yZGVyLXJhZGl1czogJHt1aUtpdERlc2lnblRva2Vucy5ib3JkZXJSYWRpdXM4fTtcbiAgICAgIGAsXG4gICAgIXByb3BzLmlzUm91dGVBY3RpdmUgJiZcbiAgICAgIGNzc2BcbiAgICAgICAgOmhvdmVyLFxuICAgICAgICA6Zm9jdXMtd2l0aGluIHtcbiAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAke2FwcEtpdERlc2lnblRva2Vucy5iYWNrZ3JvdW5kQ29sb3JGb3JOYXZiYXJNZW51SXRlbVdoZW5Ib3ZlcmVkfTtcbiAgICAgICAgICBib3JkZXItcmFkaXVzOiAke3VpS2l0RGVzaWduVG9rZW5zLmJvcmRlclJhZGl1czh9O1xuICAgICAgICB9XG4gICAgICBgLFxuICAgIHByb3BzLmlzQWN0aXZlICYmXG4gICAgICBjc3NgXG4gICAgICAgICR7SXRlbUljb25UZXh0fSB7XG4gICAgICAgICAganVzdGlmeS1jb250ZW50OiBmbGV4LXN0YXJ0O1xuICAgICAgICB9XG4gICAgICBgLFxuICAgICFwcm9wcy5pc0FjdGl2ZSAmJlxuICAgICAgY3NzYFxuICAgICAgICA6aG92ZXIgJHtJY29ufSA+IHN2ZyAqOm5vdChbZmlsbD0nbm9uZSddKSxcbiAgICAgICAgOmZvY3VzLXdpdGhpbiAke0ljb259ID4gc3ZnICo6bm90KFtmaWxsPSdub25lJ10pIHtcbiAgICAgICAgICBmaWxsOiAke3VpS2l0RGVzaWduVG9rZW5zLmNvbG9yU3VyZmFjZX07XG4gICAgICAgIH1cblxuICAgICAgICA6aG92ZXIgLiR7VGl0bGV9LCA6Zm9jdXMtd2l0aGluICR7VGl0bGV9IHtcbiAgICAgICAgICBjb2xvcjogJHt1aUtpdERlc2lnblRva2Vucy5jb2xvclN1cmZhY2V9O1xuICAgICAgICB9XG4gICAgICBgLFxuICAgIHByb3BzLmlzQ29sbGFwc2VkICYmXG4gICAgICBjc3NgXG4gICAgICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgICAgIGAsXG4gIF19XG5cbiAgOmhvdmVyICR7VGl0bGV9LFxuICA6Zm9jdXMtd2l0aGluICR7VGl0bGV9IHtcbiAgICBtYXJnaW4tbGVmdDogY2FsYygke3VpS2l0RGVzaWduVG9rZW5zLnNwYWNpbmcyNX0gKyAycHgpO1xuICB9XG5cbiAgOmhvdmVyICR7SWNvbn0sIDpmb2N1cy13aXRoaW4gJHtJY29ufSB7XG4gICAgLyogMS4xNiBpcyByb3VnaGx5IHRoZSByYXRpbyBvZiBOQVZCQVIuaWNvblNpemVIb3ZlciB0byBOQVZCQVIuaWNvblNpemUgKi9cbiAgICB0cmFuc2Zvcm06IHNjYWxlKDEuMik7XG4gIH1cblxuICA6aG92ZXJcbiAgICAke01lbnVMaXN0fS5zdWJsaXN0LWNvbGxhcHNlZF9fYWN0aXZlLFxuICAgIDpob3ZlclxuICAgICR7TWVudUxpc3R9LnN1Ymxpc3QtY29sbGFwc2VkX19hY3RpdmVfX2Fib3ZlLFxuICAgIDpob3ZlclxuICAgICR7TWVudUxpc3R9LnN1Ymxpc3QtZXhwYW5kZWRfX2FjdGl2ZSxcbiAgICA6Zm9jdXMtd2l0aGluXG4gICAgJHtNZW51TGlzdH0uc3VibGlzdC1jb2xsYXBzZWRfX2FjdGl2ZSxcbiAgICA6Zm9jdXMtd2l0aGluXG4gICAgJHtNZW51TGlzdH0uc3VibGlzdC1jb2xsYXBzZWRfX2FjdGl2ZV9fYWJvdmUsXG4gICAgOmZvY3VzLXdpdGhpblxuICAgICR7TWVudUxpc3R9LnN1Ymxpc3QtZXhwYW5kZWRfX2FjdGl2ZSB7XG4gICAgZGlzcGxheTogZmxleDtcbiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICAgIGFsaWduLWl0ZW1zOiBmbGV4LXN0YXJ0O1xuICAgIGJhY2tncm91bmQtY29sb3I6ICR7dWlLaXREZXNpZ25Ub2tlbnMuY29sb3JTdXJmYWNlfTtcbiAgICBtaW4taGVpZ2h0OiAke05BVkJBUi5zdWJsaXN0SXRlbU1pbkhlaWdodH07XG4gICAgd2lkdGg6ICR7TkFWQkFSLnN1Ymxpc3RXaWR0aH07XG4gICAgYm9yZGVyLXJhZGl1czogJHt1aUtpdERlc2lnblRva2Vucy5ib3JkZXJSYWRpdXM4fTtcbiAgICAvKiB6LWluZGV4IHZhbHVlIG11c3QgYmUgaGlnaGVyIHRoYW4gQXBwQmFyJ3Mgei1pbmRleCAqL1xuICAgIHotaW5kZXg6IDIwMDAxO1xuICAgIGJveC1zaGFkb3c6IC0ycHggNHB4IDI1cHggMCByZ2JhKDg5LCA4OSwgODksIDAuNSk7XG4gIH1cblxuICA6aG92ZXJcbiAgICAke01lbnVMaXN0fS5zdWJsaXN0LWNvbGxhcHNlZF9fYWN0aXZlLnN1Ymxpc3QtY29sbGFwc2VkX19lbXB0eSxcbiAgICA6aG92ZXJcbiAgICAke01lbnVMaXN0fS5zdWJsaXN0LWNvbGxhcHNlZF9fYWN0aXZlX19hYm92ZS5zdWJsaXN0LWNvbGxhcHNlZF9fZW1wdHksXG4gICAgOmZvY3VzLXdpdGhpblxuICAgICR7TWVudUxpc3R9LnN1Ymxpc3QtY29sbGFwc2VkX19hY3RpdmUuc3VibGlzdC1jb2xsYXBzZWRfX2VtcHR5LFxuICAgIDpmb2N1cy13aXRoaW5cbiAgICAke01lbnVMaXN0fS5zdWJsaXN0LWNvbGxhcHNlZF9fYWN0aXZlX19hYm92ZS5zdWJsaXN0LWNvbGxhcHNlZF9fZW1wdHkge1xuICAgIHZpc2liaWxpdHk6IGhpZGRlbjtcbiAgfVxuXG4gIDpob3ZlclxuICAgICR7TWVudUxpc3R9LnN1Ymxpc3QtZXhwYW5kZWRfX2FjdGl2ZSxcbiAgICA6Zm9jdXMtd2l0aGluXG4gICAgJHtNZW51TGlzdH0uc3VibGlzdC1leHBhbmRlZF9fYWN0aXZlIHtcbiAgICBsZWZ0OiAke05BVkJBUi5zdWJsaXN0SW5kZW50YXRpb25XaGVuRXhwYW5kZWR9O1xuICB9XG5gO1xuXG5leHBvcnQge1xuICBFeHBhbmRlcixcbiAgRXhwYW5kZXJJY29uLFxuICBGYWRlZCxcbiAgTGVmdE5hdmlnYXRpb24sXG4gIE1lbnVMaXN0LFxuICBNZW51TGlzdEl0ZW0sXG4gIFN1Ymxpc3RJdGVtLFxuICBUZXh0TGlua1N1Ymxpc3RXcmFwcGVyLFxuICBOYXZsaW5rQ2xpY2thYmxlQ29udGVudCxcbn07XG4iXX0= */");
var _ref4 = process.env.NODE_ENV === "production" ? {
  name: "abcix4",
  styles: "top:0"
} : {
  name: "4uw94j-getContainerPositionBasedOnMenuItemPosition",
  styles: "top:0;label:getContainerPositionBasedOnMenuItemPosition;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1lbnUtaXRlbXMuc3R5bGVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQStCTyIsImZpbGUiOiJtZW51LWl0ZW1zLnN0eWxlcy50cyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNzcyB9IGZyb20gJ0BlbW90aW9uL3JlYWN0JztcbmltcG9ydCBzdHlsZWQgZnJvbSAnQGVtb3Rpb24vc3R5bGVkJztcbmltcG9ydCB7IGRlc2lnblRva2VucyBhcyBhcHBLaXREZXNpZ25Ub2tlbnMgfSBmcm9tICdAY29tbWVyY2V0b29scy1mcm9udGVuZC9hcHBsaWNhdGlvbi1jb21wb25lbnRzJztcbmltcG9ydCB7IGRlc2lnblRva2VucyBhcyB1aUtpdERlc2lnblRva2VucyB9IGZyb20gJ0Bjb21tZXJjZXRvb2xzLXVpa2l0L2Rlc2lnbi1zeXN0ZW0nO1xuaW1wb3J0IHsgTkFWQkFSIH0gZnJvbSAnLi4vLi4vY29uc3RhbnRzJztcbmltcG9ydCB0eXBlIHsgTWVudUdyb3VwUHJvcHMgfSBmcm9tICcuL21lbnUtaXRlbXMnO1xuaW1wb3J0IHsgSWNvbiwgSWNvbldyYXBwZXIsIEl0ZW1JY29uVGV4dCwgVGl0bGUgfSBmcm9tICcuL3NoYXJlZC5zdHlsZXMnO1xuXG5jb25zdCBnZXRTdWJtZW51UG9zaXRpb25CYXNlZE9uTWVudUl0ZW1Qb3NpdGlvbiA9IChcbiAgaXNTdWJtZW51QWJvdmVNZW51SXRlbT86IGJvb2xlYW4sXG4gIHN1Ym1lbnVWZXJ0aWNhbFBvc2l0aW9uPzogbnVtYmVyXG4pID0+IGNzc2BcbiAgJHtpc1N1Ym1lbnVBYm92ZU1lbnVJdGVtID8gJ2JvdHRvbScgOiAndG9wJ306ICR7c3VibWVudVZlcnRpY2FsUG9zaXRpb259cHhcbmA7XG5cbmNvbnN0IGdldENvbnRhaW5lclBvc2l0aW9uQmFzZWRPbk1lbnVJdGVtUG9zaXRpb24gPSAoXG4gIGlzU3VibWVudUFib3ZlTWVudUl0ZW0/OiBib29sZWFuLFxuICBpc1N1Ymxpc3RBY3RpdmVXaGlsZUlzTWVudUV4cGFuZGVkPzogYm9vbGVhbixcbiAgaXNTdWJsaXN0QWN0aXZlV2hpbGVJc01lbnVDb2xsYXBzZWQ/OiBib29sZWFuXG4pID0+IFtcbiAgaXNTdWJsaXN0QWN0aXZlV2hpbGVJc01lbnVDb2xsYXBzZWQgJiZcbiAgICBjc3NgXG4gICAgICAke2lzU3VibWVudUFib3ZlTWVudUl0ZW0gPyAnYm90dG9tJyA6ICd0b3AnfTogLSR7TkFWQkFSLml0ZW1TaXplfTtcbiAgICBgLFxuICBpc1N1Ymxpc3RBY3RpdmVXaGlsZUlzTWVudUV4cGFuZGVkICYmXG4gICAgaXNTdWJtZW51QWJvdmVNZW51SXRlbSAmJlxuICAgIGNzc2BcbiAgICAgIGJvdHRvbTogMDtcbiAgICBgLFxuICBpc1N1Ymxpc3RBY3RpdmVXaGlsZUlzTWVudUV4cGFuZGVkICYmXG4gICAgIWlzU3VibWVudUFib3ZlTWVudUl0ZW0gJiZcbiAgICBjc3NgXG4gICAgICB0b3A6IDA7XG4gICAgYCxcbl07XG5cbmNvbnN0IEZhZGVkID0gc3R5bGVkLmRpdmBcbiAgcG9zaXRpb246IGFic29sdXRlO1xuICB0b3A6IC0zMnB4O1xuICBoZWlnaHQ6IDMycHg7XG4gIHdpZHRoOiAxMDAlO1xuICBiYWNrZ3JvdW5kOiBsaW5lYXItZ3JhZGllbnQoMTgwZGVnLCByZ2JhKDAsIDE1MywgMTM1LCAwKSAwJSwgIzAwYjM5ZSAxMDAlKTtcbiAgei1pbmRleDogMTtcbiAgdmlzaWJpbGl0eTogJHthcHBLaXREZXNpZ25Ub2tlbnMudmlzaWJpbGl0eUZvck5hdmJhckZhZGVkfTtcbmA7XG5cbmNvbnN0IEV4cGFuZGVyID0gc3R5bGVkLmxpPHsgaXNWaXNpYmxlOiBib29sZWFuIH0+YFxuICBkaXNwbGF5OiBmbGV4O1xuICBhbGlnbi1pdGVtczogY2VudGVyO1xuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgYmFja2dyb3VuZDogJHthcHBLaXREZXNpZ25Ub2tlbnMuYmFja2dyb3VuZENvbG9yRm9yTmF2YmFyRXhwYW5kZXJ9O1xuICBwYWRkaW5nOiAke3VpS2l0RGVzaWduVG9rZW5zLnNwYWNpbmczMH0gJHt1aUtpdERlc2lnblRva2Vucy5zcGFjaW5nMjV9O1xuICAkeyhwcm9wcykgPT5cbiAgICAhcHJvcHMuaXNWaXNpYmxlICYmXG4gICAgY3NzYFxuICAgICAgZGlzcGxheTogbm9uZTtcbiAgICBgfVxuXG4gIC8qIERpdmlkZXIgKi9cbiAgOjpiZWZvcmUge1xuICAgIGNvbnRlbnQ6ICcnO1xuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICB0b3A6ICR7TkFWQkFSLml0ZW1IZWlnaHR9O1xuICAgIGhlaWdodDogMXB4O1xuICAgIGJhY2tncm91bmQ6IHJnYmEoMjU1LCAyNTUsIDI1NSwgMC41KTtcbiAgICB3aWR0aDogY2FsYygxMDAlIC0gMiAqICR7dWlLaXREZXNpZ25Ub2tlbnMuc3BhY2luZzMwfSk7XG4gIH1cblxuICAvLyBUT0RPOiByZW1vdmUgY29tcGxldGVseSBhcyBwYXJ0IG9mIHRoZSByZWNvbG91cmluZyByb2xsb3V0IGNsZWFudXAgcHJvY2Vzc1xuICA6aG92ZXIsXG4gIDpmb2N1cyB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogJHthcHBLaXREZXNpZ25Ub2tlbnMuYmFja2dyb3VuZENvbG9yRm9yTmF2YmFyRXhwYW5kZXJXaGVuSG92ZXJlZH07XG4gIH1cbmA7XG5cbmNvbnN0IEV4cGFuZGVySWNvbiA9IHN0eWxlZC5kaXZgXG4gIGhlaWdodDogJHtOQVZCQVIuZXhwYW5kZXJTaXplfTtcbiAgd2lkdGg6ICR7TkFWQkFSLmV4cGFuZGVyU2l6ZX07XG4gIGJvcmRlci1yYWRpdXM6ICR7dWlLaXREZXNpZ25Ub2tlbnMuYm9yZGVyUmFkaXVzNH07XG4gIHBhZGRpbmc6ICR7dWlLaXREZXNpZ25Ub2tlbnMuc3BhY2luZzIwfTtcbiAgYmFja2dyb3VuZDogcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjIpO1xuICBkaXNwbGF5OiBmbGV4O1xuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcblxuICA6aG92ZXIsXG4gIDpmb2N1cyB7XG4gICAgYmFja2dyb3VuZDogcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjMpO1xuICAgIGN1cnNvcjogcG9pbnRlcjtcbiAgfVxuYDtcblxuY29uc3QgTGVmdE5hdmlnYXRpb24gPSBzdHlsZWQubmF2YFxuICBkaXNwbGF5OiBncmlkO1xuICB3aWR0aDogJHtOQVZCQVIud2lkdGhMZWZ0TmF2aWdhdGlvbn07XG4gIGJhY2tncm91bmQ6ICR7YXBwS2l0RGVzaWduVG9rZW5zLmJhY2tncm91bmRDb2xvckZvck5hdmJhcn07XG4gIGhlaWdodDogMTAwJTtcbiAgZ3JpZC10ZW1wbGF0ZS1yb3dzOiA1NnB4IDFmcjtcbiAgdHJhbnNpdGlvbjogJHtOQVZCQVIubGVmdE5hdmlnYXRpb25UcmFuc2l0aW9ufTtcbmA7XG5cbmNvbnN0IFRleHRMaW5rU3VibGlzdFdyYXBwZXIgPSBzdHlsZWQuZGl2YFxuICBkaXNwbGF5OiBmbGV4O1xuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gIG1pbi1oZWlnaHQ6IDA7XG5gO1xuXG5jb25zdCBOYXZsaW5rQ2xpY2thYmxlQ29udGVudCA9IHN0eWxlZC5kaXZgXG4gIGhlaWdodDogMTAwJTtcbiAgd2lkdGg6IDEwMCU7XG5gO1xuXG5jb25zdCBsaXN0U3R5bGVzID0gY3NzYFxuICBtYXJnaW46IDA7XG4gIHBhZGRpbmc6IDA7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gIG1pbi1oZWlnaHQ6IDA7XG4gIGZsZXg6IDEgMSAwO1xuYDtcblxuY29uc3Qgc3VibGlzdFN0eWxlcyA9IGNzc2BcbiAgcGFkZGluZzogJHt1aUtpdERlc2lnblRva2Vucy5zcGFjaW5nMzB9O1xuICBmb250LXdlaWdodDogJHt1aUtpdERlc2lnblRva2Vucy5mb250V2VpZ2h0NDAwfTtcbiAgZm9udC1zaXplOiAke3VpS2l0RGVzaWduVG9rZW5zLmZvbnRTaXplMjB9O1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAke3VpS2l0RGVzaWduVG9rZW5zLmNvbG9yQWNjZW50MTB9O1xuICBsZWZ0OiAke05BVkJBUi5zdWJsaXN0SW5kZW50YXRpb25XaGVuQ29sbGFwc2VkfTtcbiAgei1pbmRleDogLTE7XG4gIGxpc3Qtc3R5bGU6IG5vbmU7XG4gIHBvc2l0aW9uOiBmaXhlZDtcbiAgZGlzcGxheTogbm9uZTtcbmA7XG5cbmNvbnN0IE1lbnVMaXN0ID0gc3R5bGVkLnVsPFxuICBNZW51R3JvdXBQcm9wcyAmIHtcbiAgICBpc1N1Ymxpc3RBY3RpdmVXaGlsZUlzTWVudUV4cGFuZGVkOiBib29sZWFuO1xuICAgIGlzU3VibGlzdEFjdGl2ZVdoaWxlSXNNZW51Q29sbGFwc2VkOiBib29sZWFuO1xuICAgIGlzU3VibGlzdENvbGxhcHNlZEFuZEFjdGl2ZTogYm9vbGVhbjtcbiAgICBpc1N1Ymxpc3RDb2xsYXBzZWRBbmRBY3RpdmVBbmRBYm92ZTogYm9vbGVhbjtcbiAgfVxuPmBcbiAgJHsocHJvcHMpID0+IFtcbiAgICBwcm9wcy5sZXZlbCA9PT0gMSAmJiBsaXN0U3R5bGVzLFxuICAgIGdldFN1Ym1lbnVQb3NpdGlvbkJhc2VkT25NZW51SXRlbVBvc2l0aW9uKFxuICAgICAgcHJvcHMuaXNTdWJtZW51QWJvdmVNZW51SXRlbSxcbiAgICAgIHByb3BzLnN1Ym1lbnVWZXJ0aWNhbFBvc2l0aW9uXG4gICAgKSxcbiAgICBwcm9wcy5sZXZlbCA9PT0gMiAmJiBzdWJsaXN0U3R5bGVzLFxuICAgIC8vIHByZXZlbnQgZ2xpdGNoeSBiZWhhdmlvciBkdXJpbmcgdGhlIGluaXRpYWwgcmVuZGVyIHdoZW4gdGhlIHN1Ym1lbnUncyB2ZXJ0aWNhbCBwb3NpdGlvbiBpcyBldmFsdWF0ZWQgYXMgMFxuICAgIHByb3BzLnN1Ym1lbnVWZXJ0aWNhbFBvc2l0aW9uID09PSAwICYmXG4gICAgICBjc3NgXG4gICAgICAgIHZpc2liaWxpdHk6IGhpZGRlbjtcbiAgICAgIGAsXG4gICAgKHByb3BzLmlzU3VibGlzdEFjdGl2ZVdoaWxlSXNNZW51RXhwYW5kZWQgfHxcbiAgICAgIHByb3BzLmlzU3VibGlzdENvbGxhcHNlZEFuZEFjdGl2ZSB8fFxuICAgICAgcHJvcHMuaXNTdWJsaXN0Q29sbGFwc2VkQW5kQWN0aXZlQW5kQWJvdmUpICYmXG4gICAgICBjc3NgXG4gICAgICAgIG9wYWNpdHk6IDE7XG4gICAgICAgIGRpc3BsYXk6IG5vbmU7XG4gICAgICAgIHRleHQtYWxpZ246IGxlZnQ7XG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6ICR7dWlLaXREZXNpZ25Ub2tlbnMuY29sb3JBY2NlbnQyMH07XG5cbiAgICAgICAgLyogVGhpcyBwc2V1ZG8tZWxlbWVudCBpcyByZXF1aXJlZCB0byBlbmFibGUgc21vb3RoIGNvdXJzb3IgbW92ZW1lbnQgZnJvbSB0aGUgbWFpbiBtZW51IGl0ZW0gdG8gc3VibWVudSBpdGVtcyB3aXRoIHRoZSBnYXAgaW4gYmV0d2VlbiAqL1xuICAgICAgICA6OmJlZm9yZSB7XG4gICAgICAgICAgY29udGVudDogJyc7XG4gICAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgICAgICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgICAgICAgIHdpZHRoOiBjYWxjKCR7TkFWQkFSLnN1Ymxpc3RXaWR0aH0gKyAke3VpS2l0RGVzaWduVG9rZW5zLnNwYWNpbmcyMH0pO1xuICAgICAgICAgIGhlaWdodDogJHtOQVZCQVIuaXRlbVNpemV9O1xuICAgICAgICAgIGxlZnQ6IGNhbGMoLTEgKiAke3VpS2l0RGVzaWduVG9rZW5zLnNwYWNpbmcyMH0pO1xuXG4gICAgICAgICAgJHtnZXRDb250YWluZXJQb3NpdGlvbkJhc2VkT25NZW51SXRlbVBvc2l0aW9uKFxuICAgICAgICAgICAgcHJvcHMuaXNTdWJtZW51QWJvdmVNZW51SXRlbSxcbiAgICAgICAgICAgIHByb3BzLmlzU3VibGlzdEFjdGl2ZVdoaWxlSXNNZW51RXhwYW5kZWQsXG4gICAgICAgICAgICBwcm9wcy5pc1N1Ymxpc3RBY3RpdmVXaGlsZUlzTWVudUNvbGxhcHNlZFxuICAgICAgICAgICl9XG4gICAgICAgIH1cbiAgICAgIGAsXG4gIF19XG5cbiAgJiAuaGlnaGxpZ2h0ZWQsXG4gICYgLmhpZ2hsaWdodGVkICR7VGl0bGV9IHtcbiAgICBjb2xvcjogJHt1aUtpdERlc2lnblRva2Vucy5jb2xvclN1cmZhY2V9ICFpbXBvcnRhbnQ7XG4gICAgZm9udC13ZWlnaHQ6ICR7dWlLaXREZXNpZ25Ub2tlbnMuZm9udFdlaWdodDYwMH07XG4gIH1cbmA7XG5cbmNvbnN0IFN1Ymxpc3RJdGVtID0gc3R5bGVkLmxpPHsgaXNBY3RpdmU6IGJvb2xlYW4gfT5gXG4gIGRpc3BsYXk6IGZsZXg7XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gIGFsaWduLXNlbGY6IHN0cmV0Y2g7XG5cbiAgJHsocHJvcHMpID0+IFtcbiAgICBwcm9wcy5pc0FjdGl2ZSAmJlxuICAgICAgY3NzYFxuICAgICAgICBib3JkZXItcmFkaXVzOiAke3VpS2l0RGVzaWduVG9rZW5zLmJvcmRlclJhZGl1czR9O1xuICAgICAgICBiYWNrZ3JvdW5kOiAke2FwcEtpdERlc2lnblRva2Vucy5iYWNrZ3JvdW5kQ29sb3JGb3JOYXZiYXJTdWJtZW51SXRlbVdoZW5BY3RpdmV9O1xuICAgICAgYCxcbiAgICAhcHJvcHMuaXNBY3RpdmUgJiZcbiAgICAgIGNzc2BcbiAgICAgICAgOmhvdmVyLFxuICAgICAgICA6Zm9jdXMtd2l0aGluIHtcbiAgICAgICAgICBjb2xvcjogJHt1aUtpdERlc2lnblRva2Vucy5jb2xvclN1cmZhY2V9O1xuICAgICAgICAgIGZvbnQtd2VpZ2h0OiAke3VpS2l0RGVzaWduVG9rZW5zLmZvbnRXZWlnaHQ2MDB9O1xuICAgICAgICAgIGJvcmRlci1yYWRpdXM6ICR7dWlLaXREZXNpZ25Ub2tlbnMuYm9yZGVyUmFkaXVzNH07XG4gICAgICAgICAgYmFja2dyb3VuZDogJHt1aUtpdERlc2lnblRva2Vucy5jb2xvclByaW1hcnk5NX07XG5cbiAgICAgICAgICBbZGF0YS1saW5rLWxldmVsPSd0ZXh0LWxpbmstc3VibGlzdCddIHtcbiAgICAgICAgICAgIC8qIGFkZGl0aW9uYWwgbGVmdCBwYWRkaW5nIG9uIGhvdmVyIGFuZCBmb2N1cyAqL1xuICAgICAgICAgICAgcGFkZGluZzogJHt1aUtpdERlc2lnblRva2Vucy5zcGFjaW5nMjV9XG4gICAgICAgICAgICAgICR7dWlLaXREZXNpZ25Ub2tlbnMuc3BhY2luZzI1fSAke3VpS2l0RGVzaWduVG9rZW5zLnNwYWNpbmcyNX1cbiAgICAgICAgICAgICAgY2FsYyhcbiAgICAgICAgICAgICAgICAke3VpS2l0RGVzaWduVG9rZW5zLnNwYWNpbmczMH0gKyAke3VpS2l0RGVzaWduVG9rZW5zLnNwYWNpbmcyMH1cbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIGAsXG4gIF19XG5gO1xuXG5jb25zdCBNZW51TGlzdEl0ZW0gPSBzdHlsZWQubGk8e1xuICBpc0FjdGl2ZTogYm9vbGVhbjtcbiAgaXNSb3V0ZUFjdGl2ZTogYm9vbGVhbjtcbiAgaXNDb2xsYXBzZWQ6IGJvb2xlYW47XG59PmBcbiAgaGVpZ2h0OiAke05BVkJBUi5pdGVtU2l6ZX07XG4gIHdpZHRoOiAke05BVkJBUi5pdGVtU2l6ZX07XG4gIG1hcmdpbjogMDtcbiAgYmFja2dyb3VuZDogJHthcHBLaXREZXNpZ25Ub2tlbnMuYmFja2dyb3VuZENvbG9yRm9yTmF2YmFyfTtcbiAgbGlzdC1zdHlsZTogbm9uZTtcbiAgY3Vyc29yOiBwb2ludGVyO1xuXG4gICR7SWNvbldyYXBwZXJ9IHtcbiAgICB3aWR0aDogYXV0bztcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICB9XG5cbiAgJHsocHJvcHMpID0+IFtcbiAgICBwcm9wcy5pc1JvdXRlQWN0aXZlICYmXG4gICAgICBjc3NgXG4gICAgICAgIGJhY2tncm91bmQ6ICR7YXBwS2l0RGVzaWduVG9rZW5zLmJhY2tncm91bmRDb2xvckZvck5hdmJhck1lbnVJdGVtV2hlbkFjdGl2ZX07XG4gICAgICAgIGJvcmRlci1yYWRpdXM6ICR7dWlLaXREZXNpZ25Ub2tlbnMuYm9yZGVyUmFkaXVzOH07XG4gICAgICBgLFxuICAgICFwcm9wcy5pc1JvdXRlQWN0aXZlICYmXG4gICAgICBjc3NgXG4gICAgICAgIDpob3ZlcixcbiAgICAgICAgOmZvY3VzLXdpdGhpbiB7XG4gICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogJHthcHBLaXREZXNpZ25Ub2tlbnMuYmFja2dyb3VuZENvbG9yRm9yTmF2YmFyTWVudUl0ZW1XaGVuSG92ZXJlZH07XG4gICAgICAgICAgYm9yZGVyLXJhZGl1czogJHt1aUtpdERlc2lnblRva2Vucy5ib3JkZXJSYWRpdXM4fTtcbiAgICAgICAgfVxuICAgICAgYCxcbiAgICBwcm9wcy5pc0FjdGl2ZSAmJlxuICAgICAgY3NzYFxuICAgICAgICAke0l0ZW1JY29uVGV4dH0ge1xuICAgICAgICAgIGp1c3RpZnktY29udGVudDogZmxleC1zdGFydDtcbiAgICAgICAgfVxuICAgICAgYCxcbiAgICAhcHJvcHMuaXNBY3RpdmUgJiZcbiAgICAgIGNzc2BcbiAgICAgICAgOmhvdmVyICR7SWNvbn0gPiBzdmcgKjpub3QoW2ZpbGw9J25vbmUnXSksXG4gICAgICAgIDpmb2N1cy13aXRoaW4gJHtJY29ufSA+IHN2ZyAqOm5vdChbZmlsbD0nbm9uZSddKSB7XG4gICAgICAgICAgZmlsbDogJHt1aUtpdERlc2lnblRva2Vucy5jb2xvclN1cmZhY2V9O1xuICAgICAgICB9XG5cbiAgICAgICAgOmhvdmVyIC4ke1RpdGxlfSwgOmZvY3VzLXdpdGhpbiAke1RpdGxlfSB7XG4gICAgICAgICAgY29sb3I6ICR7dWlLaXREZXNpZ25Ub2tlbnMuY29sb3JTdXJmYWNlfTtcbiAgICAgICAgfVxuICAgICAgYCxcbiAgICBwcm9wcy5pc0NvbGxhcHNlZCAmJlxuICAgICAgY3NzYFxuICAgICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gICAgICBgLFxuICBdfVxuXG4gIDpob3ZlciAke1RpdGxlfSxcbiAgOmZvY3VzLXdpdGhpbiAke1RpdGxlfSB7XG4gICAgbWFyZ2luLWxlZnQ6IGNhbGMoJHt1aUtpdERlc2lnblRva2Vucy5zcGFjaW5nMjV9ICsgMnB4KTtcbiAgfVxuXG4gIDpob3ZlciAke0ljb259LCA6Zm9jdXMtd2l0aGluICR7SWNvbn0ge1xuICAgIC8qIDEuMTYgaXMgcm91Z2hseSB0aGUgcmF0aW8gb2YgTkFWQkFSLmljb25TaXplSG92ZXIgdG8gTkFWQkFSLmljb25TaXplICovXG4gICAgdHJhbnNmb3JtOiBzY2FsZSgxLjIpO1xuICB9XG5cbiAgOmhvdmVyXG4gICAgJHtNZW51TGlzdH0uc3VibGlzdC1jb2xsYXBzZWRfX2FjdGl2ZSxcbiAgICA6aG92ZXJcbiAgICAke01lbnVMaXN0fS5zdWJsaXN0LWNvbGxhcHNlZF9fYWN0aXZlX19hYm92ZSxcbiAgICA6aG92ZXJcbiAgICAke01lbnVMaXN0fS5zdWJsaXN0LWV4cGFuZGVkX19hY3RpdmUsXG4gICAgOmZvY3VzLXdpdGhpblxuICAgICR7TWVudUxpc3R9LnN1Ymxpc3QtY29sbGFwc2VkX19hY3RpdmUsXG4gICAgOmZvY3VzLXdpdGhpblxuICAgICR7TWVudUxpc3R9LnN1Ymxpc3QtY29sbGFwc2VkX19hY3RpdmVfX2Fib3ZlLFxuICAgIDpmb2N1cy13aXRoaW5cbiAgICAke01lbnVMaXN0fS5zdWJsaXN0LWV4cGFuZGVkX19hY3RpdmUge1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgICBhbGlnbi1pdGVtczogZmxleC1zdGFydDtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAke3VpS2l0RGVzaWduVG9rZW5zLmNvbG9yU3VyZmFjZX07XG4gICAgbWluLWhlaWdodDogJHtOQVZCQVIuc3VibGlzdEl0ZW1NaW5IZWlnaHR9O1xuICAgIHdpZHRoOiAke05BVkJBUi5zdWJsaXN0V2lkdGh9O1xuICAgIGJvcmRlci1yYWRpdXM6ICR7dWlLaXREZXNpZ25Ub2tlbnMuYm9yZGVyUmFkaXVzOH07XG4gICAgLyogei1pbmRleCB2YWx1ZSBtdXN0IGJlIGhpZ2hlciB0aGFuIEFwcEJhcidzIHotaW5kZXggKi9cbiAgICB6LWluZGV4OiAyMDAwMTtcbiAgICBib3gtc2hhZG93OiAtMnB4IDRweCAyNXB4IDAgcmdiYSg4OSwgODksIDg5LCAwLjUpO1xuICB9XG5cbiAgOmhvdmVyXG4gICAgJHtNZW51TGlzdH0uc3VibGlzdC1jb2xsYXBzZWRfX2FjdGl2ZS5zdWJsaXN0LWNvbGxhcHNlZF9fZW1wdHksXG4gICAgOmhvdmVyXG4gICAgJHtNZW51TGlzdH0uc3VibGlzdC1jb2xsYXBzZWRfX2FjdGl2ZV9fYWJvdmUuc3VibGlzdC1jb2xsYXBzZWRfX2VtcHR5LFxuICAgIDpmb2N1cy13aXRoaW5cbiAgICAke01lbnVMaXN0fS5zdWJsaXN0LWNvbGxhcHNlZF9fYWN0aXZlLnN1Ymxpc3QtY29sbGFwc2VkX19lbXB0eSxcbiAgICA6Zm9jdXMtd2l0aGluXG4gICAgJHtNZW51TGlzdH0uc3VibGlzdC1jb2xsYXBzZWRfX2FjdGl2ZV9fYWJvdmUuc3VibGlzdC1jb2xsYXBzZWRfX2VtcHR5IHtcbiAgICB2aXNpYmlsaXR5OiBoaWRkZW47XG4gIH1cblxuICA6aG92ZXJcbiAgICAke01lbnVMaXN0fS5zdWJsaXN0LWV4cGFuZGVkX19hY3RpdmUsXG4gICAgOmZvY3VzLXdpdGhpblxuICAgICR7TWVudUxpc3R9LnN1Ymxpc3QtZXhwYW5kZWRfX2FjdGl2ZSB7XG4gICAgbGVmdDogJHtOQVZCQVIuc3VibGlzdEluZGVudGF0aW9uV2hlbkV4cGFuZGVkfTtcbiAgfVxuYDtcblxuZXhwb3J0IHtcbiAgRXhwYW5kZXIsXG4gIEV4cGFuZGVySWNvbixcbiAgRmFkZWQsXG4gIExlZnROYXZpZ2F0aW9uLFxuICBNZW51TGlzdCxcbiAgTWVudUxpc3RJdGVtLFxuICBTdWJsaXN0SXRlbSxcbiAgVGV4dExpbmtTdWJsaXN0V3JhcHBlcixcbiAgTmF2bGlua0NsaWNrYWJsZUNvbnRlbnQsXG59O1xuIl19 */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__$1
};
var _ref5 = process.env.NODE_ENV === "production" ? {
  name: "8tapst",
  styles: "bottom:0"
} : {
  name: "11ucmnx-getContainerPositionBasedOnMenuItemPosition",
  styles: "bottom:0;label:getContainerPositionBasedOnMenuItemPosition;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__$1
};
const getContainerPositionBasedOnMenuItemPosition = (isSubmenuAboveMenuItem, isSublistActiveWhileIsMenuExpanded, isSublistActiveWhileIsMenuCollapsed) => [isSublistActiveWhileIsMenuCollapsed && /*#__PURE__*/css(isSubmenuAboveMenuItem ? 'bottom' : 'top', ":-", NAVBAR.itemSize, ";" + (process.env.NODE_ENV === "production" ? "" : ";label:getContainerPositionBasedOnMenuItemPosition;"), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"), isSublistActiveWhileIsMenuExpanded && isSubmenuAboveMenuItem && _ref5, isSublistActiveWhileIsMenuExpanded && !isSubmenuAboveMenuItem && _ref4];
const Faded = /*#__PURE__*/_styled("div", process.env.NODE_ENV === "production" ? {
  target: "e1i568cv8"
} : {
  target: "e1i568cv8",
  label: "Faded"
})("position:absolute;top:-32px;height:32px;width:100%;background:linear-gradient(180deg, rgba(0, 153, 135, 0) 0%, #00b39e 100%);z-index:1;visibility:", designTokens$1.visibilityForNavbarFaded, ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
var _ref3 = process.env.NODE_ENV === "production" ? {
  name: "eivff4",
  styles: "display:none"
} : {
  name: "v77ed5-Expander",
  styles: "display:none;label:Expander;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__$1
};
const Expander = /*#__PURE__*/_styled("li", process.env.NODE_ENV === "production" ? {
  target: "e1i568cv7"
} : {
  target: "e1i568cv7",
  label: "Expander"
})("display:flex;align-items:center;justify-content:center;background:", designTokens$1.backgroundColorForNavbarExpander, ";padding:", designTokens.spacing30, " ", designTokens.spacing25, ";", props => !props.isVisible && _ref3, "::before{content:'';position:absolute;top:", NAVBAR.itemHeight, ";height:1px;background:rgba(255, 255, 255, 0.5);width:calc(100% - 2 * ", designTokens.spacing30, ");}:hover,:focus{background-color:", designTokens$1.backgroundColorForNavbarExpanderWhenHovered, ";}" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const ExpanderIcon = /*#__PURE__*/_styled("div", process.env.NODE_ENV === "production" ? {
  target: "e1i568cv6"
} : {
  target: "e1i568cv6",
  label: "ExpanderIcon"
})("height:", NAVBAR.expanderSize, ";width:", NAVBAR.expanderSize, ";border-radius:", designTokens.borderRadius4, ";padding:", designTokens.spacing20, ";background:rgba(255, 255, 255, 0.2);display:flex;justify-content:center;align-items:center;:hover,:focus{background:rgba(255, 255, 255, 0.3);cursor:pointer;}" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1lbnUtaXRlbXMuc3R5bGVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQTJFK0IiLCJmaWxlIjoibWVudS1pdGVtcy5zdHlsZXMudHMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjc3MgfSBmcm9tICdAZW1vdGlvbi9yZWFjdCc7XG5pbXBvcnQgc3R5bGVkIGZyb20gJ0BlbW90aW9uL3N0eWxlZCc7XG5pbXBvcnQgeyBkZXNpZ25Ub2tlbnMgYXMgYXBwS2l0RGVzaWduVG9rZW5zIH0gZnJvbSAnQGNvbW1lcmNldG9vbHMtZnJvbnRlbmQvYXBwbGljYXRpb24tY29tcG9uZW50cyc7XG5pbXBvcnQgeyBkZXNpZ25Ub2tlbnMgYXMgdWlLaXREZXNpZ25Ub2tlbnMgfSBmcm9tICdAY29tbWVyY2V0b29scy11aWtpdC9kZXNpZ24tc3lzdGVtJztcbmltcG9ydCB7IE5BVkJBUiB9IGZyb20gJy4uLy4uL2NvbnN0YW50cyc7XG5pbXBvcnQgdHlwZSB7IE1lbnVHcm91cFByb3BzIH0gZnJvbSAnLi9tZW51LWl0ZW1zJztcbmltcG9ydCB7IEljb24sIEljb25XcmFwcGVyLCBJdGVtSWNvblRleHQsIFRpdGxlIH0gZnJvbSAnLi9zaGFyZWQuc3R5bGVzJztcblxuY29uc3QgZ2V0U3VibWVudVBvc2l0aW9uQmFzZWRPbk1lbnVJdGVtUG9zaXRpb24gPSAoXG4gIGlzU3VibWVudUFib3ZlTWVudUl0ZW0/OiBib29sZWFuLFxuICBzdWJtZW51VmVydGljYWxQb3NpdGlvbj86IG51bWJlclxuKSA9PiBjc3NgXG4gICR7aXNTdWJtZW51QWJvdmVNZW51SXRlbSA/ICdib3R0b20nIDogJ3RvcCd9OiAke3N1Ym1lbnVWZXJ0aWNhbFBvc2l0aW9ufXB4XG5gO1xuXG5jb25zdCBnZXRDb250YWluZXJQb3NpdGlvbkJhc2VkT25NZW51SXRlbVBvc2l0aW9uID0gKFxuICBpc1N1Ym1lbnVBYm92ZU1lbnVJdGVtPzogYm9vbGVhbixcbiAgaXNTdWJsaXN0QWN0aXZlV2hpbGVJc01lbnVFeHBhbmRlZD86IGJvb2xlYW4sXG4gIGlzU3VibGlzdEFjdGl2ZVdoaWxlSXNNZW51Q29sbGFwc2VkPzogYm9vbGVhblxuKSA9PiBbXG4gIGlzU3VibGlzdEFjdGl2ZVdoaWxlSXNNZW51Q29sbGFwc2VkICYmXG4gICAgY3NzYFxuICAgICAgJHtpc1N1Ym1lbnVBYm92ZU1lbnVJdGVtID8gJ2JvdHRvbScgOiAndG9wJ306IC0ke05BVkJBUi5pdGVtU2l6ZX07XG4gICAgYCxcbiAgaXNTdWJsaXN0QWN0aXZlV2hpbGVJc01lbnVFeHBhbmRlZCAmJlxuICAgIGlzU3VibWVudUFib3ZlTWVudUl0ZW0gJiZcbiAgICBjc3NgXG4gICAgICBib3R0b206IDA7XG4gICAgYCxcbiAgaXNTdWJsaXN0QWN0aXZlV2hpbGVJc01lbnVFeHBhbmRlZCAmJlxuICAgICFpc1N1Ym1lbnVBYm92ZU1lbnVJdGVtICYmXG4gICAgY3NzYFxuICAgICAgdG9wOiAwO1xuICAgIGAsXG5dO1xuXG5jb25zdCBGYWRlZCA9IHN0eWxlZC5kaXZgXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgdG9wOiAtMzJweDtcbiAgaGVpZ2h0OiAzMnB4O1xuICB3aWR0aDogMTAwJTtcbiAgYmFja2dyb3VuZDogbGluZWFyLWdyYWRpZW50KDE4MGRlZywgcmdiYSgwLCAxNTMsIDEzNSwgMCkgMCUsICMwMGIzOWUgMTAwJSk7XG4gIHotaW5kZXg6IDE7XG4gIHZpc2liaWxpdHk6ICR7YXBwS2l0RGVzaWduVG9rZW5zLnZpc2liaWxpdHlGb3JOYXZiYXJGYWRlZH07XG5gO1xuXG5jb25zdCBFeHBhbmRlciA9IHN0eWxlZC5saTx7IGlzVmlzaWJsZTogYm9vbGVhbiB9PmBcbiAgZGlzcGxheTogZmxleDtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gIGJhY2tncm91bmQ6ICR7YXBwS2l0RGVzaWduVG9rZW5zLmJhY2tncm91bmRDb2xvckZvck5hdmJhckV4cGFuZGVyfTtcbiAgcGFkZGluZzogJHt1aUtpdERlc2lnblRva2Vucy5zcGFjaW5nMzB9ICR7dWlLaXREZXNpZ25Ub2tlbnMuc3BhY2luZzI1fTtcbiAgJHsocHJvcHMpID0+XG4gICAgIXByb3BzLmlzVmlzaWJsZSAmJlxuICAgIGNzc2BcbiAgICAgIGRpc3BsYXk6IG5vbmU7XG4gICAgYH1cblxuICAvKiBEaXZpZGVyICovXG4gIDo6YmVmb3JlIHtcbiAgICBjb250ZW50OiAnJztcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgdG9wOiAke05BVkJBUi5pdGVtSGVpZ2h0fTtcbiAgICBoZWlnaHQ6IDFweDtcbiAgICBiYWNrZ3JvdW5kOiByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuNSk7XG4gICAgd2lkdGg6IGNhbGMoMTAwJSAtIDIgKiAke3VpS2l0RGVzaWduVG9rZW5zLnNwYWNpbmczMH0pO1xuICB9XG5cbiAgLy8gVE9ETzogcmVtb3ZlIGNvbXBsZXRlbHkgYXMgcGFydCBvZiB0aGUgcmVjb2xvdXJpbmcgcm9sbG91dCBjbGVhbnVwIHByb2Nlc3NcbiAgOmhvdmVyLFxuICA6Zm9jdXMge1xuICAgIGJhY2tncm91bmQtY29sb3I6ICR7YXBwS2l0RGVzaWduVG9rZW5zLmJhY2tncm91bmRDb2xvckZvck5hdmJhckV4cGFuZGVyV2hlbkhvdmVyZWR9O1xuICB9XG5gO1xuXG5jb25zdCBFeHBhbmRlckljb24gPSBzdHlsZWQuZGl2YFxuICBoZWlnaHQ6ICR7TkFWQkFSLmV4cGFuZGVyU2l6ZX07XG4gIHdpZHRoOiAke05BVkJBUi5leHBhbmRlclNpemV9O1xuICBib3JkZXItcmFkaXVzOiAke3VpS2l0RGVzaWduVG9rZW5zLmJvcmRlclJhZGl1czR9O1xuICBwYWRkaW5nOiAke3VpS2l0RGVzaWduVG9rZW5zLnNwYWNpbmcyMH07XG4gIGJhY2tncm91bmQ6IHJnYmEoMjU1LCAyNTUsIDI1NSwgMC4yKTtcbiAgZGlzcGxheTogZmxleDtcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG5cbiAgOmhvdmVyLFxuICA6Zm9jdXMge1xuICAgIGJhY2tncm91bmQ6IHJnYmEoMjU1LCAyNTUsIDI1NSwgMC4zKTtcbiAgICBjdXJzb3I6IHBvaW50ZXI7XG4gIH1cbmA7XG5cbmNvbnN0IExlZnROYXZpZ2F0aW9uID0gc3R5bGVkLm5hdmBcbiAgZGlzcGxheTogZ3JpZDtcbiAgd2lkdGg6ICR7TkFWQkFSLndpZHRoTGVmdE5hdmlnYXRpb259O1xuICBiYWNrZ3JvdW5kOiAke2FwcEtpdERlc2lnblRva2Vucy5iYWNrZ3JvdW5kQ29sb3JGb3JOYXZiYXJ9O1xuICBoZWlnaHQ6IDEwMCU7XG4gIGdyaWQtdGVtcGxhdGUtcm93czogNTZweCAxZnI7XG4gIHRyYW5zaXRpb246ICR7TkFWQkFSLmxlZnROYXZpZ2F0aW9uVHJhbnNpdGlvbn07XG5gO1xuXG5jb25zdCBUZXh0TGlua1N1Ymxpc3RXcmFwcGVyID0gc3R5bGVkLmRpdmBcbiAgZGlzcGxheTogZmxleDtcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuICBtaW4taGVpZ2h0OiAwO1xuYDtcblxuY29uc3QgTmF2bGlua0NsaWNrYWJsZUNvbnRlbnQgPSBzdHlsZWQuZGl2YFxuICBoZWlnaHQ6IDEwMCU7XG4gIHdpZHRoOiAxMDAlO1xuYDtcblxuY29uc3QgbGlzdFN0eWxlcyA9IGNzc2BcbiAgbWFyZ2luOiAwO1xuICBwYWRkaW5nOiAwO1xuICBkaXNwbGF5OiBmbGV4O1xuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICBtaW4taGVpZ2h0OiAwO1xuICBmbGV4OiAxIDEgMDtcbmA7XG5cbmNvbnN0IHN1Ymxpc3RTdHlsZXMgPSBjc3NgXG4gIHBhZGRpbmc6ICR7dWlLaXREZXNpZ25Ub2tlbnMuc3BhY2luZzMwfTtcbiAgZm9udC13ZWlnaHQ6ICR7dWlLaXREZXNpZ25Ub2tlbnMuZm9udFdlaWdodDQwMH07XG4gIGZvbnQtc2l6ZTogJHt1aUtpdERlc2lnblRva2Vucy5mb250U2l6ZTIwfTtcbiAgYmFja2dyb3VuZC1jb2xvcjogJHt1aUtpdERlc2lnblRva2Vucy5jb2xvckFjY2VudDEwfTtcbiAgbGVmdDogJHtOQVZCQVIuc3VibGlzdEluZGVudGF0aW9uV2hlbkNvbGxhcHNlZH07XG4gIHotaW5kZXg6IC0xO1xuICBsaXN0LXN0eWxlOiBub25lO1xuICBwb3NpdGlvbjogZml4ZWQ7XG4gIGRpc3BsYXk6IG5vbmU7XG5gO1xuXG5jb25zdCBNZW51TGlzdCA9IHN0eWxlZC51bDxcbiAgTWVudUdyb3VwUHJvcHMgJiB7XG4gICAgaXNTdWJsaXN0QWN0aXZlV2hpbGVJc01lbnVFeHBhbmRlZDogYm9vbGVhbjtcbiAgICBpc1N1Ymxpc3RBY3RpdmVXaGlsZUlzTWVudUNvbGxhcHNlZDogYm9vbGVhbjtcbiAgICBpc1N1Ymxpc3RDb2xsYXBzZWRBbmRBY3RpdmU6IGJvb2xlYW47XG4gICAgaXNTdWJsaXN0Q29sbGFwc2VkQW5kQWN0aXZlQW5kQWJvdmU6IGJvb2xlYW47XG4gIH1cbj5gXG4gICR7KHByb3BzKSA9PiBbXG4gICAgcHJvcHMubGV2ZWwgPT09IDEgJiYgbGlzdFN0eWxlcyxcbiAgICBnZXRTdWJtZW51UG9zaXRpb25CYXNlZE9uTWVudUl0ZW1Qb3NpdGlvbihcbiAgICAgIHByb3BzLmlzU3VibWVudUFib3ZlTWVudUl0ZW0sXG4gICAgICBwcm9wcy5zdWJtZW51VmVydGljYWxQb3NpdGlvblxuICAgICksXG4gICAgcHJvcHMubGV2ZWwgPT09IDIgJiYgc3VibGlzdFN0eWxlcyxcbiAgICAvLyBwcmV2ZW50IGdsaXRjaHkgYmVoYXZpb3IgZHVyaW5nIHRoZSBpbml0aWFsIHJlbmRlciB3aGVuIHRoZSBzdWJtZW51J3MgdmVydGljYWwgcG9zaXRpb24gaXMgZXZhbHVhdGVkIGFzIDBcbiAgICBwcm9wcy5zdWJtZW51VmVydGljYWxQb3NpdGlvbiA9PT0gMCAmJlxuICAgICAgY3NzYFxuICAgICAgICB2aXNpYmlsaXR5OiBoaWRkZW47XG4gICAgICBgLFxuICAgIChwcm9wcy5pc1N1Ymxpc3RBY3RpdmVXaGlsZUlzTWVudUV4cGFuZGVkIHx8XG4gICAgICBwcm9wcy5pc1N1Ymxpc3RDb2xsYXBzZWRBbmRBY3RpdmUgfHxcbiAgICAgIHByb3BzLmlzU3VibGlzdENvbGxhcHNlZEFuZEFjdGl2ZUFuZEFib3ZlKSAmJlxuICAgICAgY3NzYFxuICAgICAgICBvcGFjaXR5OiAxO1xuICAgICAgICBkaXNwbGF5OiBub25lO1xuICAgICAgICB0ZXh0LWFsaWduOiBsZWZ0O1xuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAke3VpS2l0RGVzaWduVG9rZW5zLmNvbG9yQWNjZW50MjB9O1xuXG4gICAgICAgIC8qIFRoaXMgcHNldWRvLWVsZW1lbnQgaXMgcmVxdWlyZWQgdG8gZW5hYmxlIHNtb290aCBjb3Vyc29yIG1vdmVtZW50IGZyb20gdGhlIG1haW4gbWVudSBpdGVtIHRvIHN1Ym1lbnUgaXRlbXMgd2l0aCB0aGUgZ2FwIGluIGJldHdlZW4gKi9cbiAgICAgICAgOjpiZWZvcmUge1xuICAgICAgICAgIGNvbnRlbnQ6ICcnO1xuICAgICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICAgICAgICBkaXNwbGF5OiBibG9jaztcbiAgICAgICAgICB3aWR0aDogY2FsYygke05BVkJBUi5zdWJsaXN0V2lkdGh9ICsgJHt1aUtpdERlc2lnblRva2Vucy5zcGFjaW5nMjB9KTtcbiAgICAgICAgICBoZWlnaHQ6ICR7TkFWQkFSLml0ZW1TaXplfTtcbiAgICAgICAgICBsZWZ0OiBjYWxjKC0xICogJHt1aUtpdERlc2lnblRva2Vucy5zcGFjaW5nMjB9KTtcblxuICAgICAgICAgICR7Z2V0Q29udGFpbmVyUG9zaXRpb25CYXNlZE9uTWVudUl0ZW1Qb3NpdGlvbihcbiAgICAgICAgICAgIHByb3BzLmlzU3VibWVudUFib3ZlTWVudUl0ZW0sXG4gICAgICAgICAgICBwcm9wcy5pc1N1Ymxpc3RBY3RpdmVXaGlsZUlzTWVudUV4cGFuZGVkLFxuICAgICAgICAgICAgcHJvcHMuaXNTdWJsaXN0QWN0aXZlV2hpbGVJc01lbnVDb2xsYXBzZWRcbiAgICAgICAgICApfVxuICAgICAgICB9XG4gICAgICBgLFxuICBdfVxuXG4gICYgLmhpZ2hsaWdodGVkLFxuICAmIC5oaWdobGlnaHRlZCAke1RpdGxlfSB7XG4gICAgY29sb3I6ICR7dWlLaXREZXNpZ25Ub2tlbnMuY29sb3JTdXJmYWNlfSAhaW1wb3J0YW50O1xuICAgIGZvbnQtd2VpZ2h0OiAke3VpS2l0RGVzaWduVG9rZW5zLmZvbnRXZWlnaHQ2MDB9O1xuICB9XG5gO1xuXG5jb25zdCBTdWJsaXN0SXRlbSA9IHN0eWxlZC5saTx7IGlzQWN0aXZlOiBib29sZWFuIH0+YFxuICBkaXNwbGF5OiBmbGV4O1xuICBhbGlnbi1pdGVtczogY2VudGVyO1xuICBhbGlnbi1zZWxmOiBzdHJldGNoO1xuXG4gICR7KHByb3BzKSA9PiBbXG4gICAgcHJvcHMuaXNBY3RpdmUgJiZcbiAgICAgIGNzc2BcbiAgICAgICAgYm9yZGVyLXJhZGl1czogJHt1aUtpdERlc2lnblRva2Vucy5ib3JkZXJSYWRpdXM0fTtcbiAgICAgICAgYmFja2dyb3VuZDogJHthcHBLaXREZXNpZ25Ub2tlbnMuYmFja2dyb3VuZENvbG9yRm9yTmF2YmFyU3VibWVudUl0ZW1XaGVuQWN0aXZlfTtcbiAgICAgIGAsXG4gICAgIXByb3BzLmlzQWN0aXZlICYmXG4gICAgICBjc3NgXG4gICAgICAgIDpob3ZlcixcbiAgICAgICAgOmZvY3VzLXdpdGhpbiB7XG4gICAgICAgICAgY29sb3I6ICR7dWlLaXREZXNpZ25Ub2tlbnMuY29sb3JTdXJmYWNlfTtcbiAgICAgICAgICBmb250LXdlaWdodDogJHt1aUtpdERlc2lnblRva2Vucy5mb250V2VpZ2h0NjAwfTtcbiAgICAgICAgICBib3JkZXItcmFkaXVzOiAke3VpS2l0RGVzaWduVG9rZW5zLmJvcmRlclJhZGl1czR9O1xuICAgICAgICAgIGJhY2tncm91bmQ6ICR7dWlLaXREZXNpZ25Ub2tlbnMuY29sb3JQcmltYXJ5OTV9O1xuXG4gICAgICAgICAgW2RhdGEtbGluay1sZXZlbD0ndGV4dC1saW5rLXN1Ymxpc3QnXSB7XG4gICAgICAgICAgICAvKiBhZGRpdGlvbmFsIGxlZnQgcGFkZGluZyBvbiBob3ZlciBhbmQgZm9jdXMgKi9cbiAgICAgICAgICAgIHBhZGRpbmc6ICR7dWlLaXREZXNpZ25Ub2tlbnMuc3BhY2luZzI1fVxuICAgICAgICAgICAgICAke3VpS2l0RGVzaWduVG9rZW5zLnNwYWNpbmcyNX0gJHt1aUtpdERlc2lnblRva2Vucy5zcGFjaW5nMjV9XG4gICAgICAgICAgICAgIGNhbGMoXG4gICAgICAgICAgICAgICAgJHt1aUtpdERlc2lnblRva2Vucy5zcGFjaW5nMzB9ICsgJHt1aUtpdERlc2lnblRva2Vucy5zcGFjaW5nMjB9XG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICBgLFxuICBdfVxuYDtcblxuY29uc3QgTWVudUxpc3RJdGVtID0gc3R5bGVkLmxpPHtcbiAgaXNBY3RpdmU6IGJvb2xlYW47XG4gIGlzUm91dGVBY3RpdmU6IGJvb2xlYW47XG4gIGlzQ29sbGFwc2VkOiBib29sZWFuO1xufT5gXG4gIGhlaWdodDogJHtOQVZCQVIuaXRlbVNpemV9O1xuICB3aWR0aDogJHtOQVZCQVIuaXRlbVNpemV9O1xuICBtYXJnaW46IDA7XG4gIGJhY2tncm91bmQ6ICR7YXBwS2l0RGVzaWduVG9rZW5zLmJhY2tncm91bmRDb2xvckZvck5hdmJhcn07XG4gIGxpc3Qtc3R5bGU6IG5vbmU7XG4gIGN1cnNvcjogcG9pbnRlcjtcblxuICAke0ljb25XcmFwcGVyfSB7XG4gICAgd2lkdGg6IGF1dG87XG4gICAgZGlzcGxheTogZmxleDtcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgfVxuXG4gICR7KHByb3BzKSA9PiBbXG4gICAgcHJvcHMuaXNSb3V0ZUFjdGl2ZSAmJlxuICAgICAgY3NzYFxuICAgICAgICBiYWNrZ3JvdW5kOiAke2FwcEtpdERlc2lnblRva2Vucy5iYWNrZ3JvdW5kQ29sb3JGb3JOYXZiYXJNZW51SXRlbVdoZW5BY3RpdmV9O1xuICAgICAgICBib3JkZXItcmFkaXVzOiAke3VpS2l0RGVzaWduVG9rZW5zLmJvcmRlclJhZGl1czh9O1xuICAgICAgYCxcbiAgICAhcHJvcHMuaXNSb3V0ZUFjdGl2ZSAmJlxuICAgICAgY3NzYFxuICAgICAgICA6aG92ZXIsXG4gICAgICAgIDpmb2N1cy13aXRoaW4ge1xuICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICR7YXBwS2l0RGVzaWduVG9rZW5zLmJhY2tncm91bmRDb2xvckZvck5hdmJhck1lbnVJdGVtV2hlbkhvdmVyZWR9O1xuICAgICAgICAgIGJvcmRlci1yYWRpdXM6ICR7dWlLaXREZXNpZ25Ub2tlbnMuYm9yZGVyUmFkaXVzOH07XG4gICAgICAgIH1cbiAgICAgIGAsXG4gICAgcHJvcHMuaXNBY3RpdmUgJiZcbiAgICAgIGNzc2BcbiAgICAgICAgJHtJdGVtSWNvblRleHR9IHtcbiAgICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGZsZXgtc3RhcnQ7XG4gICAgICAgIH1cbiAgICAgIGAsXG4gICAgIXByb3BzLmlzQWN0aXZlICYmXG4gICAgICBjc3NgXG4gICAgICAgIDpob3ZlciAke0ljb259ID4gc3ZnICo6bm90KFtmaWxsPSdub25lJ10pLFxuICAgICAgICA6Zm9jdXMtd2l0aGluICR7SWNvbn0gPiBzdmcgKjpub3QoW2ZpbGw9J25vbmUnXSkge1xuICAgICAgICAgIGZpbGw6ICR7dWlLaXREZXNpZ25Ub2tlbnMuY29sb3JTdXJmYWNlfTtcbiAgICAgICAgfVxuXG4gICAgICAgIDpob3ZlciAuJHtUaXRsZX0sIDpmb2N1cy13aXRoaW4gJHtUaXRsZX0ge1xuICAgICAgICAgIGNvbG9yOiAke3VpS2l0RGVzaWduVG9rZW5zLmNvbG9yU3VyZmFjZX07XG4gICAgICAgIH1cbiAgICAgIGAsXG4gICAgcHJvcHMuaXNDb2xsYXBzZWQgJiZcbiAgICAgIGNzc2BcbiAgICAgICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgICAgYCxcbiAgXX1cblxuICA6aG92ZXIgJHtUaXRsZX0sXG4gIDpmb2N1cy13aXRoaW4gJHtUaXRsZX0ge1xuICAgIG1hcmdpbi1sZWZ0OiBjYWxjKCR7dWlLaXREZXNpZ25Ub2tlbnMuc3BhY2luZzI1fSArIDJweCk7XG4gIH1cblxuICA6aG92ZXIgJHtJY29ufSwgOmZvY3VzLXdpdGhpbiAke0ljb259IHtcbiAgICAvKiAxLjE2IGlzIHJvdWdobHkgdGhlIHJhdGlvIG9mIE5BVkJBUi5pY29uU2l6ZUhvdmVyIHRvIE5BVkJBUi5pY29uU2l6ZSAqL1xuICAgIHRyYW5zZm9ybTogc2NhbGUoMS4yKTtcbiAgfVxuXG4gIDpob3ZlclxuICAgICR7TWVudUxpc3R9LnN1Ymxpc3QtY29sbGFwc2VkX19hY3RpdmUsXG4gICAgOmhvdmVyXG4gICAgJHtNZW51TGlzdH0uc3VibGlzdC1jb2xsYXBzZWRfX2FjdGl2ZV9fYWJvdmUsXG4gICAgOmhvdmVyXG4gICAgJHtNZW51TGlzdH0uc3VibGlzdC1leHBhbmRlZF9fYWN0aXZlLFxuICAgIDpmb2N1cy13aXRoaW5cbiAgICAke01lbnVMaXN0fS5zdWJsaXN0LWNvbGxhcHNlZF9fYWN0aXZlLFxuICAgIDpmb2N1cy13aXRoaW5cbiAgICAke01lbnVMaXN0fS5zdWJsaXN0LWNvbGxhcHNlZF9fYWN0aXZlX19hYm92ZSxcbiAgICA6Zm9jdXMtd2l0aGluXG4gICAgJHtNZW51TGlzdH0uc3VibGlzdC1leHBhbmRlZF9fYWN0aXZlIHtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gICAgYWxpZ24taXRlbXM6IGZsZXgtc3RhcnQ7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogJHt1aUtpdERlc2lnblRva2Vucy5jb2xvclN1cmZhY2V9O1xuICAgIG1pbi1oZWlnaHQ6ICR7TkFWQkFSLnN1Ymxpc3RJdGVtTWluSGVpZ2h0fTtcbiAgICB3aWR0aDogJHtOQVZCQVIuc3VibGlzdFdpZHRofTtcbiAgICBib3JkZXItcmFkaXVzOiAke3VpS2l0RGVzaWduVG9rZW5zLmJvcmRlclJhZGl1czh9O1xuICAgIC8qIHotaW5kZXggdmFsdWUgbXVzdCBiZSBoaWdoZXIgdGhhbiBBcHBCYXIncyB6LWluZGV4ICovXG4gICAgei1pbmRleDogMjAwMDE7XG4gICAgYm94LXNoYWRvdzogLTJweCA0cHggMjVweCAwIHJnYmEoODksIDg5LCA4OSwgMC41KTtcbiAgfVxuXG4gIDpob3ZlclxuICAgICR7TWVudUxpc3R9LnN1Ymxpc3QtY29sbGFwc2VkX19hY3RpdmUuc3VibGlzdC1jb2xsYXBzZWRfX2VtcHR5LFxuICAgIDpob3ZlclxuICAgICR7TWVudUxpc3R9LnN1Ymxpc3QtY29sbGFwc2VkX19hY3RpdmVfX2Fib3ZlLnN1Ymxpc3QtY29sbGFwc2VkX19lbXB0eSxcbiAgICA6Zm9jdXMtd2l0aGluXG4gICAgJHtNZW51TGlzdH0uc3VibGlzdC1jb2xsYXBzZWRfX2FjdGl2ZS5zdWJsaXN0LWNvbGxhcHNlZF9fZW1wdHksXG4gICAgOmZvY3VzLXdpdGhpblxuICAgICR7TWVudUxpc3R9LnN1Ymxpc3QtY29sbGFwc2VkX19hY3RpdmVfX2Fib3ZlLnN1Ymxpc3QtY29sbGFwc2VkX19lbXB0eSB7XG4gICAgdmlzaWJpbGl0eTogaGlkZGVuO1xuICB9XG5cbiAgOmhvdmVyXG4gICAgJHtNZW51TGlzdH0uc3VibGlzdC1leHBhbmRlZF9fYWN0aXZlLFxuICAgIDpmb2N1cy13aXRoaW5cbiAgICAke01lbnVMaXN0fS5zdWJsaXN0LWV4cGFuZGVkX19hY3RpdmUge1xuICAgIGxlZnQ6ICR7TkFWQkFSLnN1Ymxpc3RJbmRlbnRhdGlvbldoZW5FeHBhbmRlZH07XG4gIH1cbmA7XG5cbmV4cG9ydCB7XG4gIEV4cGFuZGVyLFxuICBFeHBhbmRlckljb24sXG4gIEZhZGVkLFxuICBMZWZ0TmF2aWdhdGlvbixcbiAgTWVudUxpc3QsXG4gIE1lbnVMaXN0SXRlbSxcbiAgU3VibGlzdEl0ZW0sXG4gIFRleHRMaW5rU3VibGlzdFdyYXBwZXIsXG4gIE5hdmxpbmtDbGlja2FibGVDb250ZW50LFxufTtcbiJdfQ== */"));
const LeftNavigation = /*#__PURE__*/_styled("nav", process.env.NODE_ENV === "production" ? {
  target: "e1i568cv5"
} : {
  target: "e1i568cv5",
  label: "LeftNavigation"
})("display:grid;width:", NAVBAR.widthLeftNavigation, ";background:", designTokens$1.backgroundColorForNavbar, ";height:100%;grid-template-rows:56px 1fr;transition:", NAVBAR.leftNavigationTransition, ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const TextLinkSublistWrapper = /*#__PURE__*/_styled("div", process.env.NODE_ENV === "production" ? {
  target: "e1i568cv4"
} : {
  target: "e1i568cv4",
  label: "TextLinkSublistWrapper"
})(process.env.NODE_ENV === "production" ? {
  name: "khglpi",
  styles: "display:flex;flex-direction:column;position:relative;min-height:0"
} : {
  name: "khglpi",
  styles: "display:flex;flex-direction:column;position:relative;min-height:0",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__$1
});
const NavlinkClickableContent = /*#__PURE__*/_styled("div", process.env.NODE_ENV === "production" ? {
  target: "e1i568cv3"
} : {
  target: "e1i568cv3",
  label: "NavlinkClickableContent"
})(process.env.NODE_ENV === "production" ? {
  name: "1kzq5ms",
  styles: "height:100%;width:100%"
} : {
  name: "1kzq5ms",
  styles: "height:100%;width:100%",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__$1
});
const listStyles = process.env.NODE_ENV === "production" ? {
  name: "19z1op4",
  styles: "margin:0;padding:0;display:flex;flex-direction:column;min-height:0;flex:1 1 0"
} : {
  name: "1l42xsw-listStyles",
  styles: "margin:0;padding:0;display:flex;flex-direction:column;min-height:0;flex:1 1 0;label:listStyles;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__$1
};
const sublistStyles = /*#__PURE__*/css("padding:", designTokens.spacing30, ";font-weight:", designTokens.fontWeight400, ";font-size:", designTokens.fontSize20, ";background-color:", designTokens.colorAccent10, ";left:", NAVBAR.sublistIndentationWhenCollapsed, ";z-index:-1;list-style:none;position:fixed;display:none;" + (process.env.NODE_ENV === "production" ? "" : ";label:sublistStyles;"), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */");
var _ref2 = process.env.NODE_ENV === "production" ? {
  name: "6dhm9o",
  styles: "visibility:hidden"
} : {
  name: "8p2alb-MenuList",
  styles: "visibility:hidden;label:MenuList;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1lbnUtaXRlbXMuc3R5bGVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQXVKUyIsImZpbGUiOiJtZW51LWl0ZW1zLnN0eWxlcy50cyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNzcyB9IGZyb20gJ0BlbW90aW9uL3JlYWN0JztcbmltcG9ydCBzdHlsZWQgZnJvbSAnQGVtb3Rpb24vc3R5bGVkJztcbmltcG9ydCB7IGRlc2lnblRva2VucyBhcyBhcHBLaXREZXNpZ25Ub2tlbnMgfSBmcm9tICdAY29tbWVyY2V0b29scy1mcm9udGVuZC9hcHBsaWNhdGlvbi1jb21wb25lbnRzJztcbmltcG9ydCB7IGRlc2lnblRva2VucyBhcyB1aUtpdERlc2lnblRva2VucyB9IGZyb20gJ0Bjb21tZXJjZXRvb2xzLXVpa2l0L2Rlc2lnbi1zeXN0ZW0nO1xuaW1wb3J0IHsgTkFWQkFSIH0gZnJvbSAnLi4vLi4vY29uc3RhbnRzJztcbmltcG9ydCB0eXBlIHsgTWVudUdyb3VwUHJvcHMgfSBmcm9tICcuL21lbnUtaXRlbXMnO1xuaW1wb3J0IHsgSWNvbiwgSWNvbldyYXBwZXIsIEl0ZW1JY29uVGV4dCwgVGl0bGUgfSBmcm9tICcuL3NoYXJlZC5zdHlsZXMnO1xuXG5jb25zdCBnZXRTdWJtZW51UG9zaXRpb25CYXNlZE9uTWVudUl0ZW1Qb3NpdGlvbiA9IChcbiAgaXNTdWJtZW51QWJvdmVNZW51SXRlbT86IGJvb2xlYW4sXG4gIHN1Ym1lbnVWZXJ0aWNhbFBvc2l0aW9uPzogbnVtYmVyXG4pID0+IGNzc2BcbiAgJHtpc1N1Ym1lbnVBYm92ZU1lbnVJdGVtID8gJ2JvdHRvbScgOiAndG9wJ306ICR7c3VibWVudVZlcnRpY2FsUG9zaXRpb259cHhcbmA7XG5cbmNvbnN0IGdldENvbnRhaW5lclBvc2l0aW9uQmFzZWRPbk1lbnVJdGVtUG9zaXRpb24gPSAoXG4gIGlzU3VibWVudUFib3ZlTWVudUl0ZW0/OiBib29sZWFuLFxuICBpc1N1Ymxpc3RBY3RpdmVXaGlsZUlzTWVudUV4cGFuZGVkPzogYm9vbGVhbixcbiAgaXNTdWJsaXN0QWN0aXZlV2hpbGVJc01lbnVDb2xsYXBzZWQ/OiBib29sZWFuXG4pID0+IFtcbiAgaXNTdWJsaXN0QWN0aXZlV2hpbGVJc01lbnVDb2xsYXBzZWQgJiZcbiAgICBjc3NgXG4gICAgICAke2lzU3VibWVudUFib3ZlTWVudUl0ZW0gPyAnYm90dG9tJyA6ICd0b3AnfTogLSR7TkFWQkFSLml0ZW1TaXplfTtcbiAgICBgLFxuICBpc1N1Ymxpc3RBY3RpdmVXaGlsZUlzTWVudUV4cGFuZGVkICYmXG4gICAgaXNTdWJtZW51QWJvdmVNZW51SXRlbSAmJlxuICAgIGNzc2BcbiAgICAgIGJvdHRvbTogMDtcbiAgICBgLFxuICBpc1N1Ymxpc3RBY3RpdmVXaGlsZUlzTWVudUV4cGFuZGVkICYmXG4gICAgIWlzU3VibWVudUFib3ZlTWVudUl0ZW0gJiZcbiAgICBjc3NgXG4gICAgICB0b3A6IDA7XG4gICAgYCxcbl07XG5cbmNvbnN0IEZhZGVkID0gc3R5bGVkLmRpdmBcbiAgcG9zaXRpb246IGFic29sdXRlO1xuICB0b3A6IC0zMnB4O1xuICBoZWlnaHQ6IDMycHg7XG4gIHdpZHRoOiAxMDAlO1xuICBiYWNrZ3JvdW5kOiBsaW5lYXItZ3JhZGllbnQoMTgwZGVnLCByZ2JhKDAsIDE1MywgMTM1LCAwKSAwJSwgIzAwYjM5ZSAxMDAlKTtcbiAgei1pbmRleDogMTtcbiAgdmlzaWJpbGl0eTogJHthcHBLaXREZXNpZ25Ub2tlbnMudmlzaWJpbGl0eUZvck5hdmJhckZhZGVkfTtcbmA7XG5cbmNvbnN0IEV4cGFuZGVyID0gc3R5bGVkLmxpPHsgaXNWaXNpYmxlOiBib29sZWFuIH0+YFxuICBkaXNwbGF5OiBmbGV4O1xuICBhbGlnbi1pdGVtczogY2VudGVyO1xuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgYmFja2dyb3VuZDogJHthcHBLaXREZXNpZ25Ub2tlbnMuYmFja2dyb3VuZENvbG9yRm9yTmF2YmFyRXhwYW5kZXJ9O1xuICBwYWRkaW5nOiAke3VpS2l0RGVzaWduVG9rZW5zLnNwYWNpbmczMH0gJHt1aUtpdERlc2lnblRva2Vucy5zcGFjaW5nMjV9O1xuICAkeyhwcm9wcykgPT5cbiAgICAhcHJvcHMuaXNWaXNpYmxlICYmXG4gICAgY3NzYFxuICAgICAgZGlzcGxheTogbm9uZTtcbiAgICBgfVxuXG4gIC8qIERpdmlkZXIgKi9cbiAgOjpiZWZvcmUge1xuICAgIGNvbnRlbnQ6ICcnO1xuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICB0b3A6ICR7TkFWQkFSLml0ZW1IZWlnaHR9O1xuICAgIGhlaWdodDogMXB4O1xuICAgIGJhY2tncm91bmQ6IHJnYmEoMjU1LCAyNTUsIDI1NSwgMC41KTtcbiAgICB3aWR0aDogY2FsYygxMDAlIC0gMiAqICR7dWlLaXREZXNpZ25Ub2tlbnMuc3BhY2luZzMwfSk7XG4gIH1cblxuICAvLyBUT0RPOiByZW1vdmUgY29tcGxldGVseSBhcyBwYXJ0IG9mIHRoZSByZWNvbG91cmluZyByb2xsb3V0IGNsZWFudXAgcHJvY2Vzc1xuICA6aG92ZXIsXG4gIDpmb2N1cyB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogJHthcHBLaXREZXNpZ25Ub2tlbnMuYmFja2dyb3VuZENvbG9yRm9yTmF2YmFyRXhwYW5kZXJXaGVuSG92ZXJlZH07XG4gIH1cbmA7XG5cbmNvbnN0IEV4cGFuZGVySWNvbiA9IHN0eWxlZC5kaXZgXG4gIGhlaWdodDogJHtOQVZCQVIuZXhwYW5kZXJTaXplfTtcbiAgd2lkdGg6ICR7TkFWQkFSLmV4cGFuZGVyU2l6ZX07XG4gIGJvcmRlci1yYWRpdXM6ICR7dWlLaXREZXNpZ25Ub2tlbnMuYm9yZGVyUmFkaXVzNH07XG4gIHBhZGRpbmc6ICR7dWlLaXREZXNpZ25Ub2tlbnMuc3BhY2luZzIwfTtcbiAgYmFja2dyb3VuZDogcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjIpO1xuICBkaXNwbGF5OiBmbGV4O1xuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcblxuICA6aG92ZXIsXG4gIDpmb2N1cyB7XG4gICAgYmFja2dyb3VuZDogcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjMpO1xuICAgIGN1cnNvcjogcG9pbnRlcjtcbiAgfVxuYDtcblxuY29uc3QgTGVmdE5hdmlnYXRpb24gPSBzdHlsZWQubmF2YFxuICBkaXNwbGF5OiBncmlkO1xuICB3aWR0aDogJHtOQVZCQVIud2lkdGhMZWZ0TmF2aWdhdGlvbn07XG4gIGJhY2tncm91bmQ6ICR7YXBwS2l0RGVzaWduVG9rZW5zLmJhY2tncm91bmRDb2xvckZvck5hdmJhcn07XG4gIGhlaWdodDogMTAwJTtcbiAgZ3JpZC10ZW1wbGF0ZS1yb3dzOiA1NnB4IDFmcjtcbiAgdHJhbnNpdGlvbjogJHtOQVZCQVIubGVmdE5hdmlnYXRpb25UcmFuc2l0aW9ufTtcbmA7XG5cbmNvbnN0IFRleHRMaW5rU3VibGlzdFdyYXBwZXIgPSBzdHlsZWQuZGl2YFxuICBkaXNwbGF5OiBmbGV4O1xuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gIG1pbi1oZWlnaHQ6IDA7XG5gO1xuXG5jb25zdCBOYXZsaW5rQ2xpY2thYmxlQ29udGVudCA9IHN0eWxlZC5kaXZgXG4gIGhlaWdodDogMTAwJTtcbiAgd2lkdGg6IDEwMCU7XG5gO1xuXG5jb25zdCBsaXN0U3R5bGVzID0gY3NzYFxuICBtYXJnaW46IDA7XG4gIHBhZGRpbmc6IDA7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gIG1pbi1oZWlnaHQ6IDA7XG4gIGZsZXg6IDEgMSAwO1xuYDtcblxuY29uc3Qgc3VibGlzdFN0eWxlcyA9IGNzc2BcbiAgcGFkZGluZzogJHt1aUtpdERlc2lnblRva2Vucy5zcGFjaW5nMzB9O1xuICBmb250LXdlaWdodDogJHt1aUtpdERlc2lnblRva2Vucy5mb250V2VpZ2h0NDAwfTtcbiAgZm9udC1zaXplOiAke3VpS2l0RGVzaWduVG9rZW5zLmZvbnRTaXplMjB9O1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAke3VpS2l0RGVzaWduVG9rZW5zLmNvbG9yQWNjZW50MTB9O1xuICBsZWZ0OiAke05BVkJBUi5zdWJsaXN0SW5kZW50YXRpb25XaGVuQ29sbGFwc2VkfTtcbiAgei1pbmRleDogLTE7XG4gIGxpc3Qtc3R5bGU6IG5vbmU7XG4gIHBvc2l0aW9uOiBmaXhlZDtcbiAgZGlzcGxheTogbm9uZTtcbmA7XG5cbmNvbnN0IE1lbnVMaXN0ID0gc3R5bGVkLnVsPFxuICBNZW51R3JvdXBQcm9wcyAmIHtcbiAgICBpc1N1Ymxpc3RBY3RpdmVXaGlsZUlzTWVudUV4cGFuZGVkOiBib29sZWFuO1xuICAgIGlzU3VibGlzdEFjdGl2ZVdoaWxlSXNNZW51Q29sbGFwc2VkOiBib29sZWFuO1xuICAgIGlzU3VibGlzdENvbGxhcHNlZEFuZEFjdGl2ZTogYm9vbGVhbjtcbiAgICBpc1N1Ymxpc3RDb2xsYXBzZWRBbmRBY3RpdmVBbmRBYm92ZTogYm9vbGVhbjtcbiAgfVxuPmBcbiAgJHsocHJvcHMpID0+IFtcbiAgICBwcm9wcy5sZXZlbCA9PT0gMSAmJiBsaXN0U3R5bGVzLFxuICAgIGdldFN1Ym1lbnVQb3NpdGlvbkJhc2VkT25NZW51SXRlbVBvc2l0aW9uKFxuICAgICAgcHJvcHMuaXNTdWJtZW51QWJvdmVNZW51SXRlbSxcbiAgICAgIHByb3BzLnN1Ym1lbnVWZXJ0aWNhbFBvc2l0aW9uXG4gICAgKSxcbiAgICBwcm9wcy5sZXZlbCA9PT0gMiAmJiBzdWJsaXN0U3R5bGVzLFxuICAgIC8vIHByZXZlbnQgZ2xpdGNoeSBiZWhhdmlvciBkdXJpbmcgdGhlIGluaXRpYWwgcmVuZGVyIHdoZW4gdGhlIHN1Ym1lbnUncyB2ZXJ0aWNhbCBwb3NpdGlvbiBpcyBldmFsdWF0ZWQgYXMgMFxuICAgIHByb3BzLnN1Ym1lbnVWZXJ0aWNhbFBvc2l0aW9uID09PSAwICYmXG4gICAgICBjc3NgXG4gICAgICAgIHZpc2liaWxpdHk6IGhpZGRlbjtcbiAgICAgIGAsXG4gICAgKHByb3BzLmlzU3VibGlzdEFjdGl2ZVdoaWxlSXNNZW51RXhwYW5kZWQgfHxcbiAgICAgIHByb3BzLmlzU3VibGlzdENvbGxhcHNlZEFuZEFjdGl2ZSB8fFxuICAgICAgcHJvcHMuaXNTdWJsaXN0Q29sbGFwc2VkQW5kQWN0aXZlQW5kQWJvdmUpICYmXG4gICAgICBjc3NgXG4gICAgICAgIG9wYWNpdHk6IDE7XG4gICAgICAgIGRpc3BsYXk6IG5vbmU7XG4gICAgICAgIHRleHQtYWxpZ246IGxlZnQ7XG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6ICR7dWlLaXREZXNpZ25Ub2tlbnMuY29sb3JBY2NlbnQyMH07XG5cbiAgICAgICAgLyogVGhpcyBwc2V1ZG8tZWxlbWVudCBpcyByZXF1aXJlZCB0byBlbmFibGUgc21vb3RoIGNvdXJzb3IgbW92ZW1lbnQgZnJvbSB0aGUgbWFpbiBtZW51IGl0ZW0gdG8gc3VibWVudSBpdGVtcyB3aXRoIHRoZSBnYXAgaW4gYmV0d2VlbiAqL1xuICAgICAgICA6OmJlZm9yZSB7XG4gICAgICAgICAgY29udGVudDogJyc7XG4gICAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgICAgICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgICAgICAgIHdpZHRoOiBjYWxjKCR7TkFWQkFSLnN1Ymxpc3RXaWR0aH0gKyAke3VpS2l0RGVzaWduVG9rZW5zLnNwYWNpbmcyMH0pO1xuICAgICAgICAgIGhlaWdodDogJHtOQVZCQVIuaXRlbVNpemV9O1xuICAgICAgICAgIGxlZnQ6IGNhbGMoLTEgKiAke3VpS2l0RGVzaWduVG9rZW5zLnNwYWNpbmcyMH0pO1xuXG4gICAgICAgICAgJHtnZXRDb250YWluZXJQb3NpdGlvbkJhc2VkT25NZW51SXRlbVBvc2l0aW9uKFxuICAgICAgICAgICAgcHJvcHMuaXNTdWJtZW51QWJvdmVNZW51SXRlbSxcbiAgICAgICAgICAgIHByb3BzLmlzU3VibGlzdEFjdGl2ZVdoaWxlSXNNZW51RXhwYW5kZWQsXG4gICAgICAgICAgICBwcm9wcy5pc1N1Ymxpc3RBY3RpdmVXaGlsZUlzTWVudUNvbGxhcHNlZFxuICAgICAgICAgICl9XG4gICAgICAgIH1cbiAgICAgIGAsXG4gIF19XG5cbiAgJiAuaGlnaGxpZ2h0ZWQsXG4gICYgLmhpZ2hsaWdodGVkICR7VGl0bGV9IHtcbiAgICBjb2xvcjogJHt1aUtpdERlc2lnblRva2Vucy5jb2xvclN1cmZhY2V9ICFpbXBvcnRhbnQ7XG4gICAgZm9udC13ZWlnaHQ6ICR7dWlLaXREZXNpZ25Ub2tlbnMuZm9udFdlaWdodDYwMH07XG4gIH1cbmA7XG5cbmNvbnN0IFN1Ymxpc3RJdGVtID0gc3R5bGVkLmxpPHsgaXNBY3RpdmU6IGJvb2xlYW4gfT5gXG4gIGRpc3BsYXk6IGZsZXg7XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gIGFsaWduLXNlbGY6IHN0cmV0Y2g7XG5cbiAgJHsocHJvcHMpID0+IFtcbiAgICBwcm9wcy5pc0FjdGl2ZSAmJlxuICAgICAgY3NzYFxuICAgICAgICBib3JkZXItcmFkaXVzOiAke3VpS2l0RGVzaWduVG9rZW5zLmJvcmRlclJhZGl1czR9O1xuICAgICAgICBiYWNrZ3JvdW5kOiAke2FwcEtpdERlc2lnblRva2Vucy5iYWNrZ3JvdW5kQ29sb3JGb3JOYXZiYXJTdWJtZW51SXRlbVdoZW5BY3RpdmV9O1xuICAgICAgYCxcbiAgICAhcHJvcHMuaXNBY3RpdmUgJiZcbiAgICAgIGNzc2BcbiAgICAgICAgOmhvdmVyLFxuICAgICAgICA6Zm9jdXMtd2l0aGluIHtcbiAgICAgICAgICBjb2xvcjogJHt1aUtpdERlc2lnblRva2Vucy5jb2xvclN1cmZhY2V9O1xuICAgICAgICAgIGZvbnQtd2VpZ2h0OiAke3VpS2l0RGVzaWduVG9rZW5zLmZvbnRXZWlnaHQ2MDB9O1xuICAgICAgICAgIGJvcmRlci1yYWRpdXM6ICR7dWlLaXREZXNpZ25Ub2tlbnMuYm9yZGVyUmFkaXVzNH07XG4gICAgICAgICAgYmFja2dyb3VuZDogJHt1aUtpdERlc2lnblRva2Vucy5jb2xvclByaW1hcnk5NX07XG5cbiAgICAgICAgICBbZGF0YS1saW5rLWxldmVsPSd0ZXh0LWxpbmstc3VibGlzdCddIHtcbiAgICAgICAgICAgIC8qIGFkZGl0aW9uYWwgbGVmdCBwYWRkaW5nIG9uIGhvdmVyIGFuZCBmb2N1cyAqL1xuICAgICAgICAgICAgcGFkZGluZzogJHt1aUtpdERlc2lnblRva2Vucy5zcGFjaW5nMjV9XG4gICAgICAgICAgICAgICR7dWlLaXREZXNpZ25Ub2tlbnMuc3BhY2luZzI1fSAke3VpS2l0RGVzaWduVG9rZW5zLnNwYWNpbmcyNX1cbiAgICAgICAgICAgICAgY2FsYyhcbiAgICAgICAgICAgICAgICAke3VpS2l0RGVzaWduVG9rZW5zLnNwYWNpbmczMH0gKyAke3VpS2l0RGVzaWduVG9rZW5zLnNwYWNpbmcyMH1cbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIGAsXG4gIF19XG5gO1xuXG5jb25zdCBNZW51TGlzdEl0ZW0gPSBzdHlsZWQubGk8e1xuICBpc0FjdGl2ZTogYm9vbGVhbjtcbiAgaXNSb3V0ZUFjdGl2ZTogYm9vbGVhbjtcbiAgaXNDb2xsYXBzZWQ6IGJvb2xlYW47XG59PmBcbiAgaGVpZ2h0OiAke05BVkJBUi5pdGVtU2l6ZX07XG4gIHdpZHRoOiAke05BVkJBUi5pdGVtU2l6ZX07XG4gIG1hcmdpbjogMDtcbiAgYmFja2dyb3VuZDogJHthcHBLaXREZXNpZ25Ub2tlbnMuYmFja2dyb3VuZENvbG9yRm9yTmF2YmFyfTtcbiAgbGlzdC1zdHlsZTogbm9uZTtcbiAgY3Vyc29yOiBwb2ludGVyO1xuXG4gICR7SWNvbldyYXBwZXJ9IHtcbiAgICB3aWR0aDogYXV0bztcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICB9XG5cbiAgJHsocHJvcHMpID0+IFtcbiAgICBwcm9wcy5pc1JvdXRlQWN0aXZlICYmXG4gICAgICBjc3NgXG4gICAgICAgIGJhY2tncm91bmQ6ICR7YXBwS2l0RGVzaWduVG9rZW5zLmJhY2tncm91bmRDb2xvckZvck5hdmJhck1lbnVJdGVtV2hlbkFjdGl2ZX07XG4gICAgICAgIGJvcmRlci1yYWRpdXM6ICR7dWlLaXREZXNpZ25Ub2tlbnMuYm9yZGVyUmFkaXVzOH07XG4gICAgICBgLFxuICAgICFwcm9wcy5pc1JvdXRlQWN0aXZlICYmXG4gICAgICBjc3NgXG4gICAgICAgIDpob3ZlcixcbiAgICAgICAgOmZvY3VzLXdpdGhpbiB7XG4gICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogJHthcHBLaXREZXNpZ25Ub2tlbnMuYmFja2dyb3VuZENvbG9yRm9yTmF2YmFyTWVudUl0ZW1XaGVuSG92ZXJlZH07XG4gICAgICAgICAgYm9yZGVyLXJhZGl1czogJHt1aUtpdERlc2lnblRva2Vucy5ib3JkZXJSYWRpdXM4fTtcbiAgICAgICAgfVxuICAgICAgYCxcbiAgICBwcm9wcy5pc0FjdGl2ZSAmJlxuICAgICAgY3NzYFxuICAgICAgICAke0l0ZW1JY29uVGV4dH0ge1xuICAgICAgICAgIGp1c3RpZnktY29udGVudDogZmxleC1zdGFydDtcbiAgICAgICAgfVxuICAgICAgYCxcbiAgICAhcHJvcHMuaXNBY3RpdmUgJiZcbiAgICAgIGNzc2BcbiAgICAgICAgOmhvdmVyICR7SWNvbn0gPiBzdmcgKjpub3QoW2ZpbGw9J25vbmUnXSksXG4gICAgICAgIDpmb2N1cy13aXRoaW4gJHtJY29ufSA+IHN2ZyAqOm5vdChbZmlsbD0nbm9uZSddKSB7XG4gICAgICAgICAgZmlsbDogJHt1aUtpdERlc2lnblRva2Vucy5jb2xvclN1cmZhY2V9O1xuICAgICAgICB9XG5cbiAgICAgICAgOmhvdmVyIC4ke1RpdGxlfSwgOmZvY3VzLXdpdGhpbiAke1RpdGxlfSB7XG4gICAgICAgICAgY29sb3I6ICR7dWlLaXREZXNpZ25Ub2tlbnMuY29sb3JTdXJmYWNlfTtcbiAgICAgICAgfVxuICAgICAgYCxcbiAgICBwcm9wcy5pc0NvbGxhcHNlZCAmJlxuICAgICAgY3NzYFxuICAgICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gICAgICBgLFxuICBdfVxuXG4gIDpob3ZlciAke1RpdGxlfSxcbiAgOmZvY3VzLXdpdGhpbiAke1RpdGxlfSB7XG4gICAgbWFyZ2luLWxlZnQ6IGNhbGMoJHt1aUtpdERlc2lnblRva2Vucy5zcGFjaW5nMjV9ICsgMnB4KTtcbiAgfVxuXG4gIDpob3ZlciAke0ljb259LCA6Zm9jdXMtd2l0aGluICR7SWNvbn0ge1xuICAgIC8qIDEuMTYgaXMgcm91Z2hseSB0aGUgcmF0aW8gb2YgTkFWQkFSLmljb25TaXplSG92ZXIgdG8gTkFWQkFSLmljb25TaXplICovXG4gICAgdHJhbnNmb3JtOiBzY2FsZSgxLjIpO1xuICB9XG5cbiAgOmhvdmVyXG4gICAgJHtNZW51TGlzdH0uc3VibGlzdC1jb2xsYXBzZWRfX2FjdGl2ZSxcbiAgICA6aG92ZXJcbiAgICAke01lbnVMaXN0fS5zdWJsaXN0LWNvbGxhcHNlZF9fYWN0aXZlX19hYm92ZSxcbiAgICA6aG92ZXJcbiAgICAke01lbnVMaXN0fS5zdWJsaXN0LWV4cGFuZGVkX19hY3RpdmUsXG4gICAgOmZvY3VzLXdpdGhpblxuICAgICR7TWVudUxpc3R9LnN1Ymxpc3QtY29sbGFwc2VkX19hY3RpdmUsXG4gICAgOmZvY3VzLXdpdGhpblxuICAgICR7TWVudUxpc3R9LnN1Ymxpc3QtY29sbGFwc2VkX19hY3RpdmVfX2Fib3ZlLFxuICAgIDpmb2N1cy13aXRoaW5cbiAgICAke01lbnVMaXN0fS5zdWJsaXN0LWV4cGFuZGVkX19hY3RpdmUge1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgICBhbGlnbi1pdGVtczogZmxleC1zdGFydDtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAke3VpS2l0RGVzaWduVG9rZW5zLmNvbG9yU3VyZmFjZX07XG4gICAgbWluLWhlaWdodDogJHtOQVZCQVIuc3VibGlzdEl0ZW1NaW5IZWlnaHR9O1xuICAgIHdpZHRoOiAke05BVkJBUi5zdWJsaXN0V2lkdGh9O1xuICAgIGJvcmRlci1yYWRpdXM6ICR7dWlLaXREZXNpZ25Ub2tlbnMuYm9yZGVyUmFkaXVzOH07XG4gICAgLyogei1pbmRleCB2YWx1ZSBtdXN0IGJlIGhpZ2hlciB0aGFuIEFwcEJhcidzIHotaW5kZXggKi9cbiAgICB6LWluZGV4OiAyMDAwMTtcbiAgICBib3gtc2hhZG93OiAtMnB4IDRweCAyNXB4IDAgcmdiYSg4OSwgODksIDg5LCAwLjUpO1xuICB9XG5cbiAgOmhvdmVyXG4gICAgJHtNZW51TGlzdH0uc3VibGlzdC1jb2xsYXBzZWRfX2FjdGl2ZS5zdWJsaXN0LWNvbGxhcHNlZF9fZW1wdHksXG4gICAgOmhvdmVyXG4gICAgJHtNZW51TGlzdH0uc3VibGlzdC1jb2xsYXBzZWRfX2FjdGl2ZV9fYWJvdmUuc3VibGlzdC1jb2xsYXBzZWRfX2VtcHR5LFxuICAgIDpmb2N1cy13aXRoaW5cbiAgICAke01lbnVMaXN0fS5zdWJsaXN0LWNvbGxhcHNlZF9fYWN0aXZlLnN1Ymxpc3QtY29sbGFwc2VkX19lbXB0eSxcbiAgICA6Zm9jdXMtd2l0aGluXG4gICAgJHtNZW51TGlzdH0uc3VibGlzdC1jb2xsYXBzZWRfX2FjdGl2ZV9fYWJvdmUuc3VibGlzdC1jb2xsYXBzZWRfX2VtcHR5IHtcbiAgICB2aXNpYmlsaXR5OiBoaWRkZW47XG4gIH1cblxuICA6aG92ZXJcbiAgICAke01lbnVMaXN0fS5zdWJsaXN0LWV4cGFuZGVkX19hY3RpdmUsXG4gICAgOmZvY3VzLXdpdGhpblxuICAgICR7TWVudUxpc3R9LnN1Ymxpc3QtZXhwYW5kZWRfX2FjdGl2ZSB7XG4gICAgbGVmdDogJHtOQVZCQVIuc3VibGlzdEluZGVudGF0aW9uV2hlbkV4cGFuZGVkfTtcbiAgfVxuYDtcblxuZXhwb3J0IHtcbiAgRXhwYW5kZXIsXG4gIEV4cGFuZGVySWNvbixcbiAgRmFkZWQsXG4gIExlZnROYXZpZ2F0aW9uLFxuICBNZW51TGlzdCxcbiAgTWVudUxpc3RJdGVtLFxuICBTdWJsaXN0SXRlbSxcbiAgVGV4dExpbmtTdWJsaXN0V3JhcHBlcixcbiAgTmF2bGlua0NsaWNrYWJsZUNvbnRlbnQsXG59O1xuIl19 */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__$1
};
const MenuList = /*#__PURE__*/_styled("ul", process.env.NODE_ENV === "production" ? {
  target: "e1i568cv2"
} : {
  target: "e1i568cv2",
  label: "MenuList"
})(props => [props.level === 1 && listStyles, getSubmenuPositionBasedOnMenuItemPosition(props.isSubmenuAboveMenuItem, props.submenuVerticalPosition), props.level === 2 && sublistStyles,
// prevent glitchy behavior during the initial render when the submenu's vertical position is evaluated as 0
props.submenuVerticalPosition === 0 && _ref2, (props.isSublistActiveWhileIsMenuExpanded || props.isSublistCollapsedAndActive || props.isSublistCollapsedAndActiveAndAbove) && /*#__PURE__*/css("opacity:1;display:none;text-align:left;background-color:", designTokens.colorAccent20, ";::before{content:'';position:absolute;display:block;width:calc(", NAVBAR.sublistWidth, " + ", designTokens.spacing20, ");height:", NAVBAR.itemSize, ";left:calc(-1 * ", designTokens.spacing20, ");", getContainerPositionBasedOnMenuItemPosition(props.isSubmenuAboveMenuItem, props.isSublistActiveWhileIsMenuExpanded, props.isSublistActiveWhileIsMenuCollapsed), ";}" + (process.env.NODE_ENV === "production" ? "" : ";label:MenuList;"), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */")], " & .highlighted,& .highlighted ", Title, "{color:", designTokens.colorSurface, "!important;font-weight:", designTokens.fontWeight600, ";}" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const SublistItem = /*#__PURE__*/_styled("li", process.env.NODE_ENV === "production" ? {
  target: "e1i568cv1"
} : {
  target: "e1i568cv1",
  label: "SublistItem"
})("display:flex;align-items:center;align-self:stretch;", props => [props.isActive && /*#__PURE__*/css("border-radius:", designTokens.borderRadius4, ";background:", designTokens$1.backgroundColorForNavbarSubmenuItemWhenActive, ";" + (process.env.NODE_ENV === "production" ? "" : ";label:SublistItem;"), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"), !props.isActive && /*#__PURE__*/css(":hover,:focus-within{color:", designTokens.colorSurface, ";font-weight:", designTokens.fontWeight600, ";border-radius:", designTokens.borderRadius4, ";background:", designTokens.colorPrimary95, ";[data-link-level='text-link-sublist']{padding:", designTokens.spacing25, " ", designTokens.spacing25, " ", designTokens.spacing25, " calc(\n                ", designTokens.spacing30, " + ", designTokens.spacing20, "\n              );}}" + (process.env.NODE_ENV === "production" ? "" : ";label:SublistItem;"), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */")], ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
var _ref = process.env.NODE_ENV === "production" ? {
  name: "1azakc",
  styles: "text-align:center"
} : {
  name: "s1xgrm-MenuListItem",
  styles: "text-align:center;label:MenuListItem;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__$1
};
const MenuListItem = /*#__PURE__*/_styled("li", process.env.NODE_ENV === "production" ? {
  target: "e1i568cv0"
} : {
  target: "e1i568cv0",
  label: "MenuListItem"
})("height:", NAVBAR.itemSize, ";width:", NAVBAR.itemSize, ";margin:0;background:", designTokens$1.backgroundColorForNavbar, ";list-style:none;cursor:pointer;", IconWrapper, "{width:auto;display:flex;justify-content:center;}", props => [props.isRouteActive && /*#__PURE__*/css("background:", designTokens$1.backgroundColorForNavbarMenuItemWhenActive, ";border-radius:", designTokens.borderRadius8, ";" + (process.env.NODE_ENV === "production" ? "" : ";label:MenuListItem;"), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"), !props.isRouteActive && /*#__PURE__*/css(":hover,:focus-within{background-color:", designTokens$1.backgroundColorForNavbarMenuItemWhenHovered, ";border-radius:", designTokens.borderRadius8, ";}" + (process.env.NODE_ENV === "production" ? "" : ";label:MenuListItem;"), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"), props.isActive && /*#__PURE__*/css(ItemIconText, "{justify-content:flex-start;}" + (process.env.NODE_ENV === "production" ? "" : ";label:MenuListItem;"), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"), !props.isActive && /*#__PURE__*/css(":hover ", Icon, ">svg *:not([fill='none']),:focus-within ", Icon, ">svg *:not([fill='none']){fill:", designTokens.colorSurface, ";}:hover .", Title, ",:focus-within ", Title, "{color:", designTokens.colorSurface, ";}" + (process.env.NODE_ENV === "production" ? "" : ";label:MenuListItem;"), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"), props.isCollapsed && _ref], " :hover ", Title, ",:focus-within ", Title, "{margin-left:calc(", designTokens.spacing25, " + 2px);}:hover ", Icon, ",:focus-within ", Icon, "{transform:scale(1.2);}:hover ", MenuList, ".sublist-collapsed__active,:hover ", MenuList, ".sublist-collapsed__active__above,:hover ", MenuList, ".sublist-expanded__active,:focus-within ", MenuList, ".sublist-collapsed__active,:focus-within ", MenuList, ".sublist-collapsed__active__above,:focus-within ", MenuList, ".sublist-expanded__active{display:flex;flex-direction:column;align-items:flex-start;background-color:", designTokens.colorSurface, ";min-height:", NAVBAR.sublistItemMinHeight, ";width:", NAVBAR.sublistWidth, ";border-radius:", designTokens.borderRadius8, ";z-index:20001;box-shadow:-2px 4px 25px 0 rgba(89, 89, 89, 0.5);}:hover ", MenuList, ".sublist-collapsed__active.sublist-collapsed__empty,:hover ", MenuList, ".sublist-collapsed__active__above.sublist-collapsed__empty,:focus-within ", MenuList, ".sublist-collapsed__active.sublist-collapsed__empty,:focus-within ", MenuList, ".sublist-collapsed__active__above.sublist-collapsed__empty{visibility:hidden;}:hover ", MenuList, ".sublist-expanded__active,:focus-within ", MenuList, ".sublist-expanded__active{left:", NAVBAR.sublistIndentationWhenExpanded, ";}" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));

var _templateObject;
const visible = keyframes(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  from {\n    opacity: 0;\n  }\n  to {\n    opacity: 1;\n  }\n"])));
const FixedMenu = /*#__PURE__*/_styled("div", process.env.NODE_ENV === "production" ? {
  target: "e1meml8k9"
} : {
  target: "e1meml8k9",
  label: "FixedMenu"
})("position:relative;width:", NAVBAR.widthLeftNavigation, ";", MenuListItem, " ", ItemIconText, "{justify-content:center;display:flex;width:100%;}" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const ItemContent = /*#__PURE__*/_styled("div", process.env.NODE_ENV === "production" ? {
  target: "e1meml8k8"
} : {
  target: "e1meml8k8",
  label: "ItemContent"
})("color:", designTokens.colorNeutral, ";width:", NAVBAR.itemSize, ";position:relative;display:block;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const ScrollableMenu = /*#__PURE__*/_styled("div", process.env.NODE_ENV === "production" ? {
  target: "e1meml8k7"
} : {
  target: "e1meml8k7",
  label: "ScrollableMenu"
})("flex:1 1 0;overflow-x:hidden;overflow-y:hidden;padding:", designTokens.spacing30, " ", designTokens.spacing30, " ", NAVBAR.itemSize, ";width:", NAVBAR.widthLeftNavigation, ";box-sizing:border-box;:hover{overflow-y:scroll;}scrollbar-width:thin;scrollbar-color:", designTokens.colorPrimary40, " transparent;&::-webkit-scrollbar{width:8px;}&::-webkit-scrollbar-track{background:transparent;}&::-webkit-scrollbar-thumb{background-color:", designTokens.colorPrimary40, ";border-radius:", designTokens.borderRadius8, ";}" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const leftNavigationOpenStyles = /*#__PURE__*/css(".body__menu-open ", LeftNavigation, "{transition:", NAVBAR.leftNavigationTransition, ";width:", NAVBAR.widthLeftNavigationWhenExpanded, ";}.body__menu-open ", ScrollableMenu, "{width:", NAVBAR.widthLeftNavigationWhenExpanded, ";}.body__menu-open ", FixedMenu, "{width:", NAVBAR.widthLeftNavigationWhenExpanded, ";}.body__menu-open [data-link-level='text-link']{justify-content:start;}.body__menu-open ", MenuListItem, "{height:auto;min-height:", NAVBAR.itemSize, ";width:calc(\n      ", NAVBAR.sublistIndentationWhenExpanded, " - 2 *\n        ", designTokens.spacing25, "\n    );&.active{max-height:500px;transition:max-height 0.25s ease-in;", ItemIconText, "{position:relative;width:auto;margin-left:0;}}", Title, "{opacity:1;margin-left:", designTokens.spacing25, ";color:", designTokens.colorSurface, ";transition:", NAVBAR.leftNavigationTransition, ";animation:", visible, " 150ms cubic-bezier(1, 0, 0.58, 1);}}.body__menu-open ", ItemContent, "{width:100%;}" + (process.env.NODE_ENV === "production" ? "" : ";label:leftNavigationOpenStyles;"), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */");
const NavigationHeader = /*#__PURE__*/_styled("div", process.env.NODE_ENV === "production" ? {
  target: "e1meml8k6"
} : {
  target: "e1meml8k6",
  label: "NavigationHeader"
})("background-color:", designTokens$1.backgroundColorForNavbarHeader, ";color:", designTokens.colorSurface, ";display:flex;justify-content:center;flex-direction:row;align-items:center;padding:", designTokens.spacing30, ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const HeaderTitle = /*#__PURE__*/_styled("div", process.env.NODE_ENV === "production" ? {
  target: "e1meml8k5"
} : {
  target: "e1meml8k5",
  label: "HeaderTitle"
})("font-weight:600;margin-left:", designTokens.spacing20, ";transition:", NAVBAR.leftNavigationTransition, ";animation:", visible, " 150ms cubic-bezier(1, 0, 0.58, 1);" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const TooltipContainer = /*#__PURE__*/_styled("div", process.env.NODE_ENV === "production" ? {
  target: "e1meml8k4"
} : {
  target: "e1meml8k4",
  label: "TooltipContainer"
})("position:absolute;left:0;display:flex;align-items:center;justify-content:flex-start;height:", NAVBAR.itemSize, ";visibility:visible;", props => props.alignsAgainstBottom ? 'bottom' : 'top', ":-", NAVBAR.itemSize, ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const Tooltip = /*#__PURE__*/_styled("div", process.env.NODE_ENV === "production" ? {
  target: "e1meml8k3"
} : {
  target: "e1meml8k3",
  label: "Tooltip"
})("padding:", designTokens.spacing10, " calc(", designTokens.spacing20, " + ", designTokens.spacing10, ");display:-webkit-box;-webkit-line-clamp:2;-webkit-box-orient:vertical;border-radius:", designTokens.borderRadius4, ";background:", designTokens.colorAccent10, ";box-shadow:0 1px 2px 0 rgba(0, 0, 0, 0.25);font-size:", designTokens.fontSize20, ";line-height:", designTokens.lineHeight20, ";font-weight:", designTokens.fontWeight400, ";color:", designTokens.colorSurface, ";max-height:", NAVBAR.itemSize, ";visibility:inherit;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const TextLink = /*#__PURE__*/_styled("a", process.env.NODE_ENV === "production" ? {
  target: "e1meml8k2"
} : {
  target: "e1meml8k2",
  label: "TextLink"
})("color:", designTokens.colorNeutral, ";text-decoration:none;display:flex;padding:", designTokens.spacing25, ";align-items:center;justify-content:center;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const SupportMenu = /*#__PURE__*/_styled("div", process.env.NODE_ENV === "production" ? {
  target: "e1meml8k1"
} : {
  target: "e1meml8k1",
  label: "SupportMenu"
})("padding:", designTokens.spacing10, " ", designTokens.spacing30, " ", designTokens.spacing20, " ", designTokens.spacing30, ";height:calc(", NAVBAR.itemSize, " + ", designTokens.spacing20, ");" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const Text = /*#__PURE__*/_styled("div", process.env.NODE_ENV === "production" ? {
  target: "e1meml8k0"
} : {
  target: "e1meml8k0",
  label: "Text"
})("font-weight:", designTokens.fontWeight400, ";font-size:", designTokens.fontSize20, ";line-height:", designTokens.lineHeight20, ";width:100%;height:100%;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const getMenuItemLinkStyles = isSubmenuLink => [isSubmenuLink && /*#__PURE__*/css("display:-webkit-box;-webkit-line-clamp:2;-webkit-box-orient:vertical;color:", designTokens.colorSolid, ";font-weight:", designTokens.fontWeight600, ";text-decoration:none;flex:1;padding:", designTokens.spacing25, " ", designTokens.spacing25, " ", designTokens.spacing25, " ", designTokens.spacing30, ";transition:padding 150ms ease-out;" + (process.env.NODE_ENV === "production" ? "" : ";label:getMenuItemLinkStyles;"), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1haW4tbmF2YmFyLnN0eWxlcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFnTU8iLCJmaWxlIjoibWFpbi1uYXZiYXIuc3R5bGVzLnRzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY3NzLCBrZXlmcmFtZXMgfSBmcm9tICdAZW1vdGlvbi9yZWFjdCc7XG5pbXBvcnQgc3R5bGVkIGZyb20gJ0BlbW90aW9uL3N0eWxlZCc7XG5pbXBvcnQgeyBkZXNpZ25Ub2tlbnMgYXMgYXBwS2l0RGVzaWduVG9rZW5zIH0gZnJvbSAnQGNvbW1lcmNldG9vbHMtZnJvbnRlbmQvYXBwbGljYXRpb24tY29tcG9uZW50cyc7XG5pbXBvcnQgeyBkZXNpZ25Ub2tlbnMgYXMgdWlLaXREZXNpZ25Ub2tlbnMgfSBmcm9tICdAY29tbWVyY2V0b29scy11aWtpdC9kZXNpZ24tc3lzdGVtJztcbmltcG9ydCB7IE5BVkJBUiB9IGZyb20gJy4uLy4uL2NvbnN0YW50cyc7XG5pbXBvcnQgeyBNZW51TGlzdEl0ZW0sIExlZnROYXZpZ2F0aW9uIH0gZnJvbSAnLi9tZW51LWl0ZW1zLnN0eWxlcyc7XG5pbXBvcnQgeyBJdGVtSWNvblRleHQsIFRpdGxlIH0gZnJvbSAnLi9zaGFyZWQuc3R5bGVzJztcblxuY29uc3QgdmlzaWJsZSA9IGtleWZyYW1lc2BcbiAgZnJvbSB7XG4gICAgb3BhY2l0eTogMDtcbiAgfVxuICB0byB7XG4gICAgb3BhY2l0eTogMTtcbiAgfVxuYDtcblxuY29uc3QgRml4ZWRNZW51ID0gc3R5bGVkLmRpdmBcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuICB3aWR0aDogJHtOQVZCQVIud2lkdGhMZWZ0TmF2aWdhdGlvbn07XG5cbiAgJHtNZW51TGlzdEl0ZW19ICR7SXRlbUljb25UZXh0fSB7XG4gICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gICAgZGlzcGxheTogZmxleDtcbiAgICB3aWR0aDogMTAwJTtcbiAgfVxuYDtcblxuY29uc3QgSXRlbUNvbnRlbnQgPSBzdHlsZWQuZGl2YFxuICBjb2xvcjogJHt1aUtpdERlc2lnblRva2Vucy5jb2xvck5ldXRyYWx9O1xuICB3aWR0aDogJHtOQVZCQVIuaXRlbVNpemV9O1xuICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gIGRpc3BsYXk6IGJsb2NrO1xuYDtcblxuY29uc3QgU2Nyb2xsYWJsZU1lbnUgPSBzdHlsZWQuZGl2YFxuICBmbGV4OiAxIDEgMDtcbiAgb3ZlcmZsb3cteDogaGlkZGVuO1xuICBvdmVyZmxvdy15OiBoaWRkZW47XG4gIHBhZGRpbmc6ICR7dWlLaXREZXNpZ25Ub2tlbnMuc3BhY2luZzMwfSAke3VpS2l0RGVzaWduVG9rZW5zLnNwYWNpbmczMH1cbiAgICAke05BVkJBUi5pdGVtU2l6ZX07XG4gIHdpZHRoOiAke05BVkJBUi53aWR0aExlZnROYXZpZ2F0aW9ufTtcbiAgYm94LXNpemluZzogYm9yZGVyLWJveDtcblxuICA6aG92ZXIge1xuICAgIG92ZXJmbG93LXk6IHNjcm9sbDtcbiAgfVxuXG4gIC8qIEZvciBGaXJlZm94ICovXG4gIHNjcm9sbGJhci13aWR0aDogdGhpbjtcbiAgc2Nyb2xsYmFyLWNvbG9yOiAke3VpS2l0RGVzaWduVG9rZW5zLmNvbG9yUHJpbWFyeTQwfSB0cmFuc3BhcmVudDtcblxuICAvKiBGb3IgV2ViS2l0LWJhc2VkIGJyb3dzZXJzIGUuZy4gQ2hyb21lLCBTYWZhcmkgKi9cbiAgJjo6LXdlYmtpdC1zY3JvbGxiYXIge1xuICAgIHdpZHRoOiA4cHg7XG4gIH1cblxuICAmOjotd2Via2l0LXNjcm9sbGJhci10cmFjayB7XG4gICAgYmFja2dyb3VuZDogdHJhbnNwYXJlbnQ7XG4gIH1cblxuICAmOjotd2Via2l0LXNjcm9sbGJhci10aHVtYiB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogJHt1aUtpdERlc2lnblRva2Vucy5jb2xvclByaW1hcnk0MH07XG4gICAgYm9yZGVyLXJhZGl1czogJHt1aUtpdERlc2lnblRva2Vucy5ib3JkZXJSYWRpdXM4fTtcbiAgfVxuYDtcblxuY29uc3QgbGVmdE5hdmlnYXRpb25PcGVuU3R5bGVzID0gY3NzYFxuICAuYm9keV9fbWVudS1vcGVuICR7TGVmdE5hdmlnYXRpb259IHtcbiAgICB0cmFuc2l0aW9uOiAke05BVkJBUi5sZWZ0TmF2aWdhdGlvblRyYW5zaXRpb259O1xuICAgIHdpZHRoOiAke05BVkJBUi53aWR0aExlZnROYXZpZ2F0aW9uV2hlbkV4cGFuZGVkfTtcbiAgfVxuXG4gIC5ib2R5X19tZW51LW9wZW4gJHtTY3JvbGxhYmxlTWVudX0ge1xuICAgIHdpZHRoOiAke05BVkJBUi53aWR0aExlZnROYXZpZ2F0aW9uV2hlbkV4cGFuZGVkfTtcbiAgfVxuXG4gIC5ib2R5X19tZW51LW9wZW4gJHtGaXhlZE1lbnV9IHtcbiAgICB3aWR0aDogJHtOQVZCQVIud2lkdGhMZWZ0TmF2aWdhdGlvbldoZW5FeHBhbmRlZH07XG4gIH1cblxuICAuYm9keV9fbWVudS1vcGVuIFtkYXRhLWxpbmstbGV2ZWw9J3RleHQtbGluayddIHtcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IHN0YXJ0O1xuICB9XG5cbiAgLmJvZHlfX21lbnUtb3BlbiAke01lbnVMaXN0SXRlbX0ge1xuICAgIGhlaWdodDogYXV0bztcbiAgICBtaW4taGVpZ2h0OiAke05BVkJBUi5pdGVtU2l6ZX07XG4gICAgd2lkdGg6IGNhbGMoXG4gICAgICAke05BVkJBUi5zdWJsaXN0SW5kZW50YXRpb25XaGVuRXhwYW5kZWR9IC0gMiAqXG4gICAgICAgICR7dWlLaXREZXNpZ25Ub2tlbnMuc3BhY2luZzI1fVxuICAgICk7XG5cbiAgICAmLmFjdGl2ZSB7XG4gICAgICBtYXgtaGVpZ2h0OiA1MDBweDtcbiAgICAgIHRyYW5zaXRpb246IG1heC1oZWlnaHQgMC4yNXMgZWFzZS1pbjtcblxuICAgICAgJHtJdGVtSWNvblRleHR9IHtcbiAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgICAgICB3aWR0aDogYXV0bztcbiAgICAgICAgbWFyZ2luLWxlZnQ6IDA7XG4gICAgICB9XG4gICAgfVxuXG4gICAgJHtUaXRsZX0ge1xuICAgICAgb3BhY2l0eTogMTtcbiAgICAgIG1hcmdpbi1sZWZ0OiAke3VpS2l0RGVzaWduVG9rZW5zLnNwYWNpbmcyNX07XG4gICAgICBjb2xvcjogJHt1aUtpdERlc2lnblRva2Vucy5jb2xvclN1cmZhY2V9O1xuICAgICAgdHJhbnNpdGlvbjogJHtOQVZCQVIubGVmdE5hdmlnYXRpb25UcmFuc2l0aW9ufTtcbiAgICAgIGFuaW1hdGlvbjogJHt2aXNpYmxlfSAxNTBtcyBjdWJpYy1iZXppZXIoMSwgMCwgMC41OCwgMSk7XG4gICAgfVxuICB9XG5cbiAgLmJvZHlfX21lbnUtb3BlbiAke0l0ZW1Db250ZW50fSB7XG4gICAgd2lkdGg6IDEwMCU7XG4gIH1cbmA7XG5cbmNvbnN0IE5hdmlnYXRpb25IZWFkZXIgPSBzdHlsZWQuZGl2YFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAke2FwcEtpdERlc2lnblRva2Vucy5iYWNrZ3JvdW5kQ29sb3JGb3JOYXZiYXJIZWFkZXJ9O1xuICBjb2xvcjogJHt1aUtpdERlc2lnblRva2Vucy5jb2xvclN1cmZhY2V9O1xuICBkaXNwbGF5OiBmbGV4O1xuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgZmxleC1kaXJlY3Rpb246IHJvdztcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgcGFkZGluZzogJHt1aUtpdERlc2lnblRva2Vucy5zcGFjaW5nMzB9O1xuYDtcblxuY29uc3QgSGVhZGVyVGl0bGUgPSBzdHlsZWQuZGl2YFxuICBmb250LXdlaWdodDogNjAwO1xuICBtYXJnaW4tbGVmdDogJHt1aUtpdERlc2lnblRva2Vucy5zcGFjaW5nMjB9O1xuICB0cmFuc2l0aW9uOiAke05BVkJBUi5sZWZ0TmF2aWdhdGlvblRyYW5zaXRpb259O1xuICBhbmltYXRpb246ICR7dmlzaWJsZX0gMTUwbXMgY3ViaWMtYmV6aWVyKDEsIDAsIDAuNTgsIDEpO1xuYDtcblxuY29uc3QgVG9vbHRpcENvbnRhaW5lciA9IHN0eWxlZC5kaXY8e1xuICBhbGlnbnNBZ2FpbnN0Qm90dG9tOiBib29sZWFuO1xufT5gXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgbGVmdDogMDtcbiAgZGlzcGxheTogZmxleDtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAganVzdGlmeS1jb250ZW50OiBmbGV4LXN0YXJ0O1xuICBoZWlnaHQ6ICR7TkFWQkFSLml0ZW1TaXplfTtcbiAgdmlzaWJpbGl0eTogdmlzaWJsZTtcblxuICAkeyhwcm9wcykgPT5cbiAgICBwcm9wcy5hbGlnbnNBZ2FpbnN0Qm90dG9tID8gJ2JvdHRvbScgOiAndG9wJ306IC0ke05BVkJBUi5pdGVtU2l6ZX07XG5gO1xuXG5jb25zdCBUb29sdGlwID0gc3R5bGVkLmRpdmBcbiAgcGFkZGluZzogJHt1aUtpdERlc2lnblRva2Vucy5zcGFjaW5nMTB9XG4gICAgY2FsYygke3VpS2l0RGVzaWduVG9rZW5zLnNwYWNpbmcyMH0gKyAke3VpS2l0RGVzaWduVG9rZW5zLnNwYWNpbmcxMH0pO1xuICBkaXNwbGF5OiAtd2Via2l0LWJveDtcbiAgLXdlYmtpdC1saW5lLWNsYW1wOiAyO1xuICAtd2Via2l0LWJveC1vcmllbnQ6IHZlcnRpY2FsO1xuICBib3JkZXItcmFkaXVzOiAke3VpS2l0RGVzaWduVG9rZW5zLmJvcmRlclJhZGl1czR9O1xuICBiYWNrZ3JvdW5kOiAke3VpS2l0RGVzaWduVG9rZW5zLmNvbG9yQWNjZW50MTB9O1xuICBib3gtc2hhZG93OiAwIDFweCAycHggMCByZ2JhKDAsIDAsIDAsIDAuMjUpO1xuICBmb250LXNpemU6ICR7dWlLaXREZXNpZ25Ub2tlbnMuZm9udFNpemUyMH07XG4gIGxpbmUtaGVpZ2h0OiAke3VpS2l0RGVzaWduVG9rZW5zLmxpbmVIZWlnaHQyMH07XG4gIGZvbnQtd2VpZ2h0OiAke3VpS2l0RGVzaWduVG9rZW5zLmZvbnRXZWlnaHQ0MDB9O1xuICBjb2xvcjogJHt1aUtpdERlc2lnblRva2Vucy5jb2xvclN1cmZhY2V9O1xuICBtYXgtaGVpZ2h0OiAke05BVkJBUi5pdGVtU2l6ZX07XG4gIHZpc2liaWxpdHk6IGluaGVyaXQ7XG5gO1xuXG5jb25zdCBUZXh0TGluayA9IHN0eWxlZC5hYFxuICBjb2xvcjogJHt1aUtpdERlc2lnblRva2Vucy5jb2xvck5ldXRyYWx9O1xuICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIHBhZGRpbmc6ICR7dWlLaXREZXNpZ25Ub2tlbnMuc3BhY2luZzI1fTtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG5gO1xuXG5jb25zdCBTdXBwb3J0TWVudSA9IHN0eWxlZC5kaXZgXG4gIHBhZGRpbmc6ICR7dWlLaXREZXNpZ25Ub2tlbnMuc3BhY2luZzEwfSAke3VpS2l0RGVzaWduVG9rZW5zLnNwYWNpbmczMH1cbiAgICAke3VpS2l0RGVzaWduVG9rZW5zLnNwYWNpbmcyMH0gJHt1aUtpdERlc2lnblRva2Vucy5zcGFjaW5nMzB9O1xuICBoZWlnaHQ6IGNhbGMoJHtOQVZCQVIuaXRlbVNpemV9ICsgJHt1aUtpdERlc2lnblRva2Vucy5zcGFjaW5nMjB9KTtcbmA7XG5cbmNvbnN0IFRleHQgPSBzdHlsZWQuZGl2YFxuICBmb250LXdlaWdodDogJHt1aUtpdERlc2lnblRva2Vucy5mb250V2VpZ2h0NDAwfTtcbiAgZm9udC1zaXplOiAke3VpS2l0RGVzaWduVG9rZW5zLmZvbnRTaXplMjB9O1xuICBsaW5lLWhlaWdodDogJHt1aUtpdERlc2lnblRva2Vucy5saW5lSGVpZ2h0MjB9O1xuICB3aWR0aDogMTAwJTtcbiAgaGVpZ2h0OiAxMDAlO1xuYDtcblxuY29uc3QgZ2V0TWVudUl0ZW1MaW5rU3R5bGVzID0gKGlzU3VibWVudUxpbms6IGJvb2xlYW4pID0+IFtcbiAgaXNTdWJtZW51TGluayAmJlxuICAgIGNzc2BcbiAgICAgIGRpc3BsYXk6IC13ZWJraXQtYm94O1xuICAgICAgLXdlYmtpdC1saW5lLWNsYW1wOiAyO1xuICAgICAgLXdlYmtpdC1ib3gtb3JpZW50OiB2ZXJ0aWNhbDtcbiAgICAgIGNvbG9yOiAke3VpS2l0RGVzaWduVG9rZW5zLmNvbG9yU29saWR9O1xuICAgICAgZm9udC13ZWlnaHQ6ICR7dWlLaXREZXNpZ25Ub2tlbnMuZm9udFdlaWdodDYwMH07XG4gICAgICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XG4gICAgICBmbGV4OiAxO1xuICAgICAgcGFkZGluZzogJHt1aUtpdERlc2lnblRva2Vucy5zcGFjaW5nMjV9ICR7dWlLaXREZXNpZ25Ub2tlbnMuc3BhY2luZzI1fVxuICAgICAgICAke3VpS2l0RGVzaWduVG9rZW5zLnNwYWNpbmcyNX0gJHt1aUtpdERlc2lnblRva2Vucy5zcGFjaW5nMzB9O1xuICAgICAgdHJhbnNpdGlvbjogcGFkZGluZyAxNTBtcyBlYXNlLW91dDtcbiAgICBgLFxuICAhaXNTdWJtZW51TGluayAmJlxuICAgIGNzc2BcbiAgICAgIGNvbG9yOiAke3VpS2l0RGVzaWduVG9rZW5zLmNvbG9yTmV1dHJhbH07XG4gICAgICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XG4gICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgcGFkZGluZzogJHt1aUtpdERlc2lnblRva2Vucy5zcGFjaW5nMjV9O1xuICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICAgIGAsXG5dO1xuXG5leHBvcnQge1xuICBnZXRNZW51SXRlbUxpbmtTdHlsZXMsXG4gIGxlZnROYXZpZ2F0aW9uT3BlblN0eWxlcyxcbiAgLy8gc3R5bGVkIGNvbXBvbmVudHNcbiAgRml4ZWRNZW51LFxuICBIZWFkZXJUaXRsZSxcbiAgSXRlbUNvbnRlbnQsXG4gIE5hdmlnYXRpb25IZWFkZXIsXG4gIFNjcm9sbGFibGVNZW51LFxuICBTdXBwb3J0TWVudSxcbiAgVGV4dCxcbiAgVGV4dExpbmssXG4gIFRpdGxlLFxuICBUb29sdGlwLFxuICBUb29sdGlwQ29udGFpbmVyLFxufTtcbiJdfQ== */"), !isSubmenuLink && /*#__PURE__*/css("color:", designTokens.colorNeutral, ";text-decoration:none;display:flex;padding:", designTokens.spacing25, ";align-items:center;justify-content:center;" + (process.env.NODE_ENV === "production" ? "" : ";label:getMenuItemLinkStyles;"), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */")];

const _excluded = ["icon"];
function ownKeys$2(e, r) { var t = _Object$keys(e); if (_Object$getOwnPropertySymbols) { var o = _Object$getOwnPropertySymbols(e); r && (o = _filterInstanceProperty(o).call(o, function (r) { return _Object$getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread$2(e) { for (var r = 1; r < arguments.length; r++) { var _context3, _context4; var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? _forEachInstanceProperty(_context3 = ownKeys$2(Object(t), !0)).call(_context3, function (r) { _defineProperty(e, r, t[r]); }) : _Object$getOwnPropertyDescriptors ? _Object$defineProperties(e, _Object$getOwnPropertyDescriptors(t)) : _forEachInstanceProperty(_context4 = ownKeys$2(Object(t))).call(_context4, function (r) { _Object$defineProperty(e, r, _Object$getOwnPropertyDescriptor(t, r)); }); } return e; }
const HeartIcon = /*#__PURE__*/lazy(() => import('./heart-86f780f3.esm.js'));
const PaperclipIcon = /*#__PURE__*/lazy(() => import('./paperclip-a820ee87.esm.js'));
const PluginIcon = /*#__PURE__*/lazy(() => import('./plugin-c7bf9e53.esm.js'));
const RocketIcon = /*#__PURE__*/lazy(() => import('./rocket-bacf24be.esm.js'));
const StarIcon = /*#__PURE__*/lazy(() => import('./star-af90a9c6.esm.js'));
const ConnectedSquareIcon = /*#__PURE__*/lazy(() => import('./connected-square-fe6a790f.esm.js'));
const WorldIcon = /*#__PURE__*/lazy(() => import('./world-523efd61.esm.js'));
const TreeStructureIcon = /*#__PURE__*/lazy(() => import('./tree-structure-ca0498a0.esm.js'));
const UserFilledIcon = /*#__PURE__*/lazy(() => import('./user-filled-61d8a81b.esm.js'));
const SpeedometerIcon = /*#__PURE__*/lazy(() => import('./speedometer-4c8e0b9c.esm.js'));
const TagMultiIcon = /*#__PURE__*/lazy(() => import('./tag-multi-4c2742de.esm.js'));
const CartIcon = /*#__PURE__*/lazy(() => import('./cart-bb491ca1.esm.js'));
const BoxIcon = /*#__PURE__*/lazy(() => import('./box-9cf180c1.esm.js'));
const GearIcon = /*#__PURE__*/lazy(() => import('./gear-ee90ba83.esm.js'));
const ListWithSearchIcon = /*#__PURE__*/lazy(() => import('./list-with-search-d2901e34.esm.js'));
// The icon is expected to be the `svg` document as a string.
// For backwards compatibility purposes, we still support the legacy "icon name",
// which we then map to one of the pre-defined icons.
// Eventually, we want to get rid of this "switch" logic.
const IconSwitcher = _ref => {
  let icon = _ref.icon,
    iconProps = _objectWithoutProperties(_ref, _excluded);
  if (_includesInstanceProperty(icon).call(icon, '<svg')) {
    return jsx(InlineSvg, _objectSpread$2({
      data: icon
    }, iconProps));
  }
  // Backwards compatibility for apps using the "icon name".
  switch (icon) {
    // Legacy application icons
    // TODO: To be removed once MC applications icons updates are published
    case 'TreeStructureIcon':
      return jsx(TreeStructureIcon, _objectSpread$2({}, iconProps));
    case 'UserFilledIcon':
      return jsx(UserFilledIcon, _objectSpread$2({}, iconProps));
    case 'SpeedometerIcon':
      return jsx(SpeedometerIcon, _objectSpread$2({}, iconProps));
    case 'TagMultiIcon':
      return jsx(TagMultiIcon, _objectSpread$2({}, iconProps));
    case 'CartIcon':
      return jsx(CartIcon, _objectSpread$2({}, iconProps));
    case 'BoxIcon':
      return jsx(BoxIcon, _objectSpread$2({}, iconProps));
    case 'GearIcon':
      return jsx(GearIcon, _objectSpread$2({}, iconProps));
    case 'ListWithSearchIcon':
      return jsx(ListWithSearchIcon, _objectSpread$2({}, iconProps));

    // Custom application icons set
    case 'HeartIcon':
      return jsx(HeartIcon, _objectSpread$2({}, iconProps));
    case 'PaperclipIcon':
      return jsx(PaperclipIcon, _objectSpread$2({}, iconProps));
    case 'PluginIcon':
      return jsx(PluginIcon, _objectSpread$2({}, iconProps));
    case 'RocketIcon':
      return jsx(RocketIcon, _objectSpread$2({}, iconProps));
    case 'StarIcon':
      return jsx(StarIcon, _objectSpread$2({}, iconProps));
    case 'ConnectedSquareIcon':
      return jsx(ConnectedSquareIcon, _objectSpread$2({}, iconProps));
    // For backwards compatibility
    case 'WorldIcon':
      return jsx(WorldIcon, _objectSpread$2({}, iconProps));
    default:
      return jsx("img", {
        src: MissingImageSvg,
        alt: "missing icon"
      });
  }
};
IconSwitcher.propTypes = process.env.NODE_ENV !== "production" ? {
  icon: _pt.string.isRequired
} : {};
IconSwitcher.displayName = 'IconSwitcher';
const getIcon = _ref2 => {
  let isMenuOpen = _ref2.isMenuOpen;
  const Icon = isMenuOpen ? SidebarCollapseIcon : SidebarExpandIcon;
  return jsx(Icon, {
    color: "surface",
    size: "big"
  });
};
const MenuExpander = props => {
  return jsx(Expander, {
    isVisible: props.isVisible,
    children: jsx(ExpanderIcon, {
      onClick: props.onClick,
      onKeyDown: e => {
        if (e.key === 'Enter') {
          props.onClick(e);
        }
      },
      tabIndex: 0,
      "data-testid": "menu-expander",
      children: getIcon(props)
    })
  }, "expander");
};
MenuExpander.propTypes = process.env.NODE_ENV !== "production" ? {
  isVisible: _pt.bool.isRequired,
  onClick: _pt.func.isRequired,
  isMenuOpen: _pt.bool.isRequired
} : {};
MenuExpander.displayName = 'MenuExpander';
const MenuGroup = /*#__PURE__*/forwardRef((props, ref) => {
  if (props.isExpanded && (props.level === 2 && !props.hasSubmenu || props.level === 2 && !props.isActive)) {
    return null;
  }
  const isSublistActiveWhileIsMenuExpanded = Boolean(props.level === 2 && props.isActive && props.isExpanded);
  const isSublistActiveWhileIsMenuCollapsed = Boolean(props.level === 2 && props.isActive && !props.isExpanded);
  return jsx(MenuList, {
    ref: ref && props.level === 2 ? ref : null,
    level: props.level,
    id: "group-".concat(props.id),
    "data-testid": "group-".concat(props.id),
    role: "menu",
    "aria-expanded": isSublistActiveWhileIsMenuExpanded || isSublistActiveWhileIsMenuCollapsed,
    className: classnames({
      'sublist-expanded__active': isSublistActiveWhileIsMenuExpanded
    }, {
      'sublist-collapsed__empty': isSublistActiveWhileIsMenuCollapsed && !props.hasSubmenu
    }, {
      'sublist-collapsed__active': isSublistActiveWhileIsMenuCollapsed && !props.isSubmenuAboveMenuItem
    }, {
      'sublist-collapsed__active__above': isSublistActiveWhileIsMenuCollapsed && props.isSubmenuAboveMenuItem
    }),
    isSublistActiveWhileIsMenuExpanded: isSublistActiveWhileIsMenuExpanded,
    isSublistActiveWhileIsMenuCollapsed: isSublistActiveWhileIsMenuCollapsed,
    isSublistCollapsedAndActive: isSublistActiveWhileIsMenuCollapsed && !props.isSubmenuAboveMenuItem,
    isSublistCollapsedAndActiveAndAbove: Boolean(isSublistActiveWhileIsMenuCollapsed && props.isSubmenuAboveMenuItem),
    isSubmenuAboveMenuItem: props.isSubmenuAboveMenuItem,
    submenuVerticalPosition: props.submenuVerticalPosition,
    children: props.children
  });
});
MenuGroup.displayName = 'MenuGroup';
const MenuItem$1 = props => {
  return jsx(MenuListItem, {
    role: "menuitem",
    onClick: props.onClick,
    onMouseEnter: props.onMouseEnter,
    onMouseLeave: props.onMouseLeave,
    onFocus: props.onMouseEnter,
    onBlur: props.onMouseLeave,
    "data-menuitem": props.identifier,
    className: classnames({
      active: props.isActive
    }),
    isActive: props.isActive,
    isRouteActive: Boolean(props.isMainMenuRouteActive),
    isCollapsed: !props.isMenuOpen,
    children: jsx(ItemContent, {
      children: props.children
    })
  });
};
MenuItem$1.propTypes = process.env.NODE_ENV !== "production" ? {
  hasSubmenu: _pt.bool.isRequired,
  isActive: _pt.bool.isRequired,
  isMainMenuRouteActive: _pt.bool,
  isMenuOpen: _pt.bool.isRequired,
  onClick: _pt.func.isRequired,
  onMouseEnter: _pt.oneOfType([_pt.func, _pt.func]),
  onMouseLeave: _pt.oneOfType([_pt.func, _pt.func]),
  children: _pt.node.isRequired,
  identifier: _pt.string
} : {};
MenuItem$1.displayName = 'MenuItem';
const menuItemLinkDefaultProps = {
  exactMatch: false
};
const NavLinkWrapper = props => {
  const Wrapper = props.isSubmenuLink ? TextLinkSublistWrapper : Fragment$1;
  return jsx(Wrapper, {
    children: props.children
  });
};
NavLinkWrapper.propTypes = process.env.NODE_ENV !== "production" ? {
  linkTo: _pt.string,
  exactMatch: _pt.bool.isRequired,
  children: _pt.node.isRequired,
  onClick: _pt.func,
  useFullRedirectsForLinks: _pt.bool,
  isSubmenuLink: _pt.bool
} : {};
const NavLinkClickableContentWrapper = props => {
  const Wrapper = props.isSubmenuLink ? NavlinkClickableContent : Fragment$1;
  return jsx(Wrapper, {
    children: props.children
  });
};
NavLinkClickableContentWrapper.propTypes = process.env.NODE_ENV !== "production" ? {
  linkTo: _pt.string,
  exactMatch: _pt.bool.isRequired,
  children: _pt.node.isRequired,
  onClick: _pt.func,
  useFullRedirectsForLinks: _pt.bool,
  isSubmenuLink: _pt.bool
} : {};
const MenuItemLink = props => {
  const redirectTo = targetUrl => location.replace(targetUrl);
  if (props.linkTo) {
    const linkLevel = props.isSubmenuLink ? 'text-link-sublist' : 'text-link';
    return jsx(NavLinkWrapper, _objectSpread$2(_objectSpread$2({}, props), {}, {
      children: jsx(NavLink, {
        to: props.linkTo,
        exact: props.exactMatch,
        activeClassName: "highlighted",
        "data-link-level": linkLevel,
        css: getMenuItemLinkStyles(Boolean(props.isSubmenuLink)),
        onClick: event => {
          if (props.linkTo && props.useFullRedirectsForLinks) {
            event.preventDefault();
            redirectTo(props.linkTo);
          } else if (props.onClick) {
            event.persist();
            props.onClick(event);
          }
        },
        children: jsx(NavLinkClickableContentWrapper, _objectSpread$2(_objectSpread$2({}, props), {}, {
          children: props.children
        }))
      })
    }));
  }
  return jsx(Fragment, {
    children: props.children
  });
};
MenuItemLink.propTypes = process.env.NODE_ENV !== "production" ? {
  linkTo: _pt.string,
  exactMatch: _pt.bool.isRequired,
  children: _pt.node.isRequired,
  onClick: _pt.func,
  useFullRedirectsForLinks: _pt.bool,
  isSubmenuLink: _pt.bool
} : {};
MenuItemLink.displayName = 'MenuItemLink';
MenuItemLink.defaultProps = menuItemLinkDefaultProps;
const isEveryMenuVisibilitySetToHidden = (menuVisibilities, namesOfMenuVisibilities) => _Array$isArray(namesOfMenuVisibilities) && namesOfMenuVisibilities.length > 0 && _everyInstanceProperty(namesOfMenuVisibilities).call(namesOfMenuVisibilities, nameOfMenuVisibility => menuVisibilities && menuVisibilities[nameOfMenuVisibility] === true);
const restrictedMenuItemDefaultProps = {
  permissions: []
};
function isLongLivedFlag(flag) {
  return typeof (flag === null || flag === void 0 ? void 0 : flag.value) === 'boolean';
}
const RestrictedMenuItem = props => {
  // NOTE: Custom application are activated/deactivated while their
  // visibility is not controlled via a visibiility overwrite.
  const flagVariation = useFlagVariation(props.featureToggle);
  if (isEveryMenuVisibilitySetToHidden(props.menuVisibilities, props.namesOfMenuVisibilities)) return null;
  const permissionsWrapper = _Array$isArray(props.permissions) && props.permissions.length > 0 || _Array$isArray(props.dataFences) && props.dataFences.length > 0 ? jsx(RestrictedByPermissions, {
    permissions: props.permissions,
    actionRights: props.actionRights,
    dataFences: props.dataFences,
    selectDataFenceData: demandedDataFence => {
      switch (demandedDataFence.type) {
        case 'store':
          return demandedDataFence.actualDataFenceValues;
        default:
          return null;
      }
    }
    // Always check that some of the given permissions match.
    ,
    shouldMatchSomePermissions: true,
    projectPermissions: props.projectPermissions,
    children: props.children
  }) : jsx(Fragment, {
    children: props.children
  });
  if (props.featureToggle) {
    // A regular short-lived feature toggle
    if (flagVariation === true) return permissionsWrapper;
    // A long-lived feature toggle with `{ value: boolean, string: reason }`
    if (isLongLivedFlag(flagVariation) && flagVariation.value === true) return permissionsWrapper;
    return null;
  }
  return permissionsWrapper;
};
RestrictedMenuItem.propTypes = process.env.NODE_ENV !== "production" ? {
  featureToggle: _pt.string,
  namesOfMenuVisibilities: _pt.arrayOf(_pt.string),
  projectPermissions: _pt.shape({
    permissions: _pt.oneOfType([_pt.any, _pt.oneOf([null])]),
    actionRights: _pt.oneOfType([_pt.any, _pt.oneOf([null])]),
    dataFences: _pt.oneOfType([_pt.any, _pt.oneOf([null])])
  }).isRequired,
  menuVisibilities: _pt.oneOfType([_pt.any, _pt.oneOf([null])]),
  keyOfMenuItem: _pt.string.isRequired,
  permissions: _pt.arrayOf(_pt.string).isRequired,
  actionRights: _pt.arrayOf(_pt.any),
  dataFences: _pt.arrayOf(_pt.any),
  children: _pt.node.isRequired
} : {};
RestrictedMenuItem.displayName = 'RestrictedMenuItem';
RestrictedMenuItem.defaultProps = restrictedMenuItemDefaultProps;
const MenuLabel = props => {
  var _context;
  const localizedLabel = _findInstanceProperty(_context = props.labelAllLocales).call(_context, loc => {
    var _context2;
    return _startsWithInstanceProperty(_context2 = props.applicationLocale).call(_context2, loc.locale);
  });
  if (localizedLabel) return jsx(Fragment, {
    children: localizedLabel.value
  });
  if (props.defaultLabel) return jsx(Fragment, {
    children: props.defaultLabel
  });
  return jsx(Fragment, {
    children: NO_VALUE_FALLBACK
  });
};
MenuLabel.propTypes = {
  labelAllLocales: _pt.arrayOf(_pt.any).isRequired,
  defaultLabel: _pt.string,
  applicationLocale: _pt.string.isRequired
};
const NavBarLayout$1 = /*#__PURE__*/forwardRef((props, ref) => jsxs(Fragment, {
  children: [jsx(Global, {
    styles: leftNavigationOpenStyles
  }), jsx(LeftNavigation, {
    ref: ref,
    "data-testid": "left-navigation",
    children: props.children
  })]
}));
NavBarLayout$1.displayName = 'NavBarLayout';
const ItemContainer = props => {
  return jsxs(ItemIconText, {
    children: [jsx(IconWrapper, {
      children: jsx(Icon, {
        className: "icon",
        children: jsx(IconSwitcher, {
          icon: props.icon,
          size: "scale"
        })
      })
    }), props.isMenuOpen ? jsx(Title, {
      children: jsx(MenuLabel, {
        labelAllLocales: props.labelAllLocales,
        defaultLabel: props.defaultLabel,
        applicationLocale: props.applicationLocale
      })
    }) : null]
  });
};
ItemContainer.propTypes = process.env.NODE_ENV !== "production" ? {
  labelAllLocales: _pt.arrayOf(_pt.any).isRequired,
  defaultLabel: _pt.string,
  applicationLocale: _pt.string.isRequired,
  icon: _pt.string.isRequired,
  isMenuOpen: _pt.bool
} : {};
ItemContainer.displayName = 'ItemContainer';

var messages = defineMessages({
  'NavBar.MCSupport.title': {
    id: 'NavBar.MCSupport.title',
    defaultMessage: 'Support'
  }
});

function _EMOTION_STRINGIFIED_CSS_ERROR__() { return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop)."; }
const NavBarLayout = props => {
  return jsx("nav", {
    "aria-busy": true,
    css: /*#__PURE__*/css("display:flex;flex-direction:column;height:100%;width:", props.isExpanded ? '256px' : '80px', ";" + (process.env.NODE_ENV === "production" ? "" : ";label:NavBarLayout;"), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5hdmJhci1za2VsZXRvbi5zdHlsZXMudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQXFCYyIsImZpbGUiOiJuYXZiYXItc2tlbGV0b24uc3R5bGVzLnRzeCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0eXBlIHsgUmVhY3ROb2RlIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgY3NzIH0gZnJvbSAnQGVtb3Rpb24vcmVhY3QnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnO1xuaW1wb3J0IHsgZGVzaWduVG9rZW5zIGFzIGFwcEtpdERlc2lnblRva2VucyB9IGZyb20gJ0Bjb21tZXJjZXRvb2xzLWZyb250ZW5kL2FwcGxpY2F0aW9uLWNvbXBvbmVudHMnO1xuaW1wb3J0IHsgZGVzaWduVG9rZW5zIGFzIHVpS2l0RGVzaWduVG9rZW5zIH0gZnJvbSAnQGNvbW1lcmNldG9vbHMtdWlraXQvZGVzaWduLXN5c3RlbSc7XG5pbXBvcnQgeyBESU1FTlNJT05TIH0gZnJvbSAnLi4vLi4vY29uc3RhbnRzJztcblxudHlwZSBUTmF2QmFyU2tlbGV0b25Qcm9wcyA9IHtcbiAgaXNFeHBhbmRlZDogYm9vbGVhbjtcbn07XG5cbnR5cGUgVE1lbnVJdGVtUHJvcHMgPSB7XG4gIGNvbnRlbnRXaWR0aDogJ3dpZGUnIHwgJ25hcnJvdyc7XG59O1xuXG5jb25zdCBOYXZCYXJMYXlvdXQgPSAoXG4gIHByb3BzOiBUTmF2QmFyU2tlbGV0b25Qcm9wcyAmIHsgY2hpbGRyZW46IFJlYWN0Tm9kZSB9XG4pID0+IHtcbiAgcmV0dXJuIChcbiAgICA8bmF2XG4gICAgICBhcmlhLWJ1c3k9e3RydWV9XG4gICAgICBjc3M9e2Nzc2BcbiAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgICAgICAgaGVpZ2h0OiAxMDAlO1xuICAgICAgICB3aWR0aDogJHtwcm9wcy5pc0V4cGFuZGVkID8gJzI1NnB4JyA6ICc4MHB4J307XG4gICAgICBgfVxuICAgID5cbiAgICAgIHtwcm9wcy5jaGlsZHJlbn1cbiAgICA8L25hdj5cbiAgKTtcbn07XG5cbmNvbnN0IE5hdkJhckhlYWRlciA9IHN0eWxlZC5kaXZgXG4gIGRpc3BsYXk6IGZsZXg7XG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICBhbGlnbi1pdGVtczogY2VudGVyO1xuICBwYWRkaW5nOiAke3VpS2l0RGVzaWduVG9rZW5zLnNwYWNpbmczMH07XG4gIGhlaWdodDogJHtESU1FTlNJT05TLmhlYWRlcn07XG4gIGJhY2tncm91bmQ6ICR7YXBwS2l0RGVzaWduVG9rZW5zLmJhY2tncm91bmRDb2xvckZvck5hdmJhckhlYWRlcn07XG5gO1xuXG5jb25zdCBOYXZCYXJCb2R5ID0gc3R5bGVkLmRpdmBcbiAgZGlzcGxheTogZmxleDtcbiAgZmxleDogMTtcbiAgcGFkZGluZzogJHt1aUtpdERlc2lnblRva2Vucy5zcGFjaW5nMzB9O1xuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICBhbGlnbi1pdGVtczogZmxleC1zdGFydDtcbiAgZ2FwOiAke3VpS2l0RGVzaWduVG9rZW5zLnNwYWNpbmc0MH07XG4gIGZsZXgtc2hyaW5rOiAwO1xuICBiYWNrZ3JvdW5kOiAke2FwcEtpdERlc2lnblRva2Vucy5iYWNrZ3JvdW5kQ29sb3JGb3JOYXZiYXJTa2VsZXRvbn07XG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcblxuICAvLyBUT0RPOiByZW1vdmUgY29tcGxldGVseSBhcyBwYXJ0IG9mIHRoZSByZWNvbG91cmluZyByb2xsb3V0IGNsZWFudXAgcHJvY2Vzc1xuICAvLyBib3R0b20gZ3JhZGllbnRcbiAgJjo6YWZ0ZXIge1xuICAgIGNvbnRlbnQ6ICcnO1xuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICBib3R0b206IDA7XG4gICAgaGVpZ2h0OiAzNnB4O1xuICAgIHdpZHRoOiBjYWxjKDEwMCUgLSAyICogJHt1aUtpdERlc2lnblRva2Vucy5zcGFjaW5nMzB9KTtcbiAgICBiYWNrZ3JvdW5kOiBsaW5lYXItZ3JhZGllbnQoMTgwZGVnLCByZ2JhKDAsIDE1MywgMTM1LCAwKSAwJSwgIzAwOTk4NyAxMDAlKTtcbiAgICB2aXNpYmlsaXR5OiAke2FwcEtpdERlc2lnblRva2Vucy52aXNpYmlsaXR5Rm9yTmF2YmFyRmFkZWR9O1xuICB9XG5gO1xuXG5jb25zdCBOYXZCYXJGb290ZXIgPSBzdHlsZWQuZGl2PFROYXZCYXJTa2VsZXRvblByb3BzPmBcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuICBkaXNwbGF5OiBmbGV4O1xuICB3aWR0aDogMTAwJTtcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgYmFja2dyb3VuZDogJHthcHBLaXREZXNpZ25Ub2tlbnMuYmFja2dyb3VuZENvbG9yRm9yTmF2YmFyU2tlbGV0b25Gb290ZXJ9O1xuICBwYWRkaW5nOiAke3VpS2l0RGVzaWduVG9rZW5zLnNwYWNpbmczMH1cbiAgICAkeyhwcm9wcykgPT4gKHByb3BzLmlzRXhwYW5kZWQgPyAnNThweCcgOiAnMHB4Jyl9O1xuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcblxuICAvLyBkaXZpZGVyXG4gICY6OmJlZm9yZSB7XG4gICAgY29udGVudDogJyc7XG4gICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgIHRvcDogMDtcbiAgICBoZWlnaHQ6IDFweDtcbiAgICB3aWR0aDogY2FsYygxMDAlIC0gMiAqICR7dWlLaXREZXNpZ25Ub2tlbnMuc3BhY2luZzMwfSk7XG4gICAgYmFja2dyb3VuZDogcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjUpO1xuICB9XG5gO1xuXG5jb25zdCBFeHBhbmRJY29uID0gc3R5bGVkLmRpdmBcbiAgd2lkdGg6IDQwcHg7XG4gIGhlaWdodDogNDBweDtcbiAgYm9yZGVyLXJhZGl1czogJHt1aUtpdERlc2lnblRva2Vucy5ib3JkZXJSYWRpdXM0fTtcbiAgYmFja2dyb3VuZDogcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjIpO1xuYDtcblxuY29uc3QgTWVudUl0ZW1Db250YWluZXIgPSBzdHlsZWQuZGl2PFRNZW51SXRlbVByb3BzICYgVE5hdkJhclNrZWxldG9uUHJvcHM+YFxuICBkaXNwbGF5OiBmbGV4O1xuICBhbGlnbi1pdGVtczogY2VudGVyO1xuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgZ2FwOiAxMnB4O1xuICBwYWRkaW5nOiAkeyhwcm9wcykgPT5cbiAgICBwcm9wcy5jb250ZW50V2lkdGggPT09ICd3aWRlJyB8fCAhcHJvcHMuaXNFeHBhbmRlZCA/ICcxMnB4JyA6ICcxMnB4IDI4cHgnfTtcbiAgaGVpZ2h0OiA0OHB4O1xuYDtcblxuY29uc3QgTWVudUl0ZW1JY29uID0gc3R5bGVkLmRpdmBcbiAgd2lkdGg6IDI0cHg7XG4gIGhlaWdodDogMjRweDtcbiAgYm9yZGVyLXJhZGl1czogJHt1aUtpdERlc2lnblRva2Vucy5ib3JkZXJSYWRpdXM0fTtcbiAgYmFja2dyb3VuZDogcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjIpO1xuYDtcblxuY29uc3QgTWVudUl0ZW1UaXRsZSA9IHN0eWxlZC5kaXZgXG4gIGJvcmRlci1yYWRpdXM6ICR7dWlLaXREZXNpZ25Ub2tlbnMuYm9yZGVyUmFkaXVzNH07XG4gIGJhY2tncm91bmQ6IHJnYmEoMjU1LCAyNTUsIDI1NSwgMC4yKTtcbiAgZmxleDogMTtcbiAgaGVpZ2h0OiAxOHB4O1xuYDtcblxuY29uc3QgTWVudUl0ZW1Hcm91cCA9IHN0eWxlZC5kaXZgXG4gIHdpZHRoOiAxMDAlO1xuYDtcblxuZXhwb3J0IHtcbiAgTmF2QmFyTGF5b3V0LFxuICBOYXZCYXJIZWFkZXIsXG4gIE5hdkJhckJvZHksXG4gIE5hdkJhckZvb3RlcixcbiAgRXhwYW5kSWNvbixcbiAgTWVudUl0ZW1Db250YWluZXIsXG4gIE1lbnVJdGVtSWNvbixcbiAgTWVudUl0ZW1UaXRsZSxcbiAgTWVudUl0ZW1Hcm91cCxcbiAgdHlwZSBUTmF2QmFyU2tlbGV0b25Qcm9wcyxcbiAgdHlwZSBUTWVudUl0ZW1Qcm9wcyxcbn07XG4iXX0= */"),
    children: props.children
  });
};
NavBarLayout.propTypes = process.env.NODE_ENV !== "production" ? {
  isExpanded: _pt.bool.isRequired
} : {};
const NavBarHeader = /*#__PURE__*/_styled("div", process.env.NODE_ENV === "production" ? {
  target: "epfjvz37"
} : {
  target: "epfjvz37",
  label: "NavBarHeader"
})("display:flex;justify-content:center;align-items:center;padding:", designTokens.spacing30, ";height:", DIMENSIONS.header, ";background:", designTokens$1.backgroundColorForNavbarHeader, ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5hdmJhci1za2VsZXRvbi5zdHlsZXMudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQWlDK0IiLCJmaWxlIjoibmF2YmFyLXNrZWxldG9uLnN0eWxlcy50c3giLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7IFJlYWN0Tm9kZSB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGNzcyB9IGZyb20gJ0BlbW90aW9uL3JlYWN0JztcbmltcG9ydCBzdHlsZWQgZnJvbSAnQGVtb3Rpb24vc3R5bGVkJztcbmltcG9ydCB7IGRlc2lnblRva2VucyBhcyBhcHBLaXREZXNpZ25Ub2tlbnMgfSBmcm9tICdAY29tbWVyY2V0b29scy1mcm9udGVuZC9hcHBsaWNhdGlvbi1jb21wb25lbnRzJztcbmltcG9ydCB7IGRlc2lnblRva2VucyBhcyB1aUtpdERlc2lnblRva2VucyB9IGZyb20gJ0Bjb21tZXJjZXRvb2xzLXVpa2l0L2Rlc2lnbi1zeXN0ZW0nO1xuaW1wb3J0IHsgRElNRU5TSU9OUyB9IGZyb20gJy4uLy4uL2NvbnN0YW50cyc7XG5cbnR5cGUgVE5hdkJhclNrZWxldG9uUHJvcHMgPSB7XG4gIGlzRXhwYW5kZWQ6IGJvb2xlYW47XG59O1xuXG50eXBlIFRNZW51SXRlbVByb3BzID0ge1xuICBjb250ZW50V2lkdGg6ICd3aWRlJyB8ICduYXJyb3cnO1xufTtcblxuY29uc3QgTmF2QmFyTGF5b3V0ID0gKFxuICBwcm9wczogVE5hdkJhclNrZWxldG9uUHJvcHMgJiB7IGNoaWxkcmVuOiBSZWFjdE5vZGUgfVxuKSA9PiB7XG4gIHJldHVybiAoXG4gICAgPG5hdlxuICAgICAgYXJpYS1idXN5PXt0cnVlfVxuICAgICAgY3NzPXtjc3NgXG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gICAgICAgIGhlaWdodDogMTAwJTtcbiAgICAgICAgd2lkdGg6ICR7cHJvcHMuaXNFeHBhbmRlZCA/ICcyNTZweCcgOiAnODBweCd9O1xuICAgICAgYH1cbiAgICA+XG4gICAgICB7cHJvcHMuY2hpbGRyZW59XG4gICAgPC9uYXY+XG4gICk7XG59O1xuXG5jb25zdCBOYXZCYXJIZWFkZXIgPSBzdHlsZWQuZGl2YFxuICBkaXNwbGF5OiBmbGV4O1xuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgcGFkZGluZzogJHt1aUtpdERlc2lnblRva2Vucy5zcGFjaW5nMzB9O1xuICBoZWlnaHQ6ICR7RElNRU5TSU9OUy5oZWFkZXJ9O1xuICBiYWNrZ3JvdW5kOiAke2FwcEtpdERlc2lnblRva2Vucy5iYWNrZ3JvdW5kQ29sb3JGb3JOYXZiYXJIZWFkZXJ9O1xuYDtcblxuY29uc3QgTmF2QmFyQm9keSA9IHN0eWxlZC5kaXZgXG4gIGRpc3BsYXk6IGZsZXg7XG4gIGZsZXg6IDE7XG4gIHBhZGRpbmc6ICR7dWlLaXREZXNpZ25Ub2tlbnMuc3BhY2luZzMwfTtcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgYWxpZ24taXRlbXM6IGZsZXgtc3RhcnQ7XG4gIGdhcDogJHt1aUtpdERlc2lnblRva2Vucy5zcGFjaW5nNDB9O1xuICBmbGV4LXNocmluazogMDtcbiAgYmFja2dyb3VuZDogJHthcHBLaXREZXNpZ25Ub2tlbnMuYmFja2dyb3VuZENvbG9yRm9yTmF2YmFyU2tlbGV0b259O1xuICBwb3NpdGlvbjogcmVsYXRpdmU7XG5cbiAgLy8gVE9ETzogcmVtb3ZlIGNvbXBsZXRlbHkgYXMgcGFydCBvZiB0aGUgcmVjb2xvdXJpbmcgcm9sbG91dCBjbGVhbnVwIHByb2Nlc3NcbiAgLy8gYm90dG9tIGdyYWRpZW50XG4gICY6OmFmdGVyIHtcbiAgICBjb250ZW50OiAnJztcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgYm90dG9tOiAwO1xuICAgIGhlaWdodDogMzZweDtcbiAgICB3aWR0aDogY2FsYygxMDAlIC0gMiAqICR7dWlLaXREZXNpZ25Ub2tlbnMuc3BhY2luZzMwfSk7XG4gICAgYmFja2dyb3VuZDogbGluZWFyLWdyYWRpZW50KDE4MGRlZywgcmdiYSgwLCAxNTMsIDEzNSwgMCkgMCUsICMwMDk5ODcgMTAwJSk7XG4gICAgdmlzaWJpbGl0eTogJHthcHBLaXREZXNpZ25Ub2tlbnMudmlzaWJpbGl0eUZvck5hdmJhckZhZGVkfTtcbiAgfVxuYDtcblxuY29uc3QgTmF2QmFyRm9vdGVyID0gc3R5bGVkLmRpdjxUTmF2QmFyU2tlbGV0b25Qcm9wcz5gXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgZGlzcGxheTogZmxleDtcbiAgd2lkdGg6IDEwMCU7XG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gIGJhY2tncm91bmQ6ICR7YXBwS2l0RGVzaWduVG9rZW5zLmJhY2tncm91bmRDb2xvckZvck5hdmJhclNrZWxldG9uRm9vdGVyfTtcbiAgcGFkZGluZzogJHt1aUtpdERlc2lnblRva2Vucy5zcGFjaW5nMzB9XG4gICAgJHsocHJvcHMpID0+IChwcm9wcy5pc0V4cGFuZGVkID8gJzU4cHgnIDogJzBweCcpfTtcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG5cbiAgLy8gZGl2aWRlclxuICAmOjpiZWZvcmUge1xuICAgIGNvbnRlbnQ6ICcnO1xuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICB0b3A6IDA7XG4gICAgaGVpZ2h0OiAxcHg7XG4gICAgd2lkdGg6IGNhbGMoMTAwJSAtIDIgKiAke3VpS2l0RGVzaWduVG9rZW5zLnNwYWNpbmczMH0pO1xuICAgIGJhY2tncm91bmQ6IHJnYmEoMjU1LCAyNTUsIDI1NSwgMC41KTtcbiAgfVxuYDtcblxuY29uc3QgRXhwYW5kSWNvbiA9IHN0eWxlZC5kaXZgXG4gIHdpZHRoOiA0MHB4O1xuICBoZWlnaHQ6IDQwcHg7XG4gIGJvcmRlci1yYWRpdXM6ICR7dWlLaXREZXNpZ25Ub2tlbnMuYm9yZGVyUmFkaXVzNH07XG4gIGJhY2tncm91bmQ6IHJnYmEoMjU1LCAyNTUsIDI1NSwgMC4yKTtcbmA7XG5cbmNvbnN0IE1lbnVJdGVtQ29udGFpbmVyID0gc3R5bGVkLmRpdjxUTWVudUl0ZW1Qcm9wcyAmIFROYXZCYXJTa2VsZXRvblByb3BzPmBcbiAgZGlzcGxheTogZmxleDtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gIGdhcDogMTJweDtcbiAgcGFkZGluZzogJHsocHJvcHMpID0+XG4gICAgcHJvcHMuY29udGVudFdpZHRoID09PSAnd2lkZScgfHwgIXByb3BzLmlzRXhwYW5kZWQgPyAnMTJweCcgOiAnMTJweCAyOHB4J307XG4gIGhlaWdodDogNDhweDtcbmA7XG5cbmNvbnN0IE1lbnVJdGVtSWNvbiA9IHN0eWxlZC5kaXZgXG4gIHdpZHRoOiAyNHB4O1xuICBoZWlnaHQ6IDI0cHg7XG4gIGJvcmRlci1yYWRpdXM6ICR7dWlLaXREZXNpZ25Ub2tlbnMuYm9yZGVyUmFkaXVzNH07XG4gIGJhY2tncm91bmQ6IHJnYmEoMjU1LCAyNTUsIDI1NSwgMC4yKTtcbmA7XG5cbmNvbnN0IE1lbnVJdGVtVGl0bGUgPSBzdHlsZWQuZGl2YFxuICBib3JkZXItcmFkaXVzOiAke3VpS2l0RGVzaWduVG9rZW5zLmJvcmRlclJhZGl1czR9O1xuICBiYWNrZ3JvdW5kOiByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMik7XG4gIGZsZXg6IDE7XG4gIGhlaWdodDogMThweDtcbmA7XG5cbmNvbnN0IE1lbnVJdGVtR3JvdXAgPSBzdHlsZWQuZGl2YFxuICB3aWR0aDogMTAwJTtcbmA7XG5cbmV4cG9ydCB7XG4gIE5hdkJhckxheW91dCxcbiAgTmF2QmFySGVhZGVyLFxuICBOYXZCYXJCb2R5LFxuICBOYXZCYXJGb290ZXIsXG4gIEV4cGFuZEljb24sXG4gIE1lbnVJdGVtQ29udGFpbmVyLFxuICBNZW51SXRlbUljb24sXG4gIE1lbnVJdGVtVGl0bGUsXG4gIE1lbnVJdGVtR3JvdXAsXG4gIHR5cGUgVE5hdkJhclNrZWxldG9uUHJvcHMsXG4gIHR5cGUgVE1lbnVJdGVtUHJvcHMsXG59O1xuIl19 */"));
const NavBarBody = /*#__PURE__*/_styled("div", process.env.NODE_ENV === "production" ? {
  target: "epfjvz36"
} : {
  target: "epfjvz36",
  label: "NavBarBody"
})("display:flex;flex:1;padding:", designTokens.spacing30, ";flex-direction:column;align-items:flex-start;gap:", designTokens.spacing40, ";flex-shrink:0;background:", designTokens$1.backgroundColorForNavbarSkeleton, ";position:relative;&::after{content:'';position:absolute;bottom:0;height:36px;width:calc(100% - 2 * ", designTokens.spacing30, ");background:linear-gradient(180deg, rgba(0, 153, 135, 0) 0%, #009987 100%);visibility:", designTokens$1.visibilityForNavbarFaded, ";}" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5hdmJhci1za2VsZXRvbi5zdHlsZXMudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQTBDNkIiLCJmaWxlIjoibmF2YmFyLXNrZWxldG9uLnN0eWxlcy50c3giLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7IFJlYWN0Tm9kZSB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGNzcyB9IGZyb20gJ0BlbW90aW9uL3JlYWN0JztcbmltcG9ydCBzdHlsZWQgZnJvbSAnQGVtb3Rpb24vc3R5bGVkJztcbmltcG9ydCB7IGRlc2lnblRva2VucyBhcyBhcHBLaXREZXNpZ25Ub2tlbnMgfSBmcm9tICdAY29tbWVyY2V0b29scy1mcm9udGVuZC9hcHBsaWNhdGlvbi1jb21wb25lbnRzJztcbmltcG9ydCB7IGRlc2lnblRva2VucyBhcyB1aUtpdERlc2lnblRva2VucyB9IGZyb20gJ0Bjb21tZXJjZXRvb2xzLXVpa2l0L2Rlc2lnbi1zeXN0ZW0nO1xuaW1wb3J0IHsgRElNRU5TSU9OUyB9IGZyb20gJy4uLy4uL2NvbnN0YW50cyc7XG5cbnR5cGUgVE5hdkJhclNrZWxldG9uUHJvcHMgPSB7XG4gIGlzRXhwYW5kZWQ6IGJvb2xlYW47XG59O1xuXG50eXBlIFRNZW51SXRlbVByb3BzID0ge1xuICBjb250ZW50V2lkdGg6ICd3aWRlJyB8ICduYXJyb3cnO1xufTtcblxuY29uc3QgTmF2QmFyTGF5b3V0ID0gKFxuICBwcm9wczogVE5hdkJhclNrZWxldG9uUHJvcHMgJiB7IGNoaWxkcmVuOiBSZWFjdE5vZGUgfVxuKSA9PiB7XG4gIHJldHVybiAoXG4gICAgPG5hdlxuICAgICAgYXJpYS1idXN5PXt0cnVlfVxuICAgICAgY3NzPXtjc3NgXG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gICAgICAgIGhlaWdodDogMTAwJTtcbiAgICAgICAgd2lkdGg6ICR7cHJvcHMuaXNFeHBhbmRlZCA/ICcyNTZweCcgOiAnODBweCd9O1xuICAgICAgYH1cbiAgICA+XG4gICAgICB7cHJvcHMuY2hpbGRyZW59XG4gICAgPC9uYXY+XG4gICk7XG59O1xuXG5jb25zdCBOYXZCYXJIZWFkZXIgPSBzdHlsZWQuZGl2YFxuICBkaXNwbGF5OiBmbGV4O1xuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgcGFkZGluZzogJHt1aUtpdERlc2lnblRva2Vucy5zcGFjaW5nMzB9O1xuICBoZWlnaHQ6ICR7RElNRU5TSU9OUy5oZWFkZXJ9O1xuICBiYWNrZ3JvdW5kOiAke2FwcEtpdERlc2lnblRva2Vucy5iYWNrZ3JvdW5kQ29sb3JGb3JOYXZiYXJIZWFkZXJ9O1xuYDtcblxuY29uc3QgTmF2QmFyQm9keSA9IHN0eWxlZC5kaXZgXG4gIGRpc3BsYXk6IGZsZXg7XG4gIGZsZXg6IDE7XG4gIHBhZGRpbmc6ICR7dWlLaXREZXNpZ25Ub2tlbnMuc3BhY2luZzMwfTtcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgYWxpZ24taXRlbXM6IGZsZXgtc3RhcnQ7XG4gIGdhcDogJHt1aUtpdERlc2lnblRva2Vucy5zcGFjaW5nNDB9O1xuICBmbGV4LXNocmluazogMDtcbiAgYmFja2dyb3VuZDogJHthcHBLaXREZXNpZ25Ub2tlbnMuYmFja2dyb3VuZENvbG9yRm9yTmF2YmFyU2tlbGV0b259O1xuICBwb3NpdGlvbjogcmVsYXRpdmU7XG5cbiAgLy8gVE9ETzogcmVtb3ZlIGNvbXBsZXRlbHkgYXMgcGFydCBvZiB0aGUgcmVjb2xvdXJpbmcgcm9sbG91dCBjbGVhbnVwIHByb2Nlc3NcbiAgLy8gYm90dG9tIGdyYWRpZW50XG4gICY6OmFmdGVyIHtcbiAgICBjb250ZW50OiAnJztcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgYm90dG9tOiAwO1xuICAgIGhlaWdodDogMzZweDtcbiAgICB3aWR0aDogY2FsYygxMDAlIC0gMiAqICR7dWlLaXREZXNpZ25Ub2tlbnMuc3BhY2luZzMwfSk7XG4gICAgYmFja2dyb3VuZDogbGluZWFyLWdyYWRpZW50KDE4MGRlZywgcmdiYSgwLCAxNTMsIDEzNSwgMCkgMCUsICMwMDk5ODcgMTAwJSk7XG4gICAgdmlzaWJpbGl0eTogJHthcHBLaXREZXNpZ25Ub2tlbnMudmlzaWJpbGl0eUZvck5hdmJhckZhZGVkfTtcbiAgfVxuYDtcblxuY29uc3QgTmF2QmFyRm9vdGVyID0gc3R5bGVkLmRpdjxUTmF2QmFyU2tlbGV0b25Qcm9wcz5gXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgZGlzcGxheTogZmxleDtcbiAgd2lkdGg6IDEwMCU7XG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gIGJhY2tncm91bmQ6ICR7YXBwS2l0RGVzaWduVG9rZW5zLmJhY2tncm91bmRDb2xvckZvck5hdmJhclNrZWxldG9uRm9vdGVyfTtcbiAgcGFkZGluZzogJHt1aUtpdERlc2lnblRva2Vucy5zcGFjaW5nMzB9XG4gICAgJHsocHJvcHMpID0+IChwcm9wcy5pc0V4cGFuZGVkID8gJzU4cHgnIDogJzBweCcpfTtcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG5cbiAgLy8gZGl2aWRlclxuICAmOjpiZWZvcmUge1xuICAgIGNvbnRlbnQ6ICcnO1xuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICB0b3A6IDA7XG4gICAgaGVpZ2h0OiAxcHg7XG4gICAgd2lkdGg6IGNhbGMoMTAwJSAtIDIgKiAke3VpS2l0RGVzaWduVG9rZW5zLnNwYWNpbmczMH0pO1xuICAgIGJhY2tncm91bmQ6IHJnYmEoMjU1LCAyNTUsIDI1NSwgMC41KTtcbiAgfVxuYDtcblxuY29uc3QgRXhwYW5kSWNvbiA9IHN0eWxlZC5kaXZgXG4gIHdpZHRoOiA0MHB4O1xuICBoZWlnaHQ6IDQwcHg7XG4gIGJvcmRlci1yYWRpdXM6ICR7dWlLaXREZXNpZ25Ub2tlbnMuYm9yZGVyUmFkaXVzNH07XG4gIGJhY2tncm91bmQ6IHJnYmEoMjU1LCAyNTUsIDI1NSwgMC4yKTtcbmA7XG5cbmNvbnN0IE1lbnVJdGVtQ29udGFpbmVyID0gc3R5bGVkLmRpdjxUTWVudUl0ZW1Qcm9wcyAmIFROYXZCYXJTa2VsZXRvblByb3BzPmBcbiAgZGlzcGxheTogZmxleDtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gIGdhcDogMTJweDtcbiAgcGFkZGluZzogJHsocHJvcHMpID0+XG4gICAgcHJvcHMuY29udGVudFdpZHRoID09PSAnd2lkZScgfHwgIXByb3BzLmlzRXhwYW5kZWQgPyAnMTJweCcgOiAnMTJweCAyOHB4J307XG4gIGhlaWdodDogNDhweDtcbmA7XG5cbmNvbnN0IE1lbnVJdGVtSWNvbiA9IHN0eWxlZC5kaXZgXG4gIHdpZHRoOiAyNHB4O1xuICBoZWlnaHQ6IDI0cHg7XG4gIGJvcmRlci1yYWRpdXM6ICR7dWlLaXREZXNpZ25Ub2tlbnMuYm9yZGVyUmFkaXVzNH07XG4gIGJhY2tncm91bmQ6IHJnYmEoMjU1LCAyNTUsIDI1NSwgMC4yKTtcbmA7XG5cbmNvbnN0IE1lbnVJdGVtVGl0bGUgPSBzdHlsZWQuZGl2YFxuICBib3JkZXItcmFkaXVzOiAke3VpS2l0RGVzaWduVG9rZW5zLmJvcmRlclJhZGl1czR9O1xuICBiYWNrZ3JvdW5kOiByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMik7XG4gIGZsZXg6IDE7XG4gIGhlaWdodDogMThweDtcbmA7XG5cbmNvbnN0IE1lbnVJdGVtR3JvdXAgPSBzdHlsZWQuZGl2YFxuICB3aWR0aDogMTAwJTtcbmA7XG5cbmV4cG9ydCB7XG4gIE5hdkJhckxheW91dCxcbiAgTmF2QmFySGVhZGVyLFxuICBOYXZCYXJCb2R5LFxuICBOYXZCYXJGb290ZXIsXG4gIEV4cGFuZEljb24sXG4gIE1lbnVJdGVtQ29udGFpbmVyLFxuICBNZW51SXRlbUljb24sXG4gIE1lbnVJdGVtVGl0bGUsXG4gIE1lbnVJdGVtR3JvdXAsXG4gIHR5cGUgVE5hdkJhclNrZWxldG9uUHJvcHMsXG4gIHR5cGUgVE1lbnVJdGVtUHJvcHMsXG59O1xuIl19 */"));
const NavBarFooter = /*#__PURE__*/_styled("div", process.env.NODE_ENV === "production" ? {
  target: "epfjvz35"
} : {
  target: "epfjvz35",
  label: "NavBarFooter"
})("position:relative;display:flex;width:100%;flex-direction:column;background:", designTokens$1.backgroundColorForNavbarSkeletonFooter, ";padding:", designTokens.spacing30, " ", props => props.isExpanded ? '58px' : '0px', ";justify-content:center;align-items:center;&::before{content:'';position:absolute;top:0;height:1px;width:calc(100% - 2 * ", designTokens.spacing30, ");background:rgba(255, 255, 255, 0.5);}" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5hdmJhci1za2VsZXRvbi5zdHlsZXMudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQWtFcUQiLCJmaWxlIjoibmF2YmFyLXNrZWxldG9uLnN0eWxlcy50c3giLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7IFJlYWN0Tm9kZSB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGNzcyB9IGZyb20gJ0BlbW90aW9uL3JlYWN0JztcbmltcG9ydCBzdHlsZWQgZnJvbSAnQGVtb3Rpb24vc3R5bGVkJztcbmltcG9ydCB7IGRlc2lnblRva2VucyBhcyBhcHBLaXREZXNpZ25Ub2tlbnMgfSBmcm9tICdAY29tbWVyY2V0b29scy1mcm9udGVuZC9hcHBsaWNhdGlvbi1jb21wb25lbnRzJztcbmltcG9ydCB7IGRlc2lnblRva2VucyBhcyB1aUtpdERlc2lnblRva2VucyB9IGZyb20gJ0Bjb21tZXJjZXRvb2xzLXVpa2l0L2Rlc2lnbi1zeXN0ZW0nO1xuaW1wb3J0IHsgRElNRU5TSU9OUyB9IGZyb20gJy4uLy4uL2NvbnN0YW50cyc7XG5cbnR5cGUgVE5hdkJhclNrZWxldG9uUHJvcHMgPSB7XG4gIGlzRXhwYW5kZWQ6IGJvb2xlYW47XG59O1xuXG50eXBlIFRNZW51SXRlbVByb3BzID0ge1xuICBjb250ZW50V2lkdGg6ICd3aWRlJyB8ICduYXJyb3cnO1xufTtcblxuY29uc3QgTmF2QmFyTGF5b3V0ID0gKFxuICBwcm9wczogVE5hdkJhclNrZWxldG9uUHJvcHMgJiB7IGNoaWxkcmVuOiBSZWFjdE5vZGUgfVxuKSA9PiB7XG4gIHJldHVybiAoXG4gICAgPG5hdlxuICAgICAgYXJpYS1idXN5PXt0cnVlfVxuICAgICAgY3NzPXtjc3NgXG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gICAgICAgIGhlaWdodDogMTAwJTtcbiAgICAgICAgd2lkdGg6ICR7cHJvcHMuaXNFeHBhbmRlZCA/ICcyNTZweCcgOiAnODBweCd9O1xuICAgICAgYH1cbiAgICA+XG4gICAgICB7cHJvcHMuY2hpbGRyZW59XG4gICAgPC9uYXY+XG4gICk7XG59O1xuXG5jb25zdCBOYXZCYXJIZWFkZXIgPSBzdHlsZWQuZGl2YFxuICBkaXNwbGF5OiBmbGV4O1xuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgcGFkZGluZzogJHt1aUtpdERlc2lnblRva2Vucy5zcGFjaW5nMzB9O1xuICBoZWlnaHQ6ICR7RElNRU5TSU9OUy5oZWFkZXJ9O1xuICBiYWNrZ3JvdW5kOiAke2FwcEtpdERlc2lnblRva2Vucy5iYWNrZ3JvdW5kQ29sb3JGb3JOYXZiYXJIZWFkZXJ9O1xuYDtcblxuY29uc3QgTmF2QmFyQm9keSA9IHN0eWxlZC5kaXZgXG4gIGRpc3BsYXk6IGZsZXg7XG4gIGZsZXg6IDE7XG4gIHBhZGRpbmc6ICR7dWlLaXREZXNpZ25Ub2tlbnMuc3BhY2luZzMwfTtcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgYWxpZ24taXRlbXM6IGZsZXgtc3RhcnQ7XG4gIGdhcDogJHt1aUtpdERlc2lnblRva2Vucy5zcGFjaW5nNDB9O1xuICBmbGV4LXNocmluazogMDtcbiAgYmFja2dyb3VuZDogJHthcHBLaXREZXNpZ25Ub2tlbnMuYmFja2dyb3VuZENvbG9yRm9yTmF2YmFyU2tlbGV0b259O1xuICBwb3NpdGlvbjogcmVsYXRpdmU7XG5cbiAgLy8gVE9ETzogcmVtb3ZlIGNvbXBsZXRlbHkgYXMgcGFydCBvZiB0aGUgcmVjb2xvdXJpbmcgcm9sbG91dCBjbGVhbnVwIHByb2Nlc3NcbiAgLy8gYm90dG9tIGdyYWRpZW50XG4gICY6OmFmdGVyIHtcbiAgICBjb250ZW50OiAnJztcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgYm90dG9tOiAwO1xuICAgIGhlaWdodDogMzZweDtcbiAgICB3aWR0aDogY2FsYygxMDAlIC0gMiAqICR7dWlLaXREZXNpZ25Ub2tlbnMuc3BhY2luZzMwfSk7XG4gICAgYmFja2dyb3VuZDogbGluZWFyLWdyYWRpZW50KDE4MGRlZywgcmdiYSgwLCAxNTMsIDEzNSwgMCkgMCUsICMwMDk5ODcgMTAwJSk7XG4gICAgdmlzaWJpbGl0eTogJHthcHBLaXREZXNpZ25Ub2tlbnMudmlzaWJpbGl0eUZvck5hdmJhckZhZGVkfTtcbiAgfVxuYDtcblxuY29uc3QgTmF2QmFyRm9vdGVyID0gc3R5bGVkLmRpdjxUTmF2QmFyU2tlbGV0b25Qcm9wcz5gXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgZGlzcGxheTogZmxleDtcbiAgd2lkdGg6IDEwMCU7XG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gIGJhY2tncm91bmQ6ICR7YXBwS2l0RGVzaWduVG9rZW5zLmJhY2tncm91bmRDb2xvckZvck5hdmJhclNrZWxldG9uRm9vdGVyfTtcbiAgcGFkZGluZzogJHt1aUtpdERlc2lnblRva2Vucy5zcGFjaW5nMzB9XG4gICAgJHsocHJvcHMpID0+IChwcm9wcy5pc0V4cGFuZGVkID8gJzU4cHgnIDogJzBweCcpfTtcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG5cbiAgLy8gZGl2aWRlclxuICAmOjpiZWZvcmUge1xuICAgIGNvbnRlbnQ6ICcnO1xuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICB0b3A6IDA7XG4gICAgaGVpZ2h0OiAxcHg7XG4gICAgd2lkdGg6IGNhbGMoMTAwJSAtIDIgKiAke3VpS2l0RGVzaWduVG9rZW5zLnNwYWNpbmczMH0pO1xuICAgIGJhY2tncm91bmQ6IHJnYmEoMjU1LCAyNTUsIDI1NSwgMC41KTtcbiAgfVxuYDtcblxuY29uc3QgRXhwYW5kSWNvbiA9IHN0eWxlZC5kaXZgXG4gIHdpZHRoOiA0MHB4O1xuICBoZWlnaHQ6IDQwcHg7XG4gIGJvcmRlci1yYWRpdXM6ICR7dWlLaXREZXNpZ25Ub2tlbnMuYm9yZGVyUmFkaXVzNH07XG4gIGJhY2tncm91bmQ6IHJnYmEoMjU1LCAyNTUsIDI1NSwgMC4yKTtcbmA7XG5cbmNvbnN0IE1lbnVJdGVtQ29udGFpbmVyID0gc3R5bGVkLmRpdjxUTWVudUl0ZW1Qcm9wcyAmIFROYXZCYXJTa2VsZXRvblByb3BzPmBcbiAgZGlzcGxheTogZmxleDtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gIGdhcDogMTJweDtcbiAgcGFkZGluZzogJHsocHJvcHMpID0+XG4gICAgcHJvcHMuY29udGVudFdpZHRoID09PSAnd2lkZScgfHwgIXByb3BzLmlzRXhwYW5kZWQgPyAnMTJweCcgOiAnMTJweCAyOHB4J307XG4gIGhlaWdodDogNDhweDtcbmA7XG5cbmNvbnN0IE1lbnVJdGVtSWNvbiA9IHN0eWxlZC5kaXZgXG4gIHdpZHRoOiAyNHB4O1xuICBoZWlnaHQ6IDI0cHg7XG4gIGJvcmRlci1yYWRpdXM6ICR7dWlLaXREZXNpZ25Ub2tlbnMuYm9yZGVyUmFkaXVzNH07XG4gIGJhY2tncm91bmQ6IHJnYmEoMjU1LCAyNTUsIDI1NSwgMC4yKTtcbmA7XG5cbmNvbnN0IE1lbnVJdGVtVGl0bGUgPSBzdHlsZWQuZGl2YFxuICBib3JkZXItcmFkaXVzOiAke3VpS2l0RGVzaWduVG9rZW5zLmJvcmRlclJhZGl1czR9O1xuICBiYWNrZ3JvdW5kOiByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMik7XG4gIGZsZXg6IDE7XG4gIGhlaWdodDogMThweDtcbmA7XG5cbmNvbnN0IE1lbnVJdGVtR3JvdXAgPSBzdHlsZWQuZGl2YFxuICB3aWR0aDogMTAwJTtcbmA7XG5cbmV4cG9ydCB7XG4gIE5hdkJhckxheW91dCxcbiAgTmF2QmFySGVhZGVyLFxuICBOYXZCYXJCb2R5LFxuICBOYXZCYXJGb290ZXIsXG4gIEV4cGFuZEljb24sXG4gIE1lbnVJdGVtQ29udGFpbmVyLFxuICBNZW51SXRlbUljb24sXG4gIE1lbnVJdGVtVGl0bGUsXG4gIE1lbnVJdGVtR3JvdXAsXG4gIHR5cGUgVE5hdkJhclNrZWxldG9uUHJvcHMsXG4gIHR5cGUgVE1lbnVJdGVtUHJvcHMsXG59O1xuIl19 */"));
const ExpandIcon = /*#__PURE__*/_styled("div", process.env.NODE_ENV === "production" ? {
  target: "epfjvz34"
} : {
  target: "epfjvz34",
  label: "ExpandIcon"
})("width:40px;height:40px;border-radius:", designTokens.borderRadius4, ";background:rgba(255, 255, 255, 0.2);" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5hdmJhci1za2VsZXRvbi5zdHlsZXMudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQXdGNkIiLCJmaWxlIjoibmF2YmFyLXNrZWxldG9uLnN0eWxlcy50c3giLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7IFJlYWN0Tm9kZSB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGNzcyB9IGZyb20gJ0BlbW90aW9uL3JlYWN0JztcbmltcG9ydCBzdHlsZWQgZnJvbSAnQGVtb3Rpb24vc3R5bGVkJztcbmltcG9ydCB7IGRlc2lnblRva2VucyBhcyBhcHBLaXREZXNpZ25Ub2tlbnMgfSBmcm9tICdAY29tbWVyY2V0b29scy1mcm9udGVuZC9hcHBsaWNhdGlvbi1jb21wb25lbnRzJztcbmltcG9ydCB7IGRlc2lnblRva2VucyBhcyB1aUtpdERlc2lnblRva2VucyB9IGZyb20gJ0Bjb21tZXJjZXRvb2xzLXVpa2l0L2Rlc2lnbi1zeXN0ZW0nO1xuaW1wb3J0IHsgRElNRU5TSU9OUyB9IGZyb20gJy4uLy4uL2NvbnN0YW50cyc7XG5cbnR5cGUgVE5hdkJhclNrZWxldG9uUHJvcHMgPSB7XG4gIGlzRXhwYW5kZWQ6IGJvb2xlYW47XG59O1xuXG50eXBlIFRNZW51SXRlbVByb3BzID0ge1xuICBjb250ZW50V2lkdGg6ICd3aWRlJyB8ICduYXJyb3cnO1xufTtcblxuY29uc3QgTmF2QmFyTGF5b3V0ID0gKFxuICBwcm9wczogVE5hdkJhclNrZWxldG9uUHJvcHMgJiB7IGNoaWxkcmVuOiBSZWFjdE5vZGUgfVxuKSA9PiB7XG4gIHJldHVybiAoXG4gICAgPG5hdlxuICAgICAgYXJpYS1idXN5PXt0cnVlfVxuICAgICAgY3NzPXtjc3NgXG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gICAgICAgIGhlaWdodDogMTAwJTtcbiAgICAgICAgd2lkdGg6ICR7cHJvcHMuaXNFeHBhbmRlZCA/ICcyNTZweCcgOiAnODBweCd9O1xuICAgICAgYH1cbiAgICA+XG4gICAgICB7cHJvcHMuY2hpbGRyZW59XG4gICAgPC9uYXY+XG4gICk7XG59O1xuXG5jb25zdCBOYXZCYXJIZWFkZXIgPSBzdHlsZWQuZGl2YFxuICBkaXNwbGF5OiBmbGV4O1xuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgcGFkZGluZzogJHt1aUtpdERlc2lnblRva2Vucy5zcGFjaW5nMzB9O1xuICBoZWlnaHQ6ICR7RElNRU5TSU9OUy5oZWFkZXJ9O1xuICBiYWNrZ3JvdW5kOiAke2FwcEtpdERlc2lnblRva2Vucy5iYWNrZ3JvdW5kQ29sb3JGb3JOYXZiYXJIZWFkZXJ9O1xuYDtcblxuY29uc3QgTmF2QmFyQm9keSA9IHN0eWxlZC5kaXZgXG4gIGRpc3BsYXk6IGZsZXg7XG4gIGZsZXg6IDE7XG4gIHBhZGRpbmc6ICR7dWlLaXREZXNpZ25Ub2tlbnMuc3BhY2luZzMwfTtcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgYWxpZ24taXRlbXM6IGZsZXgtc3RhcnQ7XG4gIGdhcDogJHt1aUtpdERlc2lnblRva2Vucy5zcGFjaW5nNDB9O1xuICBmbGV4LXNocmluazogMDtcbiAgYmFja2dyb3VuZDogJHthcHBLaXREZXNpZ25Ub2tlbnMuYmFja2dyb3VuZENvbG9yRm9yTmF2YmFyU2tlbGV0b259O1xuICBwb3NpdGlvbjogcmVsYXRpdmU7XG5cbiAgLy8gVE9ETzogcmVtb3ZlIGNvbXBsZXRlbHkgYXMgcGFydCBvZiB0aGUgcmVjb2xvdXJpbmcgcm9sbG91dCBjbGVhbnVwIHByb2Nlc3NcbiAgLy8gYm90dG9tIGdyYWRpZW50XG4gICY6OmFmdGVyIHtcbiAgICBjb250ZW50OiAnJztcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgYm90dG9tOiAwO1xuICAgIGhlaWdodDogMzZweDtcbiAgICB3aWR0aDogY2FsYygxMDAlIC0gMiAqICR7dWlLaXREZXNpZ25Ub2tlbnMuc3BhY2luZzMwfSk7XG4gICAgYmFja2dyb3VuZDogbGluZWFyLWdyYWRpZW50KDE4MGRlZywgcmdiYSgwLCAxNTMsIDEzNSwgMCkgMCUsICMwMDk5ODcgMTAwJSk7XG4gICAgdmlzaWJpbGl0eTogJHthcHBLaXREZXNpZ25Ub2tlbnMudmlzaWJpbGl0eUZvck5hdmJhckZhZGVkfTtcbiAgfVxuYDtcblxuY29uc3QgTmF2QmFyRm9vdGVyID0gc3R5bGVkLmRpdjxUTmF2QmFyU2tlbGV0b25Qcm9wcz5gXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgZGlzcGxheTogZmxleDtcbiAgd2lkdGg6IDEwMCU7XG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gIGJhY2tncm91bmQ6ICR7YXBwS2l0RGVzaWduVG9rZW5zLmJhY2tncm91bmRDb2xvckZvck5hdmJhclNrZWxldG9uRm9vdGVyfTtcbiAgcGFkZGluZzogJHt1aUtpdERlc2lnblRva2Vucy5zcGFjaW5nMzB9XG4gICAgJHsocHJvcHMpID0+IChwcm9wcy5pc0V4cGFuZGVkID8gJzU4cHgnIDogJzBweCcpfTtcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG5cbiAgLy8gZGl2aWRlclxuICAmOjpiZWZvcmUge1xuICAgIGNvbnRlbnQ6ICcnO1xuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICB0b3A6IDA7XG4gICAgaGVpZ2h0OiAxcHg7XG4gICAgd2lkdGg6IGNhbGMoMTAwJSAtIDIgKiAke3VpS2l0RGVzaWduVG9rZW5zLnNwYWNpbmczMH0pO1xuICAgIGJhY2tncm91bmQ6IHJnYmEoMjU1LCAyNTUsIDI1NSwgMC41KTtcbiAgfVxuYDtcblxuY29uc3QgRXhwYW5kSWNvbiA9IHN0eWxlZC5kaXZgXG4gIHdpZHRoOiA0MHB4O1xuICBoZWlnaHQ6IDQwcHg7XG4gIGJvcmRlci1yYWRpdXM6ICR7dWlLaXREZXNpZ25Ub2tlbnMuYm9yZGVyUmFkaXVzNH07XG4gIGJhY2tncm91bmQ6IHJnYmEoMjU1LCAyNTUsIDI1NSwgMC4yKTtcbmA7XG5cbmNvbnN0IE1lbnVJdGVtQ29udGFpbmVyID0gc3R5bGVkLmRpdjxUTWVudUl0ZW1Qcm9wcyAmIFROYXZCYXJTa2VsZXRvblByb3BzPmBcbiAgZGlzcGxheTogZmxleDtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gIGdhcDogMTJweDtcbiAgcGFkZGluZzogJHsocHJvcHMpID0+XG4gICAgcHJvcHMuY29udGVudFdpZHRoID09PSAnd2lkZScgfHwgIXByb3BzLmlzRXhwYW5kZWQgPyAnMTJweCcgOiAnMTJweCAyOHB4J307XG4gIGhlaWdodDogNDhweDtcbmA7XG5cbmNvbnN0IE1lbnVJdGVtSWNvbiA9IHN0eWxlZC5kaXZgXG4gIHdpZHRoOiAyNHB4O1xuICBoZWlnaHQ6IDI0cHg7XG4gIGJvcmRlci1yYWRpdXM6ICR7dWlLaXREZXNpZ25Ub2tlbnMuYm9yZGVyUmFkaXVzNH07XG4gIGJhY2tncm91bmQ6IHJnYmEoMjU1LCAyNTUsIDI1NSwgMC4yKTtcbmA7XG5cbmNvbnN0IE1lbnVJdGVtVGl0bGUgPSBzdHlsZWQuZGl2YFxuICBib3JkZXItcmFkaXVzOiAke3VpS2l0RGVzaWduVG9rZW5zLmJvcmRlclJhZGl1czR9O1xuICBiYWNrZ3JvdW5kOiByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMik7XG4gIGZsZXg6IDE7XG4gIGhlaWdodDogMThweDtcbmA7XG5cbmNvbnN0IE1lbnVJdGVtR3JvdXAgPSBzdHlsZWQuZGl2YFxuICB3aWR0aDogMTAwJTtcbmA7XG5cbmV4cG9ydCB7XG4gIE5hdkJhckxheW91dCxcbiAgTmF2QmFySGVhZGVyLFxuICBOYXZCYXJCb2R5LFxuICBOYXZCYXJGb290ZXIsXG4gIEV4cGFuZEljb24sXG4gIE1lbnVJdGVtQ29udGFpbmVyLFxuICBNZW51SXRlbUljb24sXG4gIE1lbnVJdGVtVGl0bGUsXG4gIE1lbnVJdGVtR3JvdXAsXG4gIHR5cGUgVE5hdkJhclNrZWxldG9uUHJvcHMsXG4gIHR5cGUgVE1lbnVJdGVtUHJvcHMsXG59O1xuIl19 */"));
const MenuItemContainer = /*#__PURE__*/_styled("div", process.env.NODE_ENV === "production" ? {
  target: "epfjvz33"
} : {
  target: "epfjvz33",
  label: "MenuItemContainer"
})("display:flex;align-items:center;justify-content:center;gap:12px;padding:", props => props.contentWidth === 'wide' || !props.isExpanded ? '12px' : '12px 28px', ";height:48px;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5hdmJhci1za2VsZXRvbi5zdHlsZXMudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQStGMkUiLCJmaWxlIjoibmF2YmFyLXNrZWxldG9uLnN0eWxlcy50c3giLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7IFJlYWN0Tm9kZSB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGNzcyB9IGZyb20gJ0BlbW90aW9uL3JlYWN0JztcbmltcG9ydCBzdHlsZWQgZnJvbSAnQGVtb3Rpb24vc3R5bGVkJztcbmltcG9ydCB7IGRlc2lnblRva2VucyBhcyBhcHBLaXREZXNpZ25Ub2tlbnMgfSBmcm9tICdAY29tbWVyY2V0b29scy1mcm9udGVuZC9hcHBsaWNhdGlvbi1jb21wb25lbnRzJztcbmltcG9ydCB7IGRlc2lnblRva2VucyBhcyB1aUtpdERlc2lnblRva2VucyB9IGZyb20gJ0Bjb21tZXJjZXRvb2xzLXVpa2l0L2Rlc2lnbi1zeXN0ZW0nO1xuaW1wb3J0IHsgRElNRU5TSU9OUyB9IGZyb20gJy4uLy4uL2NvbnN0YW50cyc7XG5cbnR5cGUgVE5hdkJhclNrZWxldG9uUHJvcHMgPSB7XG4gIGlzRXhwYW5kZWQ6IGJvb2xlYW47XG59O1xuXG50eXBlIFRNZW51SXRlbVByb3BzID0ge1xuICBjb250ZW50V2lkdGg6ICd3aWRlJyB8ICduYXJyb3cnO1xufTtcblxuY29uc3QgTmF2QmFyTGF5b3V0ID0gKFxuICBwcm9wczogVE5hdkJhclNrZWxldG9uUHJvcHMgJiB7IGNoaWxkcmVuOiBSZWFjdE5vZGUgfVxuKSA9PiB7XG4gIHJldHVybiAoXG4gICAgPG5hdlxuICAgICAgYXJpYS1idXN5PXt0cnVlfVxuICAgICAgY3NzPXtjc3NgXG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gICAgICAgIGhlaWdodDogMTAwJTtcbiAgICAgICAgd2lkdGg6ICR7cHJvcHMuaXNFeHBhbmRlZCA/ICcyNTZweCcgOiAnODBweCd9O1xuICAgICAgYH1cbiAgICA+XG4gICAgICB7cHJvcHMuY2hpbGRyZW59XG4gICAgPC9uYXY+XG4gICk7XG59O1xuXG5jb25zdCBOYXZCYXJIZWFkZXIgPSBzdHlsZWQuZGl2YFxuICBkaXNwbGF5OiBmbGV4O1xuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgcGFkZGluZzogJHt1aUtpdERlc2lnblRva2Vucy5zcGFjaW5nMzB9O1xuICBoZWlnaHQ6ICR7RElNRU5TSU9OUy5oZWFkZXJ9O1xuICBiYWNrZ3JvdW5kOiAke2FwcEtpdERlc2lnblRva2Vucy5iYWNrZ3JvdW5kQ29sb3JGb3JOYXZiYXJIZWFkZXJ9O1xuYDtcblxuY29uc3QgTmF2QmFyQm9keSA9IHN0eWxlZC5kaXZgXG4gIGRpc3BsYXk6IGZsZXg7XG4gIGZsZXg6IDE7XG4gIHBhZGRpbmc6ICR7dWlLaXREZXNpZ25Ub2tlbnMuc3BhY2luZzMwfTtcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgYWxpZ24taXRlbXM6IGZsZXgtc3RhcnQ7XG4gIGdhcDogJHt1aUtpdERlc2lnblRva2Vucy5zcGFjaW5nNDB9O1xuICBmbGV4LXNocmluazogMDtcbiAgYmFja2dyb3VuZDogJHthcHBLaXREZXNpZ25Ub2tlbnMuYmFja2dyb3VuZENvbG9yRm9yTmF2YmFyU2tlbGV0b259O1xuICBwb3NpdGlvbjogcmVsYXRpdmU7XG5cbiAgLy8gVE9ETzogcmVtb3ZlIGNvbXBsZXRlbHkgYXMgcGFydCBvZiB0aGUgcmVjb2xvdXJpbmcgcm9sbG91dCBjbGVhbnVwIHByb2Nlc3NcbiAgLy8gYm90dG9tIGdyYWRpZW50XG4gICY6OmFmdGVyIHtcbiAgICBjb250ZW50OiAnJztcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgYm90dG9tOiAwO1xuICAgIGhlaWdodDogMzZweDtcbiAgICB3aWR0aDogY2FsYygxMDAlIC0gMiAqICR7dWlLaXREZXNpZ25Ub2tlbnMuc3BhY2luZzMwfSk7XG4gICAgYmFja2dyb3VuZDogbGluZWFyLWdyYWRpZW50KDE4MGRlZywgcmdiYSgwLCAxNTMsIDEzNSwgMCkgMCUsICMwMDk5ODcgMTAwJSk7XG4gICAgdmlzaWJpbGl0eTogJHthcHBLaXREZXNpZ25Ub2tlbnMudmlzaWJpbGl0eUZvck5hdmJhckZhZGVkfTtcbiAgfVxuYDtcblxuY29uc3QgTmF2QmFyRm9vdGVyID0gc3R5bGVkLmRpdjxUTmF2QmFyU2tlbGV0b25Qcm9wcz5gXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgZGlzcGxheTogZmxleDtcbiAgd2lkdGg6IDEwMCU7XG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gIGJhY2tncm91bmQ6ICR7YXBwS2l0RGVzaWduVG9rZW5zLmJhY2tncm91bmRDb2xvckZvck5hdmJhclNrZWxldG9uRm9vdGVyfTtcbiAgcGFkZGluZzogJHt1aUtpdERlc2lnblRva2Vucy5zcGFjaW5nMzB9XG4gICAgJHsocHJvcHMpID0+IChwcm9wcy5pc0V4cGFuZGVkID8gJzU4cHgnIDogJzBweCcpfTtcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG5cbiAgLy8gZGl2aWRlclxuICAmOjpiZWZvcmUge1xuICAgIGNvbnRlbnQ6ICcnO1xuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICB0b3A6IDA7XG4gICAgaGVpZ2h0OiAxcHg7XG4gICAgd2lkdGg6IGNhbGMoMTAwJSAtIDIgKiAke3VpS2l0RGVzaWduVG9rZW5zLnNwYWNpbmczMH0pO1xuICAgIGJhY2tncm91bmQ6IHJnYmEoMjU1LCAyNTUsIDI1NSwgMC41KTtcbiAgfVxuYDtcblxuY29uc3QgRXhwYW5kSWNvbiA9IHN0eWxlZC5kaXZgXG4gIHdpZHRoOiA0MHB4O1xuICBoZWlnaHQ6IDQwcHg7XG4gIGJvcmRlci1yYWRpdXM6ICR7dWlLaXREZXNpZ25Ub2tlbnMuYm9yZGVyUmFkaXVzNH07XG4gIGJhY2tncm91bmQ6IHJnYmEoMjU1LCAyNTUsIDI1NSwgMC4yKTtcbmA7XG5cbmNvbnN0IE1lbnVJdGVtQ29udGFpbmVyID0gc3R5bGVkLmRpdjxUTWVudUl0ZW1Qcm9wcyAmIFROYXZCYXJTa2VsZXRvblByb3BzPmBcbiAgZGlzcGxheTogZmxleDtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gIGdhcDogMTJweDtcbiAgcGFkZGluZzogJHsocHJvcHMpID0+XG4gICAgcHJvcHMuY29udGVudFdpZHRoID09PSAnd2lkZScgfHwgIXByb3BzLmlzRXhwYW5kZWQgPyAnMTJweCcgOiAnMTJweCAyOHB4J307XG4gIGhlaWdodDogNDhweDtcbmA7XG5cbmNvbnN0IE1lbnVJdGVtSWNvbiA9IHN0eWxlZC5kaXZgXG4gIHdpZHRoOiAyNHB4O1xuICBoZWlnaHQ6IDI0cHg7XG4gIGJvcmRlci1yYWRpdXM6ICR7dWlLaXREZXNpZ25Ub2tlbnMuYm9yZGVyUmFkaXVzNH07XG4gIGJhY2tncm91bmQ6IHJnYmEoMjU1LCAyNTUsIDI1NSwgMC4yKTtcbmA7XG5cbmNvbnN0IE1lbnVJdGVtVGl0bGUgPSBzdHlsZWQuZGl2YFxuICBib3JkZXItcmFkaXVzOiAke3VpS2l0RGVzaWduVG9rZW5zLmJvcmRlclJhZGl1czR9O1xuICBiYWNrZ3JvdW5kOiByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMik7XG4gIGZsZXg6IDE7XG4gIGhlaWdodDogMThweDtcbmA7XG5cbmNvbnN0IE1lbnVJdGVtR3JvdXAgPSBzdHlsZWQuZGl2YFxuICB3aWR0aDogMTAwJTtcbmA7XG5cbmV4cG9ydCB7XG4gIE5hdkJhckxheW91dCxcbiAgTmF2QmFySGVhZGVyLFxuICBOYXZCYXJCb2R5LFxuICBOYXZCYXJGb290ZXIsXG4gIEV4cGFuZEljb24sXG4gIE1lbnVJdGVtQ29udGFpbmVyLFxuICBNZW51SXRlbUljb24sXG4gIE1lbnVJdGVtVGl0bGUsXG4gIE1lbnVJdGVtR3JvdXAsXG4gIHR5cGUgVE5hdkJhclNrZWxldG9uUHJvcHMsXG4gIHR5cGUgVE1lbnVJdGVtUHJvcHMsXG59O1xuIl19 */"));
const MenuItemIcon = /*#__PURE__*/_styled("div", process.env.NODE_ENV === "production" ? {
  target: "epfjvz32"
} : {
  target: "epfjvz32",
  label: "MenuItemIcon"
})("width:24px;height:24px;border-radius:", designTokens.borderRadius4, ";background:rgba(255, 255, 255, 0.2);" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5hdmJhci1za2VsZXRvbi5zdHlsZXMudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQXlHK0IiLCJmaWxlIjoibmF2YmFyLXNrZWxldG9uLnN0eWxlcy50c3giLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7IFJlYWN0Tm9kZSB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGNzcyB9IGZyb20gJ0BlbW90aW9uL3JlYWN0JztcbmltcG9ydCBzdHlsZWQgZnJvbSAnQGVtb3Rpb24vc3R5bGVkJztcbmltcG9ydCB7IGRlc2lnblRva2VucyBhcyBhcHBLaXREZXNpZ25Ub2tlbnMgfSBmcm9tICdAY29tbWVyY2V0b29scy1mcm9udGVuZC9hcHBsaWNhdGlvbi1jb21wb25lbnRzJztcbmltcG9ydCB7IGRlc2lnblRva2VucyBhcyB1aUtpdERlc2lnblRva2VucyB9IGZyb20gJ0Bjb21tZXJjZXRvb2xzLXVpa2l0L2Rlc2lnbi1zeXN0ZW0nO1xuaW1wb3J0IHsgRElNRU5TSU9OUyB9IGZyb20gJy4uLy4uL2NvbnN0YW50cyc7XG5cbnR5cGUgVE5hdkJhclNrZWxldG9uUHJvcHMgPSB7XG4gIGlzRXhwYW5kZWQ6IGJvb2xlYW47XG59O1xuXG50eXBlIFRNZW51SXRlbVByb3BzID0ge1xuICBjb250ZW50V2lkdGg6ICd3aWRlJyB8ICduYXJyb3cnO1xufTtcblxuY29uc3QgTmF2QmFyTGF5b3V0ID0gKFxuICBwcm9wczogVE5hdkJhclNrZWxldG9uUHJvcHMgJiB7IGNoaWxkcmVuOiBSZWFjdE5vZGUgfVxuKSA9PiB7XG4gIHJldHVybiAoXG4gICAgPG5hdlxuICAgICAgYXJpYS1idXN5PXt0cnVlfVxuICAgICAgY3NzPXtjc3NgXG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gICAgICAgIGhlaWdodDogMTAwJTtcbiAgICAgICAgd2lkdGg6ICR7cHJvcHMuaXNFeHBhbmRlZCA/ICcyNTZweCcgOiAnODBweCd9O1xuICAgICAgYH1cbiAgICA+XG4gICAgICB7cHJvcHMuY2hpbGRyZW59XG4gICAgPC9uYXY+XG4gICk7XG59O1xuXG5jb25zdCBOYXZCYXJIZWFkZXIgPSBzdHlsZWQuZGl2YFxuICBkaXNwbGF5OiBmbGV4O1xuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgcGFkZGluZzogJHt1aUtpdERlc2lnblRva2Vucy5zcGFjaW5nMzB9O1xuICBoZWlnaHQ6ICR7RElNRU5TSU9OUy5oZWFkZXJ9O1xuICBiYWNrZ3JvdW5kOiAke2FwcEtpdERlc2lnblRva2Vucy5iYWNrZ3JvdW5kQ29sb3JGb3JOYXZiYXJIZWFkZXJ9O1xuYDtcblxuY29uc3QgTmF2QmFyQm9keSA9IHN0eWxlZC5kaXZgXG4gIGRpc3BsYXk6IGZsZXg7XG4gIGZsZXg6IDE7XG4gIHBhZGRpbmc6ICR7dWlLaXREZXNpZ25Ub2tlbnMuc3BhY2luZzMwfTtcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgYWxpZ24taXRlbXM6IGZsZXgtc3RhcnQ7XG4gIGdhcDogJHt1aUtpdERlc2lnblRva2Vucy5zcGFjaW5nNDB9O1xuICBmbGV4LXNocmluazogMDtcbiAgYmFja2dyb3VuZDogJHthcHBLaXREZXNpZ25Ub2tlbnMuYmFja2dyb3VuZENvbG9yRm9yTmF2YmFyU2tlbGV0b259O1xuICBwb3NpdGlvbjogcmVsYXRpdmU7XG5cbiAgLy8gVE9ETzogcmVtb3ZlIGNvbXBsZXRlbHkgYXMgcGFydCBvZiB0aGUgcmVjb2xvdXJpbmcgcm9sbG91dCBjbGVhbnVwIHByb2Nlc3NcbiAgLy8gYm90dG9tIGdyYWRpZW50XG4gICY6OmFmdGVyIHtcbiAgICBjb250ZW50OiAnJztcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgYm90dG9tOiAwO1xuICAgIGhlaWdodDogMzZweDtcbiAgICB3aWR0aDogY2FsYygxMDAlIC0gMiAqICR7dWlLaXREZXNpZ25Ub2tlbnMuc3BhY2luZzMwfSk7XG4gICAgYmFja2dyb3VuZDogbGluZWFyLWdyYWRpZW50KDE4MGRlZywgcmdiYSgwLCAxNTMsIDEzNSwgMCkgMCUsICMwMDk5ODcgMTAwJSk7XG4gICAgdmlzaWJpbGl0eTogJHthcHBLaXREZXNpZ25Ub2tlbnMudmlzaWJpbGl0eUZvck5hdmJhckZhZGVkfTtcbiAgfVxuYDtcblxuY29uc3QgTmF2QmFyRm9vdGVyID0gc3R5bGVkLmRpdjxUTmF2QmFyU2tlbGV0b25Qcm9wcz5gXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgZGlzcGxheTogZmxleDtcbiAgd2lkdGg6IDEwMCU7XG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gIGJhY2tncm91bmQ6ICR7YXBwS2l0RGVzaWduVG9rZW5zLmJhY2tncm91bmRDb2xvckZvck5hdmJhclNrZWxldG9uRm9vdGVyfTtcbiAgcGFkZGluZzogJHt1aUtpdERlc2lnblRva2Vucy5zcGFjaW5nMzB9XG4gICAgJHsocHJvcHMpID0+IChwcm9wcy5pc0V4cGFuZGVkID8gJzU4cHgnIDogJzBweCcpfTtcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG5cbiAgLy8gZGl2aWRlclxuICAmOjpiZWZvcmUge1xuICAgIGNvbnRlbnQ6ICcnO1xuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICB0b3A6IDA7XG4gICAgaGVpZ2h0OiAxcHg7XG4gICAgd2lkdGg6IGNhbGMoMTAwJSAtIDIgKiAke3VpS2l0RGVzaWduVG9rZW5zLnNwYWNpbmczMH0pO1xuICAgIGJhY2tncm91bmQ6IHJnYmEoMjU1LCAyNTUsIDI1NSwgMC41KTtcbiAgfVxuYDtcblxuY29uc3QgRXhwYW5kSWNvbiA9IHN0eWxlZC5kaXZgXG4gIHdpZHRoOiA0MHB4O1xuICBoZWlnaHQ6IDQwcHg7XG4gIGJvcmRlci1yYWRpdXM6ICR7dWlLaXREZXNpZ25Ub2tlbnMuYm9yZGVyUmFkaXVzNH07XG4gIGJhY2tncm91bmQ6IHJnYmEoMjU1LCAyNTUsIDI1NSwgMC4yKTtcbmA7XG5cbmNvbnN0IE1lbnVJdGVtQ29udGFpbmVyID0gc3R5bGVkLmRpdjxUTWVudUl0ZW1Qcm9wcyAmIFROYXZCYXJTa2VsZXRvblByb3BzPmBcbiAgZGlzcGxheTogZmxleDtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gIGdhcDogMTJweDtcbiAgcGFkZGluZzogJHsocHJvcHMpID0+XG4gICAgcHJvcHMuY29udGVudFdpZHRoID09PSAnd2lkZScgfHwgIXByb3BzLmlzRXhwYW5kZWQgPyAnMTJweCcgOiAnMTJweCAyOHB4J307XG4gIGhlaWdodDogNDhweDtcbmA7XG5cbmNvbnN0IE1lbnVJdGVtSWNvbiA9IHN0eWxlZC5kaXZgXG4gIHdpZHRoOiAyNHB4O1xuICBoZWlnaHQ6IDI0cHg7XG4gIGJvcmRlci1yYWRpdXM6ICR7dWlLaXREZXNpZ25Ub2tlbnMuYm9yZGVyUmFkaXVzNH07XG4gIGJhY2tncm91bmQ6IHJnYmEoMjU1LCAyNTUsIDI1NSwgMC4yKTtcbmA7XG5cbmNvbnN0IE1lbnVJdGVtVGl0bGUgPSBzdHlsZWQuZGl2YFxuICBib3JkZXItcmFkaXVzOiAke3VpS2l0RGVzaWduVG9rZW5zLmJvcmRlclJhZGl1czR9O1xuICBiYWNrZ3JvdW5kOiByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMik7XG4gIGZsZXg6IDE7XG4gIGhlaWdodDogMThweDtcbmA7XG5cbmNvbnN0IE1lbnVJdGVtR3JvdXAgPSBzdHlsZWQuZGl2YFxuICB3aWR0aDogMTAwJTtcbmA7XG5cbmV4cG9ydCB7XG4gIE5hdkJhckxheW91dCxcbiAgTmF2QmFySGVhZGVyLFxuICBOYXZCYXJCb2R5LFxuICBOYXZCYXJGb290ZXIsXG4gIEV4cGFuZEljb24sXG4gIE1lbnVJdGVtQ29udGFpbmVyLFxuICBNZW51SXRlbUljb24sXG4gIE1lbnVJdGVtVGl0bGUsXG4gIE1lbnVJdGVtR3JvdXAsXG4gIHR5cGUgVE5hdkJhclNrZWxldG9uUHJvcHMsXG4gIHR5cGUgVE1lbnVJdGVtUHJvcHMsXG59O1xuIl19 */"));
const MenuItemTitle = /*#__PURE__*/_styled("div", process.env.NODE_ENV === "production" ? {
  target: "epfjvz31"
} : {
  target: "epfjvz31",
  label: "MenuItemTitle"
})("border-radius:", designTokens.borderRadius4, ";background:rgba(255, 255, 255, 0.2);flex:1;height:18px;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5hdmJhci1za2VsZXRvbi5zdHlsZXMudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQWdIZ0MiLCJmaWxlIjoibmF2YmFyLXNrZWxldG9uLnN0eWxlcy50c3giLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7IFJlYWN0Tm9kZSB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGNzcyB9IGZyb20gJ0BlbW90aW9uL3JlYWN0JztcbmltcG9ydCBzdHlsZWQgZnJvbSAnQGVtb3Rpb24vc3R5bGVkJztcbmltcG9ydCB7IGRlc2lnblRva2VucyBhcyBhcHBLaXREZXNpZ25Ub2tlbnMgfSBmcm9tICdAY29tbWVyY2V0b29scy1mcm9udGVuZC9hcHBsaWNhdGlvbi1jb21wb25lbnRzJztcbmltcG9ydCB7IGRlc2lnblRva2VucyBhcyB1aUtpdERlc2lnblRva2VucyB9IGZyb20gJ0Bjb21tZXJjZXRvb2xzLXVpa2l0L2Rlc2lnbi1zeXN0ZW0nO1xuaW1wb3J0IHsgRElNRU5TSU9OUyB9IGZyb20gJy4uLy4uL2NvbnN0YW50cyc7XG5cbnR5cGUgVE5hdkJhclNrZWxldG9uUHJvcHMgPSB7XG4gIGlzRXhwYW5kZWQ6IGJvb2xlYW47XG59O1xuXG50eXBlIFRNZW51SXRlbVByb3BzID0ge1xuICBjb250ZW50V2lkdGg6ICd3aWRlJyB8ICduYXJyb3cnO1xufTtcblxuY29uc3QgTmF2QmFyTGF5b3V0ID0gKFxuICBwcm9wczogVE5hdkJhclNrZWxldG9uUHJvcHMgJiB7IGNoaWxkcmVuOiBSZWFjdE5vZGUgfVxuKSA9PiB7XG4gIHJldHVybiAoXG4gICAgPG5hdlxuICAgICAgYXJpYS1idXN5PXt0cnVlfVxuICAgICAgY3NzPXtjc3NgXG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gICAgICAgIGhlaWdodDogMTAwJTtcbiAgICAgICAgd2lkdGg6ICR7cHJvcHMuaXNFeHBhbmRlZCA/ICcyNTZweCcgOiAnODBweCd9O1xuICAgICAgYH1cbiAgICA+XG4gICAgICB7cHJvcHMuY2hpbGRyZW59XG4gICAgPC9uYXY+XG4gICk7XG59O1xuXG5jb25zdCBOYXZCYXJIZWFkZXIgPSBzdHlsZWQuZGl2YFxuICBkaXNwbGF5OiBmbGV4O1xuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgcGFkZGluZzogJHt1aUtpdERlc2lnblRva2Vucy5zcGFjaW5nMzB9O1xuICBoZWlnaHQ6ICR7RElNRU5TSU9OUy5oZWFkZXJ9O1xuICBiYWNrZ3JvdW5kOiAke2FwcEtpdERlc2lnblRva2Vucy5iYWNrZ3JvdW5kQ29sb3JGb3JOYXZiYXJIZWFkZXJ9O1xuYDtcblxuY29uc3QgTmF2QmFyQm9keSA9IHN0eWxlZC5kaXZgXG4gIGRpc3BsYXk6IGZsZXg7XG4gIGZsZXg6IDE7XG4gIHBhZGRpbmc6ICR7dWlLaXREZXNpZ25Ub2tlbnMuc3BhY2luZzMwfTtcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgYWxpZ24taXRlbXM6IGZsZXgtc3RhcnQ7XG4gIGdhcDogJHt1aUtpdERlc2lnblRva2Vucy5zcGFjaW5nNDB9O1xuICBmbGV4LXNocmluazogMDtcbiAgYmFja2dyb3VuZDogJHthcHBLaXREZXNpZ25Ub2tlbnMuYmFja2dyb3VuZENvbG9yRm9yTmF2YmFyU2tlbGV0b259O1xuICBwb3NpdGlvbjogcmVsYXRpdmU7XG5cbiAgLy8gVE9ETzogcmVtb3ZlIGNvbXBsZXRlbHkgYXMgcGFydCBvZiB0aGUgcmVjb2xvdXJpbmcgcm9sbG91dCBjbGVhbnVwIHByb2Nlc3NcbiAgLy8gYm90dG9tIGdyYWRpZW50XG4gICY6OmFmdGVyIHtcbiAgICBjb250ZW50OiAnJztcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgYm90dG9tOiAwO1xuICAgIGhlaWdodDogMzZweDtcbiAgICB3aWR0aDogY2FsYygxMDAlIC0gMiAqICR7dWlLaXREZXNpZ25Ub2tlbnMuc3BhY2luZzMwfSk7XG4gICAgYmFja2dyb3VuZDogbGluZWFyLWdyYWRpZW50KDE4MGRlZywgcmdiYSgwLCAxNTMsIDEzNSwgMCkgMCUsICMwMDk5ODcgMTAwJSk7XG4gICAgdmlzaWJpbGl0eTogJHthcHBLaXREZXNpZ25Ub2tlbnMudmlzaWJpbGl0eUZvck5hdmJhckZhZGVkfTtcbiAgfVxuYDtcblxuY29uc3QgTmF2QmFyRm9vdGVyID0gc3R5bGVkLmRpdjxUTmF2QmFyU2tlbGV0b25Qcm9wcz5gXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgZGlzcGxheTogZmxleDtcbiAgd2lkdGg6IDEwMCU7XG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gIGJhY2tncm91bmQ6ICR7YXBwS2l0RGVzaWduVG9rZW5zLmJhY2tncm91bmRDb2xvckZvck5hdmJhclNrZWxldG9uRm9vdGVyfTtcbiAgcGFkZGluZzogJHt1aUtpdERlc2lnblRva2Vucy5zcGFjaW5nMzB9XG4gICAgJHsocHJvcHMpID0+IChwcm9wcy5pc0V4cGFuZGVkID8gJzU4cHgnIDogJzBweCcpfTtcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG5cbiAgLy8gZGl2aWRlclxuICAmOjpiZWZvcmUge1xuICAgIGNvbnRlbnQ6ICcnO1xuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICB0b3A6IDA7XG4gICAgaGVpZ2h0OiAxcHg7XG4gICAgd2lkdGg6IGNhbGMoMTAwJSAtIDIgKiAke3VpS2l0RGVzaWduVG9rZW5zLnNwYWNpbmczMH0pO1xuICAgIGJhY2tncm91bmQ6IHJnYmEoMjU1LCAyNTUsIDI1NSwgMC41KTtcbiAgfVxuYDtcblxuY29uc3QgRXhwYW5kSWNvbiA9IHN0eWxlZC5kaXZgXG4gIHdpZHRoOiA0MHB4O1xuICBoZWlnaHQ6IDQwcHg7XG4gIGJvcmRlci1yYWRpdXM6ICR7dWlLaXREZXNpZ25Ub2tlbnMuYm9yZGVyUmFkaXVzNH07XG4gIGJhY2tncm91bmQ6IHJnYmEoMjU1LCAyNTUsIDI1NSwgMC4yKTtcbmA7XG5cbmNvbnN0IE1lbnVJdGVtQ29udGFpbmVyID0gc3R5bGVkLmRpdjxUTWVudUl0ZW1Qcm9wcyAmIFROYXZCYXJTa2VsZXRvblByb3BzPmBcbiAgZGlzcGxheTogZmxleDtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gIGdhcDogMTJweDtcbiAgcGFkZGluZzogJHsocHJvcHMpID0+XG4gICAgcHJvcHMuY29udGVudFdpZHRoID09PSAnd2lkZScgfHwgIXByb3BzLmlzRXhwYW5kZWQgPyAnMTJweCcgOiAnMTJweCAyOHB4J307XG4gIGhlaWdodDogNDhweDtcbmA7XG5cbmNvbnN0IE1lbnVJdGVtSWNvbiA9IHN0eWxlZC5kaXZgXG4gIHdpZHRoOiAyNHB4O1xuICBoZWlnaHQ6IDI0cHg7XG4gIGJvcmRlci1yYWRpdXM6ICR7dWlLaXREZXNpZ25Ub2tlbnMuYm9yZGVyUmFkaXVzNH07XG4gIGJhY2tncm91bmQ6IHJnYmEoMjU1LCAyNTUsIDI1NSwgMC4yKTtcbmA7XG5cbmNvbnN0IE1lbnVJdGVtVGl0bGUgPSBzdHlsZWQuZGl2YFxuICBib3JkZXItcmFkaXVzOiAke3VpS2l0RGVzaWduVG9rZW5zLmJvcmRlclJhZGl1czR9O1xuICBiYWNrZ3JvdW5kOiByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMik7XG4gIGZsZXg6IDE7XG4gIGhlaWdodDogMThweDtcbmA7XG5cbmNvbnN0IE1lbnVJdGVtR3JvdXAgPSBzdHlsZWQuZGl2YFxuICB3aWR0aDogMTAwJTtcbmA7XG5cbmV4cG9ydCB7XG4gIE5hdkJhckxheW91dCxcbiAgTmF2QmFySGVhZGVyLFxuICBOYXZCYXJCb2R5LFxuICBOYXZCYXJGb290ZXIsXG4gIEV4cGFuZEljb24sXG4gIE1lbnVJdGVtQ29udGFpbmVyLFxuICBNZW51SXRlbUljb24sXG4gIE1lbnVJdGVtVGl0bGUsXG4gIE1lbnVJdGVtR3JvdXAsXG4gIHR5cGUgVE5hdkJhclNrZWxldG9uUHJvcHMsXG4gIHR5cGUgVE1lbnVJdGVtUHJvcHMsXG59O1xuIl19 */"));
const MenuItemGroup = /*#__PURE__*/_styled("div", process.env.NODE_ENV === "production" ? {
  target: "epfjvz30"
} : {
  target: "epfjvz30",
  label: "MenuItemGroup"
})(process.env.NODE_ENV === "production" ? {
  name: "1d3w5wq",
  styles: "width:100%"
} : {
  name: "1d3w5wq",
  styles: "width:100%",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5hdmJhci1za2VsZXRvbi5zdHlsZXMudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQXVIZ0MiLCJmaWxlIjoibmF2YmFyLXNrZWxldG9uLnN0eWxlcy50c3giLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7IFJlYWN0Tm9kZSB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGNzcyB9IGZyb20gJ0BlbW90aW9uL3JlYWN0JztcbmltcG9ydCBzdHlsZWQgZnJvbSAnQGVtb3Rpb24vc3R5bGVkJztcbmltcG9ydCB7IGRlc2lnblRva2VucyBhcyBhcHBLaXREZXNpZ25Ub2tlbnMgfSBmcm9tICdAY29tbWVyY2V0b29scy1mcm9udGVuZC9hcHBsaWNhdGlvbi1jb21wb25lbnRzJztcbmltcG9ydCB7IGRlc2lnblRva2VucyBhcyB1aUtpdERlc2lnblRva2VucyB9IGZyb20gJ0Bjb21tZXJjZXRvb2xzLXVpa2l0L2Rlc2lnbi1zeXN0ZW0nO1xuaW1wb3J0IHsgRElNRU5TSU9OUyB9IGZyb20gJy4uLy4uL2NvbnN0YW50cyc7XG5cbnR5cGUgVE5hdkJhclNrZWxldG9uUHJvcHMgPSB7XG4gIGlzRXhwYW5kZWQ6IGJvb2xlYW47XG59O1xuXG50eXBlIFRNZW51SXRlbVByb3BzID0ge1xuICBjb250ZW50V2lkdGg6ICd3aWRlJyB8ICduYXJyb3cnO1xufTtcblxuY29uc3QgTmF2QmFyTGF5b3V0ID0gKFxuICBwcm9wczogVE5hdkJhclNrZWxldG9uUHJvcHMgJiB7IGNoaWxkcmVuOiBSZWFjdE5vZGUgfVxuKSA9PiB7XG4gIHJldHVybiAoXG4gICAgPG5hdlxuICAgICAgYXJpYS1idXN5PXt0cnVlfVxuICAgICAgY3NzPXtjc3NgXG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gICAgICAgIGhlaWdodDogMTAwJTtcbiAgICAgICAgd2lkdGg6ICR7cHJvcHMuaXNFeHBhbmRlZCA/ICcyNTZweCcgOiAnODBweCd9O1xuICAgICAgYH1cbiAgICA+XG4gICAgICB7cHJvcHMuY2hpbGRyZW59XG4gICAgPC9uYXY+XG4gICk7XG59O1xuXG5jb25zdCBOYXZCYXJIZWFkZXIgPSBzdHlsZWQuZGl2YFxuICBkaXNwbGF5OiBmbGV4O1xuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgcGFkZGluZzogJHt1aUtpdERlc2lnblRva2Vucy5zcGFjaW5nMzB9O1xuICBoZWlnaHQ6ICR7RElNRU5TSU9OUy5oZWFkZXJ9O1xuICBiYWNrZ3JvdW5kOiAke2FwcEtpdERlc2lnblRva2Vucy5iYWNrZ3JvdW5kQ29sb3JGb3JOYXZiYXJIZWFkZXJ9O1xuYDtcblxuY29uc3QgTmF2QmFyQm9keSA9IHN0eWxlZC5kaXZgXG4gIGRpc3BsYXk6IGZsZXg7XG4gIGZsZXg6IDE7XG4gIHBhZGRpbmc6ICR7dWlLaXREZXNpZ25Ub2tlbnMuc3BhY2luZzMwfTtcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgYWxpZ24taXRlbXM6IGZsZXgtc3RhcnQ7XG4gIGdhcDogJHt1aUtpdERlc2lnblRva2Vucy5zcGFjaW5nNDB9O1xuICBmbGV4LXNocmluazogMDtcbiAgYmFja2dyb3VuZDogJHthcHBLaXREZXNpZ25Ub2tlbnMuYmFja2dyb3VuZENvbG9yRm9yTmF2YmFyU2tlbGV0b259O1xuICBwb3NpdGlvbjogcmVsYXRpdmU7XG5cbiAgLy8gVE9ETzogcmVtb3ZlIGNvbXBsZXRlbHkgYXMgcGFydCBvZiB0aGUgcmVjb2xvdXJpbmcgcm9sbG91dCBjbGVhbnVwIHByb2Nlc3NcbiAgLy8gYm90dG9tIGdyYWRpZW50XG4gICY6OmFmdGVyIHtcbiAgICBjb250ZW50OiAnJztcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgYm90dG9tOiAwO1xuICAgIGhlaWdodDogMzZweDtcbiAgICB3aWR0aDogY2FsYygxMDAlIC0gMiAqICR7dWlLaXREZXNpZ25Ub2tlbnMuc3BhY2luZzMwfSk7XG4gICAgYmFja2dyb3VuZDogbGluZWFyLWdyYWRpZW50KDE4MGRlZywgcmdiYSgwLCAxNTMsIDEzNSwgMCkgMCUsICMwMDk5ODcgMTAwJSk7XG4gICAgdmlzaWJpbGl0eTogJHthcHBLaXREZXNpZ25Ub2tlbnMudmlzaWJpbGl0eUZvck5hdmJhckZhZGVkfTtcbiAgfVxuYDtcblxuY29uc3QgTmF2QmFyRm9vdGVyID0gc3R5bGVkLmRpdjxUTmF2QmFyU2tlbGV0b25Qcm9wcz5gXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgZGlzcGxheTogZmxleDtcbiAgd2lkdGg6IDEwMCU7XG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gIGJhY2tncm91bmQ6ICR7YXBwS2l0RGVzaWduVG9rZW5zLmJhY2tncm91bmRDb2xvckZvck5hdmJhclNrZWxldG9uRm9vdGVyfTtcbiAgcGFkZGluZzogJHt1aUtpdERlc2lnblRva2Vucy5zcGFjaW5nMzB9XG4gICAgJHsocHJvcHMpID0+IChwcm9wcy5pc0V4cGFuZGVkID8gJzU4cHgnIDogJzBweCcpfTtcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG5cbiAgLy8gZGl2aWRlclxuICAmOjpiZWZvcmUge1xuICAgIGNvbnRlbnQ6ICcnO1xuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICB0b3A6IDA7XG4gICAgaGVpZ2h0OiAxcHg7XG4gICAgd2lkdGg6IGNhbGMoMTAwJSAtIDIgKiAke3VpS2l0RGVzaWduVG9rZW5zLnNwYWNpbmczMH0pO1xuICAgIGJhY2tncm91bmQ6IHJnYmEoMjU1LCAyNTUsIDI1NSwgMC41KTtcbiAgfVxuYDtcblxuY29uc3QgRXhwYW5kSWNvbiA9IHN0eWxlZC5kaXZgXG4gIHdpZHRoOiA0MHB4O1xuICBoZWlnaHQ6IDQwcHg7XG4gIGJvcmRlci1yYWRpdXM6ICR7dWlLaXREZXNpZ25Ub2tlbnMuYm9yZGVyUmFkaXVzNH07XG4gIGJhY2tncm91bmQ6IHJnYmEoMjU1LCAyNTUsIDI1NSwgMC4yKTtcbmA7XG5cbmNvbnN0IE1lbnVJdGVtQ29udGFpbmVyID0gc3R5bGVkLmRpdjxUTWVudUl0ZW1Qcm9wcyAmIFROYXZCYXJTa2VsZXRvblByb3BzPmBcbiAgZGlzcGxheTogZmxleDtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gIGdhcDogMTJweDtcbiAgcGFkZGluZzogJHsocHJvcHMpID0+XG4gICAgcHJvcHMuY29udGVudFdpZHRoID09PSAnd2lkZScgfHwgIXByb3BzLmlzRXhwYW5kZWQgPyAnMTJweCcgOiAnMTJweCAyOHB4J307XG4gIGhlaWdodDogNDhweDtcbmA7XG5cbmNvbnN0IE1lbnVJdGVtSWNvbiA9IHN0eWxlZC5kaXZgXG4gIHdpZHRoOiAyNHB4O1xuICBoZWlnaHQ6IDI0cHg7XG4gIGJvcmRlci1yYWRpdXM6ICR7dWlLaXREZXNpZ25Ub2tlbnMuYm9yZGVyUmFkaXVzNH07XG4gIGJhY2tncm91bmQ6IHJnYmEoMjU1LCAyNTUsIDI1NSwgMC4yKTtcbmA7XG5cbmNvbnN0IE1lbnVJdGVtVGl0bGUgPSBzdHlsZWQuZGl2YFxuICBib3JkZXItcmFkaXVzOiAke3VpS2l0RGVzaWduVG9rZW5zLmJvcmRlclJhZGl1czR9O1xuICBiYWNrZ3JvdW5kOiByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMik7XG4gIGZsZXg6IDE7XG4gIGhlaWdodDogMThweDtcbmA7XG5cbmNvbnN0IE1lbnVJdGVtR3JvdXAgPSBzdHlsZWQuZGl2YFxuICB3aWR0aDogMTAwJTtcbmA7XG5cbmV4cG9ydCB7XG4gIE5hdkJhckxheW91dCxcbiAgTmF2QmFySGVhZGVyLFxuICBOYXZCYXJCb2R5LFxuICBOYXZCYXJGb290ZXIsXG4gIEV4cGFuZEljb24sXG4gIE1lbnVJdGVtQ29udGFpbmVyLFxuICBNZW51SXRlbUljb24sXG4gIE1lbnVJdGVtVGl0bGUsXG4gIE1lbnVJdGVtR3JvdXAsXG4gIHR5cGUgVE5hdkJhclNrZWxldG9uUHJvcHMsXG4gIHR5cGUgVE1lbnVJdGVtUHJvcHMsXG59O1xuIl19 */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});

const MenuItem = props => {
  return jsxs(MenuItemContainer, {
    isExpanded: props.isExpanded,
    contentWidth: props.contentWidth,
    children: [jsx(MenuItemIcon, {}), props.isExpanded && jsx(MenuItemTitle, {})]
  });
};
MenuItem.defaultProps = {
  contentWidth: 'wide'
};
const NavBarSkeleton = props => {
  var _context, _context2, _context3, _context4;
  return jsxs(NavBarLayout, {
    isExpanded: props.isExpanded,
    children: [jsx(NavBarHeader, {
      children: jsx(MenuItemGroup, {
        children: jsx(MenuItem, {
          contentWidth: "narrow",
          isExpanded: props.isExpanded
        })
      })
    }), jsxs(NavBarBody, {
      children: [jsx(MenuItemGroup, {
        children: _mapInstanceProperty(_context = [..._keysInstanceProperty(_context2 = Array(2)).call(_context2)]).call(_context, index => jsx(MenuItem, {
          isExpanded: props.isExpanded
        }, index))
      }), jsx(MenuItemGroup, {
        children: _mapInstanceProperty(_context3 = [..._keysInstanceProperty(_context4 = Array(10)).call(_context4)]).call(_context3, index => jsx(MenuItem, {
          isExpanded: props.isExpanded
        }, index))
      }), jsx(MenuItemGroup, {
        children: jsx(MenuItem, {
          isExpanded: props.isExpanded
        })
      })]
    }), jsx(NavBarFooter, {
      isExpanded: props.isExpanded,
      children: jsx(ExpandIcon, {})
    })]
  });
};
NavBarSkeleton.displayName = 'NavBarSkeleton';

// Type guard to help with filtering arrays for nullish elements.
function nonNullable(value) {
  return value !== null && value !== undefined;
}

function ownKeys$1(e, r) { var t = _Object$keys(e); if (_Object$getOwnPropertySymbols) { var o = _Object$getOwnPropertySymbols(e); r && (o = _filterInstanceProperty(o).call(o, function (r) { return _Object$getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread$1(e) { for (var r = 1; r < arguments.length; r++) { var _context6, _context7; var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? _forEachInstanceProperty(_context6 = ownKeys$1(Object(t), !0)).call(_context6, function (r) { _defineProperty(e, r, t[r]); }) : _Object$getOwnPropertyDescriptors ? _Object$defineProperties(e, _Object$getOwnPropertyDescriptors(t)) : _forEachInstanceProperty(_context7 = ownKeys$1(Object(t))).call(_context7, function (r) { _Object$defineProperty(e, r, _Object$getOwnPropertyDescriptor(t, r)); }); } return e; }
var FetchProjectExtensionsNavbar = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "FetchProjectExtensionsNavbar" }, variableDefinitions: [], directives: [], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "projectExtension" }, arguments: [], directives: [], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" }, arguments: [], directives: [] }, { kind: "Field", name: { kind: "Name", value: "installedApplications" }, arguments: [], directives: [], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "application" }, arguments: [], directives: [], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" }, arguments: [], directives: [] }, { kind: "Field", name: { kind: "Name", value: "entryPointUriPath" }, arguments: [], directives: [] }, { kind: "Field", name: { kind: "Name", value: "icon" }, arguments: [], directives: [] }, { kind: "Field", name: { kind: "Name", value: "mainMenuLink" }, arguments: [], directives: [], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" }, arguments: [], directives: [] }, { kind: "Field", name: { kind: "Name", value: "permissions" }, arguments: [], directives: [] }, { kind: "Field", name: { kind: "Name", value: "defaultLabel" }, arguments: [], directives: [] }, { kind: "Field", name: { kind: "Name", value: "labelAllLocales" }, arguments: [], directives: [], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "locale" }, arguments: [], directives: [] }, { kind: "Field", name: { kind: "Name", value: "value" }, arguments: [], directives: [] }] } }] } }, { kind: "Field", name: { kind: "Name", value: "submenuLinks" }, arguments: [], directives: [], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" }, arguments: [], directives: [] }, { kind: "Field", name: { kind: "Name", value: "uriPath" }, arguments: [], directives: [] }, { kind: "Field", name: { kind: "Name", value: "permissions" }, arguments: [], directives: [] }, { kind: "Field", name: { kind: "Name", value: "defaultLabel" }, arguments: [], directives: [] }, { kind: "Field", name: { kind: "Name", value: "labelAllLocales" }, arguments: [], directives: [], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "locale" }, arguments: [], directives: [] }, { kind: "Field", name: { kind: "Name", value: "value" }, arguments: [], directives: [] }] } }] } }] } }] } }] } }] } }], loc: { start: 0, end: 537, source: { body: "query FetchProjectExtensionsNavbar {\n  projectExtension {\n    id\n    installedApplications {\n      application {\n        id\n        entryPointUriPath\n        icon\n        mainMenuLink {\n          id\n          permissions\n          defaultLabel\n          labelAllLocales {\n            locale\n            value\n          }\n        }\n        submenuLinks {\n          id\n          uriPath\n          permissions\n          defaultLabel\n          labelAllLocales {\n            locale\n            value\n          }\n        }\n      }\n    }\n  }\n}\n", name: "GraphQL request", locationOffset: { line: 1, column: 1 } } } };
const getInitialState = isForcedMenuOpen => ({
  isExpanderVisible: true,
  isMenuOpen: isNil(isForcedMenuOpen) ? false : isForcedMenuOpen
});
const isForcedMenuOpenDefaultValue = false;
const reducer = (state, action) => {
  switch (action.type) {
    case 'setActiveItemIndex':
      return _objectSpread$1(_objectSpread$1({}, state), {}, {
        activeItemIndex: action.payload
      });
    case 'unsetActiveItemIndex':
      return _objectSpread$1(_objectSpread$1({}, state), {}, {
        activeItemIndex: undefined
      });
    case 'setIsExpanderVisible':
      return _objectSpread$1(_objectSpread$1({}, state), {}, {
        isExpanderVisible: true
      });
    case 'toggleIsMenuOpen':
      return _objectSpread$1(_objectSpread$1({}, state), {}, {
        isMenuOpen: !state.isMenuOpen
      });
    case 'setIsMenuOpenAndMakeExpanderVisible':
      return _objectSpread$1(_objectSpread$1({}, state), {}, {
        isExpanderVisible: true,
        isMenuOpen: action.payload
      });
    case 'reset':
      return {
        isExpanderVisible: false,
        isMenuOpen: false
      };
    default:
      return state;
  }
};
const isFocusOutEventCalledBySubmenuItem = event => {
  var _event$relatedTarget, _event$target;
  return (
    // a case when a submenu item loses focus
    event.type === 'focusout' && ( // element receiving focus
    (_event$relatedTarget = event.relatedTarget) === null || _event$relatedTarget === void 0 ? void 0 : _event$relatedTarget.matches('a[data-link-level="text-link"]')) && ( // element losing focus
    (_event$target = event.target) === null || _event$target === void 0 ? void 0 : _event$target.matches('a[data-link-level="text-link-sublist"]'))
  );
};
const useNavbarStateManager = props => {
  var _context, _context2, _context4, _context5;
  const navBarNode = useRef(null);
  const applicationsNavBarMenuGroups = useApplicationsMenu('navBarGroups', {
    queryOptions: {
      onError: reportErrorToSentry
    },
    environment: props.environment
  });
  const _useMcQuery = useMcQuery(FetchProjectExtensionsNavbar, {
      skip: !props.environment.servedByProxy,
      context: {
        target: GRAPHQL_TARGETS.SETTINGS_SERVICE
      },
      fetchPolicy: 'cache-and-network',
      onError: reportErrorToSentry
    }),
    projectExtensionsQuery = _useMcQuery.data;
  const allCustomApplicationsNavbarMenu = projectExtensionsQuery && projectExtensionsQuery.projectExtension && projectExtensionsQuery.projectExtension.installedApplications ? _filterInstanceProperty(_context = _mapInstanceProperty(_context2 = projectExtensionsQuery.projectExtension.installedApplications).call(_context2, installedApplication => {
    var _context3;
    const application = installedApplication.application;
    // Map the menu properties to match the one from the proxy schema.
    // This is to ensure that the menu object is the same from the proxy
    // config and the custom apps config, thus allowing them to be
    // concatenated and rendered the same way.
    return {
      key: application.id,
      uriPath: application.entryPointUriPath,
      labelAllLocales: application.mainMenuLink.labelAllLocales || [],
      icon: application.icon,
      permissions: application.mainMenuLink.permissions,
      defaultLabel: application.mainMenuLink.defaultLabel,
      featureToggle: undefined,
      menuVisibility: undefined,
      actionRights: undefined,
      dataFences: undefined,
      submenu: _mapInstanceProperty(_context3 = application.submenuLinks || []).call(_context3, submenuLink => ({
        key: submenuLink.id,
        uriPath: submenuLink.uriPath,
        labelAllLocales: submenuLink.labelAllLocales || [],
        permissions: submenuLink.permissions,
        defaultLabel: submenuLink.defaultLabel,
        featureToggle: undefined,
        menuVisibility: undefined,
        actionRights: undefined,
        dataFences: undefined
      }))
    };
  })).call(_context, nonNullable) : [];
  const cachedIsForcedMenuOpen = window.localStorage.getItem(STORAGE_KEYS.IS_FORCED_MENU_OPEN);
  const isForcedMenuOpen = isNil(cachedIsForcedMenuOpen) ? isForcedMenuOpenDefaultValue : JSON.parse(cachedIsForcedMenuOpen);
  if (isNil(cachedIsForcedMenuOpen)) {
    window.localStorage.setItem(STORAGE_KEYS.IS_FORCED_MENU_OPEN, String(isForcedMenuOpen));
  }
  const _useReducer = useReducer(reducer, getInitialState(isForcedMenuOpen)),
    _useReducer2 = _slicedToArray(_useReducer, 2),
    state = _useReducer2[0],
    dispatch = _useReducer2[1];
  const checkSize = useCallback(throttle(() => {
    const shouldOpen = window.innerWidth > WINDOW_SIZES.STANDARD;
    const canExpandMenu = window.innerWidth > WINDOW_SIZES.WIDE;

    // If the screen is small, we should always keep the menu closed,
    // no matter the settings.
    if (!canExpandMenu) {
      if (state.isMenuOpen || state.isExpanderVisible) {
        // and resets the state to avoid conflicts
        dispatch({
          type: 'reset'
        });
      }
    } else if (isForcedMenuOpen) {
      dispatch({
        type: 'setIsMenuOpenAndMakeExpanderVisible',
        payload: true
      });
    } else if (canExpandMenu && state.isExpanderVisible !== true) {
      dispatch({
        type: 'setIsExpanderVisible'
      });
    } else if (isNil(isForcedMenuOpen) && state.isMenuOpen !== shouldOpen) {
      // User has no settings yet (this.props.isForcedMenuOpen === null)
      // We check the viewport size and:
      // - if screen is big, we open the menu
      // - if screen is small we close it
      dispatch({
        type: 'setIsMenuOpenAndMakeExpanderVisible',
        payload: shouldOpen
      });
    } else if (!isNil(isForcedMenuOpen) && state.isMenuOpen !== isForcedMenuOpen) {
      // User has setting, we should use that and ignore the screen size.
      // Note: if viewport size is small, we should ignore the user settings.
      dispatch({
        type: 'setIsMenuOpenAndMakeExpanderVisible',
        payload: isForcedMenuOpen
      });
    }
  }, 100), [isForcedMenuOpen, state.isExpanderVisible, state.isMenuOpen]);
  const shouldCloseMenuFly = useCallback(event => {
    var _navBarNode$current;
    if (!(navBarNode !== null && navBarNode !== void 0 && (_navBarNode$current = navBarNode.current) !== null && _navBarNode$current !== void 0 && _navBarNode$current.contains(event.target)) && !state.isMenuOpen) {
      dispatch({
        type: 'unsetActiveItemIndex'
      });
    } else if (event.type === 'mouseleave') {
      dispatch({
        type: 'unsetActiveItemIndex'
      });
    } else if (isFocusOutEventCalledBySubmenuItem(event)) {
      dispatch({
        type: 'unsetActiveItemIndex'
      });
    }
  }, [state.isMenuOpen]);
  useEffect(() => {
    window.addEventListener('resize', checkSize);
    window.addEventListener('click', shouldCloseMenuFly, true);
    window.addEventListener('focusout', shouldCloseMenuFly, true);
    return () => {
      window.removeEventListener('resize', checkSize);
      window.removeEventListener('click', shouldCloseMenuFly, true);
      window.removeEventListener('focusout', shouldCloseMenuFly, true);
    };
  }, [checkSize, shouldCloseMenuFly]);
  useEffect(() => {
    checkSize();
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []); // <-- run this only once!!

  useLayoutEffect(() => {
    if (state.isMenuOpen) document.body.classList.add('body__menu-open');
    if (!state.isMenuOpen) document.body.classList.remove('body__menu-open');
  }, [state.isMenuOpen]);
  const handleToggleItem = useCallback(nextActiveItemIndex => {
    if (state.activeItemIndex !== nextActiveItemIndex) dispatch({
      type: 'setActiveItemIndex',
      payload: nextActiveItemIndex
    });
  }, [state.activeItemIndex]);
  const handleToggleMenu = useCallback(() => {
    if (state.isMenuOpen && state.activeItemIndex) {
      dispatch({
        type: 'unsetActiveItemIndex'
      });
    }
    dispatch({
      type: 'toggleIsMenuOpen'
    });
    // Synchronize the menu state with local storage.
    window.localStorage.setItem(STORAGE_KEYS.IS_FORCED_MENU_OPEN, String(!state.isMenuOpen));
  }, [state.activeItemIndex, state.isMenuOpen]);
  const allApplicationsNavbarMenuGroups = _sortInstanceProperty(_context4 = _mapInstanceProperty(_context5 = applicationsNavBarMenuGroups || []).call(_context5, navbarMenuGroup => navbarMenuGroup.key === '2' && allCustomApplicationsNavbarMenu.length > 0 ? {
    key: navbarMenuGroup.key,
    items: [...navbarMenuGroup.items, ...allCustomApplicationsNavbarMenu]
  } : navbarMenuGroup)).call(_context4, (navBarMenuGroupA, navBarMenuGroupB) => Number(navBarMenuGroupA === null || navBarMenuGroupA === void 0 ? void 0 : navBarMenuGroupA.key) - Number(navBarMenuGroupB === null || navBarMenuGroupB === void 0 ? void 0 : navBarMenuGroupB.key));
  return _objectSpread$1(_objectSpread$1({}, state), {}, {
    navBarNode,
    handleToggleItem,
    handleToggleMenu,
    shouldCloseMenuFly,
    allApplicationsNavbarMenuGroups
  });
};

function ownKeys(e, r) { var t = _Object$keys(e); if (_Object$getOwnPropertySymbols) { var o = _Object$getOwnPropertySymbols(e); r && (o = _filterInstanceProperty(o).call(o, function (r) { return _Object$getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var _context10, _context11; var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? _forEachInstanceProperty(_context10 = ownKeys(Object(t), !0)).call(_context10, function (r) { _defineProperty(e, r, t[r]); }) : _Object$getOwnPropertyDescriptors ? _Object$defineProperties(e, _Object$getOwnPropertyDescriptors(t)) : _forEachInstanceProperty(_context11 = ownKeys(Object(t))).call(_context11, function (r) { _Object$defineProperty(e, r, _Object$getOwnPropertyDescriptor(t, r)); }); } return e; }
const getMenuVisibilitiesOfSubmenus = menu => {
  var _context, _context2;
  return _filterInstanceProperty(_context = _mapInstanceProperty(_context2 = menu.submenu).call(_context2, submenu => submenu.menuVisibility)).call(_context, nonNullable);
};
const getMenuVisibilityOfMainmenu = menu => menu.menuVisibility ? [menu.menuVisibility] : [];
const getIsSubmenuRouteActive = (uriPath, props) => {
  var _context3;
  return Boolean(matchPath(props.location.pathname, {
    path: _concatInstanceProperty(_context3 = "/".concat(props.projectKey, "/")).call(_context3, uriPath),
    exact: true,
    strict: false
  }));
};
const ApplicationMenu = props => {
  var _context4, _props$menu$featureTo, _props$menu$actionRig, _props$menu$dataFence, _context5, _context6;
  const _useState = useState(0),
    _useState2 = _slicedToArray(_useState, 2),
    submenuVerticalPosition = _useState2[0],
    setSubmenuVerticalPosition = _useState2[1];
  const _useState3 = useState(false),
    _useState4 = _slicedToArray(_useState3, 2),
    isSubmenuAboveMenuItem = _useState4[0],
    setIsSubmenuAboveMenuItem = _useState4[1];
  const submenuRef = useRef(null);
  const hasSubmenu = _Array$isArray(props.menu.submenu) && props.menu.submenu.length > 0;
  const menuItemIdentifier = snakeCase(props.menu.key);
  const callbackFn = useCallback(entries => {
    var _document$querySelect;
    const menuItemBoundingClientRect = (_document$querySelect = document.querySelector("[data-menuitem=\"".concat(menuItemIdentifier, "\"]"))) === null || _document$querySelect === void 0 ? void 0 : _document$querySelect.getBoundingClientRect();
    const menuItemTop = (menuItemBoundingClientRect === null || menuItemBoundingClientRect === void 0 ? void 0 : menuItemBoundingClientRect.top) || 0;
    const menuItemBottom = (menuItemBoundingClientRect === null || menuItemBoundingClientRect === void 0 ? void 0 : menuItemBoundingClientRect.bottom) || 0;
    const _entries = _slicedToArray(entries, 1),
      entry = _entries[0];
    const doesSubmenuFitWithinViewportBelowMenuItem = entry.boundingClientRect.height + (props.isMenuOpen ? menuItemTop : menuItemBottom) > window.innerHeight;
    // if the submenu does not fit at the bottom of the viewport (below the menu item)
    if (doesSubmenuFitWithinViewportBelowMenuItem) {
      setIsSubmenuAboveMenuItem(true);
      setSubmenuVerticalPosition(window.innerHeight - (props.isMenuOpen ? menuItemBottom : menuItemTop));
      // show the submenu above the menu item
    } else {
      setIsSubmenuAboveMenuItem(false);
      setSubmenuVerticalPosition(props.isMenuOpen ? menuItemTop : menuItemBottom);
    }
  }, [menuItemIdentifier, props.isMenuOpen]);
  const observerRef = useRef(null);
  useLayoutEffect(() => {
    observerRef.current = new IntersectionObserver(callbackFn, {
      rootMargin: '-100% 0px 0px 0px' // we want to observe if the submenu crosses the bottom line of the viewport - therefore we set the root element top margin to -100% of the viewport height
    });

    return () => {
      var _observerRef$current;
      return (_observerRef$current = observerRef.current) === null || _observerRef$current === void 0 ? void 0 : _observerRef$current.disconnect();
    };
  }, [callbackFn, props.isMenuOpen]);
  useLayoutEffect(() => {
    const currentSubmenuRef = submenuRef.current;
    const observer = observerRef.current;
    if (!currentSubmenuRef) return;
    if (observer && currentSubmenuRef) {
      observer.observe(currentSubmenuRef);
    }
    return () => observer === null || observer === void 0 ? void 0 : observer.disconnect();
  }, [menuItemIdentifier, props.isMenuOpen, props.handleToggleItem, callbackFn]);
  const isMainMenuRouteActive = Boolean(matchPath(props.location.pathname, {
    path: _concatInstanceProperty(_context4 = "/".concat(props.projectKey, "/")).call(_context4, props.menu.uriPath),
    exact: false,
    strict: false
  }));
  useEffect(() => {
    // On first render, check which menu is active for the current application and expand
    // the submenu automatically unless the all navbar is collapsed or there are no submenu links.
    if (props.isMenuOpen && isMainMenuRouteActive && hasSubmenu) {
      props.handleToggleItem();
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [props.isMenuOpen]); // <-- (re)run this only when the all menu expands

  const namesOfMenuVisibilitiesOfAllSubmenus = hasSubmenu ? getMenuVisibilitiesOfSubmenus(props.menu) : getMenuVisibilityOfMainmenu(props.menu);
  return jsx(RestrictedMenuItem, {
    keyOfMenuItem: props.menu.key,
    featureToggle: (_props$menu$featureTo = props.menu.featureToggle) !== null && _props$menu$featureTo !== void 0 ? _props$menu$featureTo : undefined,
    permissions: props.menu.permissions,
    actionRights: (_props$menu$actionRig = props.menu.actionRights) !== null && _props$menu$actionRig !== void 0 ? _props$menu$actionRig : undefined,
    dataFences: (_props$menu$dataFence = props.menu.dataFences) !== null && _props$menu$dataFence !== void 0 ? _props$menu$dataFence : undefined,
    projectPermissions: props.projectPermissions,
    menuVisibilities: props.menuVisibilities,
    namesOfMenuVisibilities: namesOfMenuVisibilitiesOfAllSubmenus,
    children: jsxs(MenuItem$1, {
      hasSubmenu: hasSubmenu,
      isActive: props.isActive,
      isMainMenuRouteActive: isMainMenuRouteActive,
      isMenuOpen: props.isMenuOpen,
      onClick: props.handleToggleItem,
      onMouseEnter: props.handleToggleItem,
      onMouseLeave: props.shouldCloseMenuFly,
      identifier: menuItemIdentifier,
      children: [jsx(MenuItemLink, {
        linkTo: _concatInstanceProperty(_context5 = "/".concat(props.projectKey, "/")).call(_context5, props.menu.uriPath),
        useFullRedirectsForLinks: props.useFullRedirectsForLinks,
        onClick: props.onMenuItemClick,
        children: jsx(ItemContainer, {
          labelAllLocales: props.menu.labelAllLocales,
          defaultLabel: props.menu.defaultLabel,
          applicationLocale: props.applicationLocale,
          icon: props.menu.icon,
          isMenuOpen: props.isMenuOpen
        })
      }), jsxs(MenuGroup, {
        id: "group-".concat(props.menu.key),
        level: 2,
        isActive: props.isActive,
        isExpanded: props.isMenuOpen,
        hasSubmenu: hasSubmenu,
        submenuVerticalPosition: submenuVerticalPosition,
        isSubmenuAboveMenuItem: isSubmenuAboveMenuItem,
        ref: submenuRef,
        children: [!props.isMenuOpen && jsx(TooltipContainer, {
          alignsAgainstBottom: isSubmenuAboveMenuItem,
          children: jsx(Tooltip, {
            "aria-owns": "group-".concat(props.menu.key),
            children: jsx(MenuLabel, {
              labelAllLocales: props.menu.labelAllLocales,
              defaultLabel: props.menu.defaultLabel,
              applicationLocale: props.applicationLocale
            })
          })
        }), hasSubmenu ? _mapInstanceProperty(_context6 = props.menu.submenu).call(_context6, submenu => {
          var _context7, _submenu$featureToggl, _submenu$actionRights, _submenu$dataFences, _context8;
          return jsx(RestrictedMenuItem, {
            keyOfMenuItem: submenu.key,
            featureToggle: (_submenu$featureToggl = submenu.featureToggle) !== null && _submenu$featureToggl !== void 0 ? _submenu$featureToggl : undefined,
            permissions: submenu.permissions,
            actionRights: (_submenu$actionRights = submenu.actionRights) !== null && _submenu$actionRights !== void 0 ? _submenu$actionRights : undefined,
            dataFences: (_submenu$dataFences = submenu.dataFences) !== null && _submenu$dataFences !== void 0 ? _submenu$dataFences : undefined,
            projectPermissions: props.projectPermissions,
            menuVisibilities: props.menuVisibilities,
            namesOfMenuVisibilities: submenu.menuVisibility ? [submenu.menuVisibility] : undefined,
            children: jsx(SublistItem, {
              isActive: getIsSubmenuRouteActive(submenu.uriPath, props),
              children: jsx(Text, {
                children: jsx(MenuItemLink, {
                  linkTo: _concatInstanceProperty(_context8 = "/".concat(props.projectKey, "/")).call(_context8, submenu.uriPath)
                  // We want to use an exact matching strategy to avoid multiple
                  // links matching sub-routes.
                  ,
                  exactMatch: true,
                  useFullRedirectsForLinks: props.useFullRedirectsForLinks,
                  onClick: props.onMenuItemClick,
                  isSubmenuLink: true,
                  children: jsx(MenuLabel, {
                    labelAllLocales: submenu.labelAllLocales,
                    defaultLabel: submenu.defaultLabel,
                    applicationLocale: props.applicationLocale
                  })
                })
              })
            })
          }, _concatInstanceProperty(_context7 = "".concat(props.menu.key, "-submenu-")).call(_context7, submenu.key));
        }) : null]
      })]
    })
  }, props.menu.key);
};
ApplicationMenu.propTypes = process.env.NODE_ENV !== "production" ? {
  menu: _pt.oneOfType([_pt.any, _pt.shape({
    defaultLabel: _pt.string
  })]).isRequired,
  isActive: _pt.bool.isRequired,
  isMenuOpen: _pt.bool.isRequired,
  shouldCloseMenuFly: _pt.func.isRequired,
  projectPermissions: _pt.shape({
    permissions: _pt.oneOfType([_pt.any, _pt.oneOf([null])]),
    actionRights: _pt.oneOfType([_pt.any, _pt.oneOf([null])]),
    dataFences: _pt.oneOfType([_pt.any, _pt.oneOf([null])])
  }).isRequired,
  menuVisibilities: _pt.oneOfType([_pt.any, _pt.oneOf([null])]),
  handleToggleItem: _pt.func.isRequired,
  applicationLocale: _pt.string.isRequired,
  projectKey: _pt.string.isRequired,
  useFullRedirectsForLinks: _pt.bool.isRequired
} : {};
ApplicationMenu.displayName = 'ApplicationMenu';
const NavBar = props => {
  const _useNavbarStateManage = useNavbarStateManager({
      environment: props.environment
    }),
    navBarNode = _useNavbarStateManage.navBarNode,
    isMenuOpen = _useNavbarStateManage.isMenuOpen,
    isExpanderVisible = _useNavbarStateManage.isExpanderVisible,
    activeItemIndex = _useNavbarStateManage.activeItemIndex,
    handleToggleItem = _useNavbarStateManage.handleToggleItem,
    handleToggleMenu = _useNavbarStateManage.handleToggleMenu,
    shouldCloseMenuFly = _useNavbarStateManage.shouldCloseMenuFly,
    allApplicationsNavbarMenuGroups = _useNavbarStateManage.allApplicationsNavbarMenuGroups;
  const useFullRedirectsForLinks = Boolean(props.environment.useFullRedirectsForLinks);
  const location = useLocation();
  const projectPermissions = useMemo(() => {
    var _props$project, _props$project2, _props$project3;
    return {
      permissions: normalizeAllAppliedPermissions((_props$project = props.project) === null || _props$project === void 0 ? void 0 : _props$project.allPermissionsForAllApplications.allAppliedPermissions),
      actionRights: normalizeAllAppliedActionRights((_props$project2 = props.project) === null || _props$project2 === void 0 ? void 0 : _props$project2.allPermissionsForAllApplications.allAppliedActionRights),
      dataFences: normalizeAllAppliedDataFences((_props$project3 = props.project) === null || _props$project3 === void 0 ? void 0 : _props$project3.allPermissionsForAllApplications.allAppliedDataFences)
    };
  }, [props.project]);
  const menuVisibilities = useMemo(() => {
    var _props$project4;
    return normalizeAllAppliedMenuVisibilities((_props$project4 = props.project) === null || _props$project4 === void 0 ? void 0 : _props$project4.allPermissionsForAllApplications.allAppliedMenuVisibilities);
  }, [props.project]);
  const applicationLocale = props.applicationLocale;

  // Render the loading navbar as long as all the data
  // hasn't been loaded, or if the project does not exist.
  if (props.isLoading || typeof applicationLocale === 'undefined') {
    return jsx(NavBarSkeleton, {
      isExpanded: isMenuOpen
    });
  }
  return jsxs(NavBarLayout$1, {
    ref: navBarNode,
    children: [jsxs(NavigationHeader, {
      children: [jsx(IconWrapper, {
        children: jsx(Icon, {
          children: jsx("img", {
            src: LogoSVG,
            width: "100%",
            alt: "Logo"
          })
        })
      }), isMenuOpen ? jsx(HeaderTitle, {
        children: "Merchant Center"
      }) : null]
    }), jsxs(MenuGroup, {
      id: "main",
      level: 1,
      children: [jsx(ScrollableMenu, {
        children: jsx(Spacings.Stack, {
          scale: "l",
          children: _mapInstanceProperty(allApplicationsNavbarMenuGroups).call(allApplicationsNavbarMenuGroups, navbarMenuGroup => {
            var _context9;
            return jsx("div", {
              children: _mapInstanceProperty(_context9 = navbarMenuGroup.items).call(_context9, menu => {
                const menuType = 'scrollable';
                const itemIndex = "".concat(menuType, "-").concat(menu.key);
                return jsx(ApplicationMenu, {
                  location: location,
                  menu: menu,
                  isActive: activeItemIndex === itemIndex,
                  handleToggleItem: () => handleToggleItem(itemIndex),
                  isMenuOpen: isMenuOpen,
                  shouldCloseMenuFly: shouldCloseMenuFly,
                  projectPermissions: projectPermissions,
                  menuVisibilities: menuVisibilities,
                  applicationLocale: applicationLocale,
                  projectKey: props.projectKey,
                  useFullRedirectsForLinks: useFullRedirectsForLinks,
                  onMenuItemClick: props.onMenuItemClick
                }, menu.key);
              })
            }, navbarMenuGroup.key);
          })
        })
      }), jsxs(FixedMenu, {
        children: [jsx(Faded, {}), jsx(SupportMenu, {
          children: jsx(MenuItem$1, {
            hasSubmenu: false,
            isActive: false,
            isMenuOpen: isMenuOpen,
            onClick: () => {
              handleToggleItem('fixed-support');
            },
            onMouseEnter: isMenuOpen ? undefined : () => handleToggleItem('fixed-support'),
            onMouseLeave: isMenuOpen ? undefined : shouldCloseMenuFly,
            children: jsx(TextLink, {
              href: SUPPORT_PORTAL_URL,
              rel: "noopener noreferrer",
              target: "_blank",
              children: jsxs(ItemIconText, {
                children: [jsx(IconWrapper, {
                  children: jsx(Icon, {
                    className: "icon",
                    children: jsx(SupportIcon, {
                      size: "scale"
                    })
                  })
                }), isMenuOpen ? jsx(Title, {
                  children: jsx(FormattedMessage, _objectSpread({}, messages['NavBar.MCSupport.title']))
                }) : null]
              })
            })
          })
        }), jsx(MenuExpander, {
          isVisible: isExpanderVisible,
          onClick: handleToggleMenu,
          isMenuOpen: isMenuOpen
        })]
      })]
    })]
  });
};
NavBar.propTypes = process.env.NODE_ENV !== "production" ? {
  applicationLocale: _pt.string,
  projectKey: _pt.string.isRequired,
  isLoading: _pt.bool.isRequired
} : {};
NavBar.displayName = 'NavBar';

export { ApplicationMenu, NavBar as default };
