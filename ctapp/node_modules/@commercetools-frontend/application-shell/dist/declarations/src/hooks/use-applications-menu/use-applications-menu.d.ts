import type { QueryFunctionOptions } from '@apollo/client/react';
import type { TApplicationContext } from '@commercetools-frontend/application-shell-connectors';
import type { TFetchApplicationsMenuQuery } from '../../types/generated/proxy';
export type MenuKey = 'appBar' | 'navBarGroups';
export type MenuLoaderResult<Key extends MenuKey> = Key extends 'appBar' ? TFetchApplicationsMenuQuery['applicationsMenu']['appBar'] : Key extends 'navBarGroups' ? TFetchApplicationsMenuQuery['applicationsMenu']['navBarGroups'] : never;
export type Config = {
    environment: TApplicationContext<{}>['environment'];
    queryOptions?: {
        onError?: QueryFunctionOptions['onError'];
    };
};
declare function useApplicationsMenu<Key extends MenuKey>(menuKey: Key, config: Config): MenuLoaderResult<Key> | undefined;
export default useApplicationsMenu;
