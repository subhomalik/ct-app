import _slicedToArray from '@babel/runtime-corejs3/helpers/esm/slicedToArray';
import _pt from 'prop-types';
import { useCallback, lazy, useState, useEffect, Suspense } from 'react';
import isNil from 'lodash/isNil';
import ReactDOM from 'react-dom';
import { defineMessages, useIntl, FormattedMessage } from 'react-intl';
import { useLocation, useRouteMatch, Redirect, Switch, Route } from 'react-router-dom';
import { ApplicationContextProvider } from '@commercetools-frontend/application-shell-connectors';
import { STORAGE_KEYS, LOGOUT_REASONS, DOMAINS } from '@commercetools-frontend/constants';
import { Notifier } from '@commercetools-frontend/react-notifications';
import { C as CONTAINERS, S as SUSPENSION_REASONS } from './oidc-ff53dfd3.esm.js';
import { A as ApplicationEntryPoint } from './application-entry-point-3613e4a5.esm.js';
import { a as RedirectToProjectCreate, E as ErrorBoundary, b as ApplicationLoader, F as FetchProject, P as ProjectDataLocale } from './index-fe5ba32e.esm.js';
import _Object$keys from '@babel/runtime-corejs3/core-js-stable/object/keys';
import _Object$getOwnPropertySymbols from '@babel/runtime-corejs3/core-js-stable/object/get-own-property-symbols';
import _filterInstanceProperty from '@babel/runtime-corejs3/core-js-stable/instance/filter';
import _Object$getOwnPropertyDescriptor from '@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptor';
import _forEachInstanceProperty from '@babel/runtime-corejs3/core-js-stable/instance/for-each';
import _Object$getOwnPropertyDescriptors from '@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptors';
import _Object$defineProperties from '@babel/runtime-corejs3/core-js-stable/object/define-properties';
import _Object$defineProperty from '@babel/runtime-corejs3/core-js-stable/object/define-property';
import _objectWithoutProperties from '@babel/runtime-corejs3/helpers/esm/objectWithoutProperties';
import _defineProperty from '@babel/runtime-corejs3/helpers/esm/defineProperty';
import _mapInstanceProperty from '@babel/runtime-corejs3/core-js-stable/instance/map';
import { components } from 'react-select';
import { useModalState, InfoDialog } from '@commercetools-frontend/application-components';
import AccessibleHidden from '@commercetools-uikit/accessible-hidden';
import { designTokens } from '@commercetools-uikit/design-system';
import IconButton from '@commercetools-uikit/icon-button';
import { WorldIcon, InformationIcon } from '@commercetools-uikit/icons';
import SelectInput from '@commercetools-uikit/select-input';
import Spacings from '@commercetools-uikit/spacings';
import Text from '@commercetools-uikit/text';
import { jsx, jsxs, Fragment } from '@emotion/react/jsx-runtime';
import '@babel/runtime-corejs3/core-js-stable/instance/concat';
import 'tiny-invariant';
import '@commercetools-frontend/application-config/ssr';
import '@commercetools-frontend/permissions';
import './index-89e5711a.esm.js';
import '@babel/runtime-corejs3/core-js-stable/instance/reduce';
import '@babel/runtime-corejs3/core-js-stable/object/entries';
import '@babel/runtime-corejs3/core-js-stable/reflect/has';
import '@reduxjs/toolkit';
import 'lodash/mapValues';
import 'omit-empty-es';
import 'redux-thunk';
import '@commercetools-frontend/notifications';
import '@commercetools-frontend/sdk';
import '@babel/runtime-corejs3/core-js-stable/instance/index-of';
import '@babel/runtime-corejs3/core-js-stable/instance/slice';
import '@babel/runtime-corejs3/core-js-stable/instance/includes';
import '@commercetools-frontend/sentry';
import '@babel/runtime-corejs3/core-js-stable/instance/starts-with';
import 'redux-logger';
import '@emotion/styled/base';
import '@babel/runtime-corejs3/core-js-stable/instance/find';
import '@babel/runtime-corejs3/core-js-stable/array/is-array';
import '@emotion/react';
import '@commercetools-frontend/i18n';
import '@babel/runtime-corejs3/core-js-stable/url';
import '@commercetools-uikit/flat-button';
import './use-is-served-by-proxy-77984220.esm.js';
import '@babel/runtime-corejs3/helpers/taggedTemplateLiteral';
import 'memoize-one';
import '@commercetools-frontend/assets/images/ct-logo.svg';
import '@commercetools-uikit/loading-spinner';
import '@commercetools-frontend/browser-history';
import '@commercetools-frontend/l10n';
import '@babel/runtime-corejs3/core-js-stable/reflect/construct';
import '@babel/runtime-corejs3/helpers/classCallCheck';
import '@babel/runtime-corejs3/helpers/createClass';
import '@babel/runtime-corejs3/helpers/inherits';
import '@babel/runtime-corejs3/helpers/possibleConstructorReturn';
import '@babel/runtime-corejs3/helpers/getPrototypeOf';
import '@babel/runtime-corejs3/core-js-stable/object/from-entries';
import '@babel/runtime-corejs3/core-js-stable/instance/flags';
import '@apollo/client/react';
import '@flopflip/combine-adapters';
import '@flopflip/http-adapter';
import '@flopflip/launchdarkly-adapter';
import '@flopflip/react-broadcast';
import 'react-redux';
import 'lodash/upperFirst';
import '@commercetools-uikit/design-system/materials/resets.css';
import '@flopflip/memory-adapter';
import '@babel/runtime-corejs3/core-js-stable/json/stringify';
import '@babel/runtime-corejs3/core-js-stable/instance/some';
import '@commercetools-frontend/actions-global';

var messages$1 = defineMessages({
  localesLabel: {
    id: 'LocaleSwitcher.localesLabel',
    description: 'The label for project dropdown switcher',
    defaultMessage: 'Locales'
  },
  dialogLocaleTitle: {
    id: 'LocaleSwitcher.dialogLocaleTitle',
    description: 'The title for the data locale dialog',
    defaultMessage: 'Selecting a data locale'
  },
  dialogLocaleDescription: {
    id: 'LocaleSwitcher.dialogLocaleDescription',
    description: 'The description for the data locale dialog',
    defaultMessage: "The selected data locale will serve as the default setting for all localized fields within the Merchant Center, including names, descriptions, and other localized attributes. <newline></newline><newline></newline> It's important to note that this selection does not affect the interface language of the Merchant Center or any data formatting options. To modify these settings, navigate to your user profile."
  }
});

const _excluded = ["setIsOpen"];
function ownKeys(e, r) { var t = _Object$keys(e); if (_Object$getOwnPropertySymbols) { var o = _Object$getOwnPropertySymbols(e); r && (o = _filterInstanceProperty(o).call(o, function (r) { return _Object$getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var _context2, _context3; var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? _forEachInstanceProperty(_context2 = ownKeys(Object(t), !0)).call(_context2, function (r) { _defineProperty(e, r, t[r]); }) : _Object$getOwnPropertyDescriptors ? _Object$defineProperties(e, _Object$getOwnPropertyDescriptors(t)) : _forEachInstanceProperty(_context3 = ownKeys(Object(t))).call(_context3, function (r) { _Object$defineProperty(e, r, _Object$getOwnPropertyDescriptor(t, r)); }); } return e; }
const LOCALE_SWITCHER_LABEL_ID = 'locale-switcher-label';
const SingleValue = props => {
  return jsxs(Spacings.Inline, {
    scale: "xs",
    alignItems: "center",
    children: [jsx(WorldIcon, {
      size: "big"
    }), jsx(Text.Body, {
      fontWeight: "medium",
      children: props.children
    })]
  });
};
SingleValue.displayName = 'SingleValue';
const PatchedValueContainer = props => jsx(SelectInput.ValueContainer, _objectSpread(_objectSpread({}, props), {}, {
  innerProps: {
    style: {
      display: 'flex',
      fontWeight: designTokens.fontWeight500
    }
  }
}));
PatchedValueContainer.displayName = 'PatchedValueContainer';
const CustomMenuList = props => {
  return jsx(components.MenuList, _objectSpread(_objectSpread({}, props), {}, {
    children: props.children
  }));
};
const CustomGroupHeading = props => {
  const setIsOpen = props.setIsOpen,
    groupProps = _objectWithoutProperties(props, _excluded);
  return jsx(Fragment, {
    children: jsx(components.GroupHeading, _objectSpread(_objectSpread({}, groupProps), {}, {
      children: jsxs(Spacings.Inline, {
        scale: "xs",
        alignItems: "center",
        children: [jsx("span", {
          children: groupProps.children
        }), jsx(IconButton, {
          icon: jsx(InformationIcon, {}),
          label: "Locales info",
          size: "small",
          onClick: () => setIsOpen(true)
        })]
      })
    }))
  });
};
CustomGroupHeading.displayName = 'CustomGroupHeading';
const LocaleSwitcher = props => {
  var _context;
  const _useModalState = useModalState(),
    isModalOpen = _useModalState.isModalOpen,
    openModal = _useModalState.openModal,
    closeModal = _useModalState.closeModal;
  const setProjectDataLocale = props.setProjectDataLocale;
  const getNewLine = () => jsx("br", {});
  const intl = useIntl();
  const handleSelection = useCallback(event => {
    setProjectDataLocale(event.target.value);
  }, [setProjectDataLocale]);
  const localeOptions = [{
    label: jsx(FormattedMessage, _objectSpread({}, messages$1.localesLabel)),
    options: _mapInstanceProperty(_context = props.availableLocales).call(_context, locale => ({
      label: locale,
      value: locale
    }))
  }];
  return jsxs("div", {
    children: [jsx(AccessibleHidden, {
      children: jsx("span", {
        id: LOCALE_SWITCHER_LABEL_ID,
        children: jsx(FormattedMessage, _objectSpread({}, messages$1.localesLabel))
      })
    }), jsx(SelectInput, {
      value: props.projectDataLocale,
      name: "locale-switcher",
      "aria-labelledby": LOCALE_SWITCHER_LABEL_ID,
      onChange: handleSelection,
      options: localeOptions,
      components: {
        SingleValue,
        ValueContainer: PatchedValueContainer,
        MenuList: CustomMenuList,
        GroupHeading: groupProps => jsx(CustomGroupHeading, _objectSpread(_objectSpread({}, groupProps), {}, {
          setIsOpen: openModal
        }))
      },
      isClearable: false,
      backspaceRemovesValue: false,
      isSearchable: false,
      horizontalConstraint: 'auto',
      appearance: "quiet",
      maxMenuHeight: 360,
      minMenuWidth: 3
    }), jsx(InfoDialog, {
      isOpen: isModalOpen,
      title: intl.formatMessage(messages$1.dialogLocaleTitle),
      onClose: closeModal,
      children: jsx(Text.Body, {
        intlMessage: _objectSpread(_objectSpread({}, messages$1.dialogLocaleDescription), {}, {
          values: {
            newline: getNewLine
          }
        })
      })
    })]
  });
};
LocaleSwitcher.propTypes = process.env.NODE_ENV !== "production" ? {
  projectDataLocale: _pt.string.isRequired,
  setProjectDataLocale: _pt.func.isRequired,
  availableLocales: _pt.arrayOf(_pt.string).isRequired
} : {};

const ProjectExpired = /*#__PURE__*/lazy(() => import('./project-expired-0424eced.esm.js' /* webpackChunkName: "project-expired" */));

const ProjectNotFound = /*#__PURE__*/lazy(() => import('./project-not-found-5b22b7b6.esm.js' /* webpackChunkName: "project-not-found" */));

const ProjectNotInitialized = /*#__PURE__*/lazy(() => import('./project-not-initialized-a94f1b5f.esm.js' /* webpackChunkName: "project-not-initialized" */));

const ProjectSuspended = /*#__PURE__*/lazy(() => import('./project-suspended-11c0922f.esm.js' /* webpackChunkName: "project-suspended" */));

var messages = defineMessages({
  trialDaysLeft: {
    id: 'Project.trialDaysLeft',
    defaultMessage: 'Your project trial period will expire in {daysLeft} {daysLeft, plural, one {day} other {days}}. For any inquiries please contact sales@commercetools.com'
  }
});

// A trial expire notification should be displayed from 2 weeks before the project expires
const minDaysToDisplayNotification = 14;
const maxDaysToDisplayNotification = 0;
const shouldShowNotificationForTrialExpired = daysLeft => !isNil(daysLeft) && daysLeft <= minDaysToDisplayNotification && daysLeft >= maxDaysToDisplayNotification;
const ProjectContainer = props => {
  var _props$render;
  const intl = useIntl();
  const location = useLocation();
  const match = useRouteMatch();
  const _useState = useState(null),
    _useState2 = _slicedToArray(_useState, 2),
    localeSwitcherNode = _useState2[0],
    setLocaleSwitcherNode = _useState2[1];
  useEffect(() => {
    /**
     * NOTE: in order to render a component into a portal, the portal
     * DOM node needs to exists in the DOM.
     * If we try to get the DOM node by id before the components are
     * actually mounted, we won't find the DOM node, hence we can't render
     * the portal.
     * To work around this issue, we simply wait that the component is
     * mounted, then we render the portal.
     *
     * From the reactjs docs: https://reactjs.org/docs/portals.html
     * "
     *   If a child component requires to be attached to the DOM tree
     *   immediately when mounted, for example to measure a
     *   DOM node, or uses 'autoFocus' in a descendant, add
     *   state to Modal and only render the children when Modal
     *   is inserted in the DOM tree.
     * "
     */
    setLocaleSwitcherNode(document.getElementById(CONTAINERS.LOCALE_SWITCHER));
  }, [setLocaleSwitcherNode]);
  const projectKey = match.params.projectKey;
  useEffect(() => {
    // Ensure to sync the `projectKey` from the URL with localStorage.
    if (projectKey) {
      window.localStorage.setItem(STORAGE_KEYS.ACTIVE_PROJECT_KEY, projectKey);
    }
  }, [projectKey]);
  const hasNoProjects = props.user && props.user.projects.total === 0;
  /**
   * Given the user does not have any projects and account creation (sign up) is not yet
   * enabled the user will be logged out.
   *
   * Given the user does not have project (and as a result is not part of an organization)
   * the account application gets control over render. If any other application
   * is requested to render a full page redirect (to have the proxy serve the request) occurs
   * given the application is served by the proxy.
   *    Given the application is not served by the proxy we do not perform a redirect as
   *    otherwise a redirect loop can occur as no application is able to handle the route.
   */
  if (hasNoProjects && props.environment.enableSignUp !== true && props.environment.servedByProxy) return jsx(Redirect, {
    to: "/logout?reason=".concat(LOGOUT_REASONS.NO_PROJECTS)
  });
  if (hasNoProjects && props.environment.enableSignUp) return jsxs(Switch, {
    children: [jsx(Route, {
      path: "/account",
      children: (_props$render = props.render) === null || _props$render === void 0 ? void 0 : _props$render.call(props)
    }), jsx(Route, {
      children: jsx(RedirectToProjectCreate, {})
    })]
  });
  return jsx(ErrorBoundary, {
    pathname: location.pathname,
    children: jsx(Suspense, {
      fallback: jsx(ApplicationLoader, {}),
      children: jsx(FetchProject, {
        skip: !props.user || !props.user.defaultProjectKey,
        projectKey: projectKey,
        children: _ref => {
          let isProjectLoading = _ref.isLoading,
            project = _ref.project;
          // TODO: do something if there is an `error`?
          if (isProjectLoading) return jsx(ApplicationLoader, {});
          if (!project) return jsx(ProjectNotFound, {});
          if (project.suspension && project.suspension.isActive) return jsx(ProjectSuspended, {
            isTemporary: project.suspension.reason === SUSPENSION_REASONS.TEMPORARY_MAINTENANCE
          });
          if (project.expiry && project.expiry.isActive) return jsx(ProjectExpired, {});
          if (project.initialized === false) return jsx(ProjectNotInitialized, {});
          return jsx(ProjectDataLocale, {
            locales: project.languages,
            children: _ref2 => {
              var _project$expiry$daysL;
              let locale = _ref2.locale,
                setProjectDataLocale = _ref2.setProjectDataLocale;
              return jsx(ApplicationContextProvider, {
                user: props.user,
                project: project,
                projectDataLocale: locale,
                environment: props.environment,
                children: jsxs(Fragment, {
                  children: [shouldShowNotificationForTrialExpired((_project$expiry$daysL = project.expiry.daysLeft) !== null && _project$expiry$daysL !== void 0 ? _project$expiry$daysL : undefined) && jsx(Notifier, {
                    kind: "warning",
                    domain: DOMAINS.GLOBAL,
                    text: intl.formatMessage(messages.trialDaysLeft, {
                      daysLeft: project.expiry.daysLeft || 0
                    })
                  }), localeSwitcherNode &&
                  // Render the `<LocaleSwitcher>` only if the project has more
                  // than one language.
                  project.languages.length > 1 && /*#__PURE__*/ReactDOM.createPortal(jsx(LocaleSwitcher
                  // Be explicit on listing the props so that we can better assert it.
                  , {
                    projectDataLocale: locale,
                    setProjectDataLocale: setProjectDataLocale,
                    availableLocales: project.languages
                  }), localeSwitcherNode), jsx(ApplicationEntryPoint, {
                    environment: props.environment,
                    disableRoutePermissionCheck: props.disableRoutePermissionCheck,
                    render: props.render,
                    children: props.children
                  })]
                })
              });
            }
          });
        }
      })
    })
  });
};
ProjectContainer.propTypes = process.env.NODE_ENV !== "production" ? {
  disableRoutePermissionCheck: _pt.bool,
  render: _pt.func,
  children: _pt.node
} : {};
ProjectContainer.displayName = 'ProjectContainer';

export { ProjectContainer as default };
