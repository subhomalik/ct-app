'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _Object$keys = require('@babel/runtime-corejs3/core-js-stable/object/keys');
var _Object$getOwnPropertySymbols = require('@babel/runtime-corejs3/core-js-stable/object/get-own-property-symbols');
var _filterInstanceProperty = require('@babel/runtime-corejs3/core-js-stable/instance/filter');
var _Object$getOwnPropertyDescriptor = require('@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptor');
var _forEachInstanceProperty = require('@babel/runtime-corejs3/core-js-stable/instance/for-each');
var _Object$getOwnPropertyDescriptors = require('@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptors');
var _Object$defineProperties = require('@babel/runtime-corejs3/core-js-stable/object/define-properties');
var _Object$defineProperty = require('@babel/runtime-corejs3/core-js-stable/object/define-property');
var _defineProperty = require('@babel/runtime-corejs3/helpers/defineProperty');
require('prop-types');
var react$1 = require('react');
var reactIntl = require('react-intl');
var utils = require('@commercetools-uikit/utils');
var react = require('@emotion/react');
var designSystem = require('@commercetools-uikit/design-system');
var jsxRuntime = require('@emotion/react/jsx-runtime');

function _interopDefault (e) { return e && e.__esModule ? e : { 'default': e }; }

var _Object$keys__default = /*#__PURE__*/_interopDefault(_Object$keys);
var _Object$getOwnPropertySymbols__default = /*#__PURE__*/_interopDefault(_Object$getOwnPropertySymbols);
var _filterInstanceProperty__default = /*#__PURE__*/_interopDefault(_filterInstanceProperty);
var _Object$getOwnPropertyDescriptor__default = /*#__PURE__*/_interopDefault(_Object$getOwnPropertyDescriptor);
var _forEachInstanceProperty__default = /*#__PURE__*/_interopDefault(_forEachInstanceProperty);
var _Object$getOwnPropertyDescriptors__default = /*#__PURE__*/_interopDefault(_Object$getOwnPropertyDescriptors);
var _Object$defineProperties__default = /*#__PURE__*/_interopDefault(_Object$defineProperties);
var _Object$defineProperty__default = /*#__PURE__*/_interopDefault(_Object$defineProperty);

const getBaseStyles = () => {
  return "\n   color: ".concat(designSystem.designTokens.colorSolid, ";\n");
};
const truncate = "\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n";
const nowrap = "\n  white-space: nowrap;\n";
const bold = "\n  font-weight: ".concat(designSystem.designTokens.fontWeight600, ";\n");
const italic = "\n  font-style: italic;\n";
const strikethrough = "\n  text-decoration: line-through;\n";
const getTone = tone => {
  switch (tone) {
    case 'information':
      return "color: ".concat(designSystem.designTokens.colorInfo, ";");
    case 'secondary':
      return "color: ".concat(designSystem.designTokens.colorNeutral40, ";");
    case 'positive':
      return "color: ".concat(designSystem.designTokens.colorPrimary25, ";");
    case 'primary':
      return "color: ".concat(designSystem.designTokens.colorPrimary30, ";");
    case 'negative':
      return "color: ".concat(designSystem.designTokens.fontColorForInputWhenError, ";");
    case 'inverted':
      return "color: ".concat(designSystem.designTokens.colorSurface, ";");
    case 'warning':
      return "color: ".concat(designSystem.designTokens.colorWarning, ";");
    case 'critical':
      return "color: ".concat(designSystem.designTokens.colorError40, ";");
    case 'tertiary':
      return "color: ".concat(designSystem.designTokens.colorNeutral60, ";");
    case 'inherit':
      return 'color: inherit;';
    default:
      return "";
  }
};
const getFontWeight = props => {
  switch (props.fontWeight) {
    case 'regular':
      return "font-weight: ".concat(designSystem.designTokens.fontWeight400, ";");
    case 'medium':
      return "font-weight: ".concat(designSystem.designTokens.fontWeight500, ";");
    case 'bold':
      return "font-weight: ".concat(designSystem.designTokens.fontWeight600, ";");
    default:
      if (props.isBold) {
        return "font-weight: ".concat(designSystem.designTokens.fontWeight600, ";");
      }
      return "";
  }
};
const getElementFontSize = elementType => {
  switch (elementType) {
    case 'h1':
      return designSystem.designTokens.fontSize60;
    case 'h2':
      return designSystem.designTokens.fontSize50;
    case 'h3':
      return designSystem.designTokens.fontSize40;
    case 'h4':
      return designSystem.designTokens.fontSize30;
    case 'h5':
      return designSystem.designTokens.fontSize30;
    default:
      return '1rem';
  }
};
const getElementLineHeight = elementType => {
  switch (elementType) {
    case 'h1':
      return designSystem.designTokens.lineHeight60;
    case 'h2':
      return designSystem.designTokens.lineHeight50;
    case 'h3':
      return designSystem.designTokens.lineHeight30;
    case 'h4':
      return designSystem.designTokens.lineHeight20;
    case 'h5':
      return designSystem.designTokens.lineHeight20;
    default:
      return designSystem.designTokens.lineHeight40;
  }
};
const getElementFontWeight = elementType => {
  switch (elementType) {
    case 'h1':
      return designSystem.designTokens.fontWeight600;
    case 'h2':
    case 'h3':
    case 'h4':
    case 'h5':
      return designSystem.designTokens.fontWeight500;
    default:
      return 'normal';
  }
};
const bodyStyles = props => /*#__PURE__*/react.css(getBaseStyles(), " margin:0;font-size:", designSystem.designTokens.fontSize30, ";line-height:", designSystem.designTokens.lineHeight40, ";font-weight:", designSystem.designTokens.fontWeight400, ";", props.isItalic && italic, " ", props.isStrikethrough && strikethrough, " ", props.tone && getTone(props.tone), " ", getFontWeight(props), " ", props.truncate && truncate, " ", props.nowrap && nowrap, ";" + ("" ), "" );
const headlineStyles = props => /*#__PURE__*/react.css(getBaseStyles(), " margin:0;font-size:", getElementFontSize(props.as), ";line-height:", getElementLineHeight(props.as), ";font-weight:", getElementFontWeight(props.as), ";", props.truncate && truncate, " ", props.nowrap && nowrap, ";" + ("" ), "" );
const subheadlineStyles = props => /*#__PURE__*/react.css(getBaseStyles(), " margin:0;font-size:", getElementFontSize(props.as), ";line-height:", getElementLineHeight(props.as), ";font-weight:", getElementFontWeight(props.as), ";", props.truncate && truncate, " ", props.nowrap && nowrap, " ", props.isBold && bold, " ", props.tone && getTone(props.tone), ";" + ("" ), "" );
const wrapStyles = () => /*#__PURE__*/react.css(getBaseStyles(), " font-size:1rem;white-space:pre-wrap;" + ("" ), "" );
const detailStyles = props => /*#__PURE__*/react.css(getBaseStyles(), " font-size:", designSystem.designTokens.fontSize20, ";line-height:", designSystem.designTokens.lineHeight20, ";font-weight:", designSystem.designTokens.fontWeight400, ";", props.isItalic && italic, " ", props.isStrikethrough && strikethrough, " ", props.tone && getTone(props.tone), " ", getFontWeight(props), " ", props.truncate && truncate, " ", props.nowrap && nowrap, ";" + ("" ), "" );
const captionStyles = props => /*#__PURE__*/react.css(getBaseStyles(), " font-size:", designSystem.designTokens.fontSize10, ";line-height:", designSystem.designTokens.lineHeight05, ";font-weight:", designSystem.designTokens.fontWeight400, ";", props.isItalic && italic, " ", props.isStrikethrough && strikethrough, " ", props.tone && getTone(props.tone), " ", getFontWeight(props), " ", props.truncate && truncate, " ", props.nowrap && nowrap, ";" + ("" ), "" );

function ownKeys(e, r) { var t = _Object$keys__default["default"](e); if (_Object$getOwnPropertySymbols__default["default"]) { var o = _Object$getOwnPropertySymbols__default["default"](e); r && (o = _filterInstanceProperty__default["default"](o).call(o, function (r) { return _Object$getOwnPropertyDescriptor__default["default"](e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var _context, _context2; var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? _forEachInstanceProperty__default["default"](_context = ownKeys(Object(t), !0)).call(_context, function (r) { _defineProperty(e, r, t[r]); }) : _Object$getOwnPropertyDescriptors__default["default"] ? _Object$defineProperties__default["default"](e, _Object$getOwnPropertyDescriptors__default["default"](t)) : _forEachInstanceProperty__default["default"](_context2 = ownKeys(Object(t))).call(_context2, function (r) { _Object$defineProperty__default["default"](e, r, _Object$getOwnPropertyDescriptor__default["default"](t, r)); }); } return e; }
const warnIfMissingTitle = (props, componentName) => {
  if (typeof props.title === 'string') ;
};
const warnIfMissingContent = (props, componentName) => {
  props.intlMessage || Boolean(react$1.Children.count(props.children));
};
const Text = props => jsxRuntime.jsx(jsxRuntime.Fragment, {
  children: props.intlMessage ? jsxRuntime.jsx(reactIntl.FormattedMessage, _objectSpread({}, props.intlMessage)) : props.children
});
Text.propTypes = {};
Text.displayName = 'Text';
const Headline = props => {
  warnIfMissingTitle(props);
  warnIfMissingContent(props);
  const HeadlineElement = props.as;
  if (!HeadlineElement) {
    return jsxRuntime.jsx("span", {
      id: props.id,
      children: jsxRuntime.jsx(Text, {
        intlMessage: props.intlMessage,
        children: props.children
      })
    });
  }
  return jsxRuntime.jsx(HeadlineElement, _objectSpread(_objectSpread({
    id: props.id,
    css: headlineStyles(props),
    title: props.title
  }, utils.filterDataAttributes(props)), {}, {
    children: jsxRuntime.jsx(Text, {
      intlMessage: props.intlMessage,
      children: props.children
    })
  }));
};
Headline.propTypes = {};
Headline.displayName = 'TextHeadline';
const Subheadline = props => {
  warnIfMissingTitle(props);
  warnIfMissingContent(props);
  const SubheadlineElement = props.as;
  if (!SubheadlineElement) {
    return jsxRuntime.jsx(Text, {
      id: props.id,
      intlMessage: props.intlMessage,
      children: props.children
    });
  }
  return jsxRuntime.jsx(SubheadlineElement, _objectSpread(_objectSpread({
    id: props.id,
    title: props.title,
    css: subheadlineStyles(props)
  }, utils.filterDataAttributes(props)), {}, {
    children: jsxRuntime.jsx(Text, {
      intlMessage: props.intlMessage,
      children: props.children
    })
  }));
};
Subheadline.propTypes = {};
Subheadline.displayName = 'TextSubheadline';
const Wrap = props => {
  warnIfMissingTitle(props);
  warnIfMissingContent(props);
  return jsxRuntime.jsx("div", _objectSpread(_objectSpread({
    id: props.id,
    css: wrapStyles(),
    title: props.title
  }, utils.filterDataAttributes(props)), {}, {
    children: jsxRuntime.jsx(Text, {
      intlMessage: props.intlMessage,
      children: props.children
    })
  }));
};
Wrap.propTypes = {};
Wrap.displayName = 'TextWrap';
const Body = props => {
  warnIfMissingTitle(props);
  warnIfMissingContent(props);
  if (props.as) {
    const BodyElement = props.as;
    return jsxRuntime.jsx(BodyElement, _objectSpread(_objectSpread({
      id: props.id,
      css: bodyStyles(props),
      title: props.title
    }, utils.filterDataAttributes(props)), {}, {
      children: jsxRuntime.jsx(Text, {
        intlMessage: props.intlMessage,
        children: props.children
      })
    }));
  }
  return jsxRuntime.jsx("p", _objectSpread(_objectSpread({
    id: props.id,
    css: bodyStyles(props),
    title: props.title
  }, utils.filterDataAttributes(props)), {}, {
    children: jsxRuntime.jsx(Text, {
      intlMessage: props.intlMessage,
      children: props.children
    })
  }));
};
Body.propTypes = {};
Body.displayName = 'TextBody';
const Detail = props => {
  warnIfMissingTitle(props);
  warnIfMissingContent(props);
  if (props.as) {
    const TextDetailElement = props.as;
    return jsxRuntime.jsx(TextDetailElement, _objectSpread(_objectSpread({
      id: props.id,
      css: detailStyles(props),
      title: props.title,
      "aria-labelledby": props['aria-labelledby']
    }, utils.filterDataAttributes(props)), {}, {
      children: jsxRuntime.jsx(Text, {
        intlMessage: props.intlMessage,
        children: props.children
      })
    }));
  }
  return jsxRuntime.jsx("div", _objectSpread(_objectSpread({
    css: detailStyles(props),
    title: props.title,
    "aria-labelledby": props['aria-labelledby']
  }, utils.filterDataAttributes(props)), {}, {
    children: jsxRuntime.jsx(Text, {
      intlMessage: props.intlMessage,
      children: props.children
    })
  }));
};
Detail.propTypes = {};
Detail.displayName = 'TextDetail';
const Caption = props => {
  warnIfMissingTitle(props);
  warnIfMissingContent(props);
  return jsxRuntime.jsx("div", _objectSpread(_objectSpread({
    css: captionStyles(props),
    title: props.title,
    "aria-labelledby": props['aria-labelledby']
  }, utils.filterDataAttributes(props)), {}, {
    children: jsxRuntime.jsx(Text, {
      intlMessage: props.intlMessage,
      children: props.children
    })
  }));
};
Caption.propTypes = {};
Caption.displayName = 'TextCaption';
var text = {
  Headline,
  Wrap,
  Subheadline,
  Detail,
  Body,
  Caption
};

// NOTE: This string will be replaced on build time with the package version.
var version = "18.3.0";

exports["default"] = text;
exports.version = version;
