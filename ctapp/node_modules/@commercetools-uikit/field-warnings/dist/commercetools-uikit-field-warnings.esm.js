import _slicedToArray from '@babel/runtime-corejs3/helpers/esm/slicedToArray';
import _pt from 'prop-types';
import _mapInstanceProperty from '@babel/runtime-corejs3/core-js-stable/instance/map';
import _filterInstanceProperty from '@babel/runtime-corejs3/core-js-stable/instance/filter';
import _Object$entries from '@babel/runtime-corejs3/core-js-stable/object/entries';
import 'react';
import { WarningMessage } from '@commercetools-uikit/messages';
import { jsx, Fragment } from '@emotion/react/jsx-runtime';

const isObject = obj => typeof obj === 'object';
const FieldWarnings = props => {
  var _context, _context2;
  if (!props.isVisible) return null;
  if (!props.warnings || !isObject(props.warnings)) return null;
  return jsx(Fragment, {
    children: _mapInstanceProperty(_context = _filterInstanceProperty(_context2 = _Object$entries(props.warnings)
    // Only render warnings which have truthy values, to avoid
    // rendering a warning that has falsy values.
    ).call(_context2, _ref => {
      let _ref2 = _slicedToArray(_ref, 2),
        warning = _ref2[1];
      return warning;
    })).call(_context, _ref3 => {
      let _ref4 = _slicedToArray(_ref3, 2),
        key = _ref4[0],
        warning = _ref4[1];
      // We might not use a custom warning renderer, so we fall back to null
      // to enable the default warnings to kick in
      const warningElement = props.renderWarning ? props.renderWarning(key, warning) : null;
      // Render a custom warning if one was provided.
      // Custom warnings take precedence over the default warnings
      if (warningElement) return jsx(WarningMessage, {
        id: props.id,
        children: warningElement
      }, key);
      const defaultWarningElement = props.renderDefaultWarning ? props.renderDefaultWarning(key, warning) : null;
      // Render a default warning if one was provided.
      // Default warnings take precedence over the known warnings
      if (defaultWarningElement) return jsx(WarningMessage, {
        id: props.id,
        children: defaultWarningElement
      }, key);
      // Render nothing in case the warning is not known and no custom warning
      // was returned
      return null;
    })
  });
};
FieldWarnings.propTypes = process.env.NODE_ENV !== "production" ? {
  id: _pt.string,
  warnings: _pt.objectOf(_pt.bool),
  isVisible: _pt.bool,
  renderWarning: _pt.func,
  renderDefaultWarning: _pt.func
} : {};
FieldWarnings.displayName = 'FieldWarnings';
var FieldWarnings$1 = FieldWarnings;

// NOTE: This string will be replaced on build time with the package version.
var version = "18.3.0";

export { FieldWarnings$1 as default, version };
