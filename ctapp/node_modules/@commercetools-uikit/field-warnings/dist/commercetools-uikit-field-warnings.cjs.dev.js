'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _slicedToArray = require('@babel/runtime-corejs3/helpers/slicedToArray');
var _pt = require('prop-types');
var _mapInstanceProperty = require('@babel/runtime-corejs3/core-js-stable/instance/map');
var _filterInstanceProperty = require('@babel/runtime-corejs3/core-js-stable/instance/filter');
var _Object$entries = require('@babel/runtime-corejs3/core-js-stable/object/entries');
require('react');
var messages = require('@commercetools-uikit/messages');
var jsxRuntime = require('@emotion/react/jsx-runtime');

function _interopDefault (e) { return e && e.__esModule ? e : { 'default': e }; }

var _pt__default = /*#__PURE__*/_interopDefault(_pt);
var _mapInstanceProperty__default = /*#__PURE__*/_interopDefault(_mapInstanceProperty);
var _filterInstanceProperty__default = /*#__PURE__*/_interopDefault(_filterInstanceProperty);
var _Object$entries__default = /*#__PURE__*/_interopDefault(_Object$entries);

const isObject = obj => typeof obj === 'object';
const FieldWarnings = props => {
  var _context, _context2;
  if (!props.isVisible) return null;
  if (!props.warnings || !isObject(props.warnings)) return null;
  return jsxRuntime.jsx(jsxRuntime.Fragment, {
    children: _mapInstanceProperty__default["default"](_context = _filterInstanceProperty__default["default"](_context2 = _Object$entries__default["default"](props.warnings)
    // Only render warnings which have truthy values, to avoid
    // rendering a warning that has falsy values.
    ).call(_context2, _ref => {
      let _ref2 = _slicedToArray(_ref, 2),
        warning = _ref2[1];
      return warning;
    })).call(_context, _ref3 => {
      let _ref4 = _slicedToArray(_ref3, 2),
        key = _ref4[0],
        warning = _ref4[1];
      // We might not use a custom warning renderer, so we fall back to null
      // to enable the default warnings to kick in
      const warningElement = props.renderWarning ? props.renderWarning(key, warning) : null;
      // Render a custom warning if one was provided.
      // Custom warnings take precedence over the default warnings
      if (warningElement) return jsxRuntime.jsx(messages.WarningMessage, {
        id: props.id,
        children: warningElement
      }, key);
      const defaultWarningElement = props.renderDefaultWarning ? props.renderDefaultWarning(key, warning) : null;
      // Render a default warning if one was provided.
      // Default warnings take precedence over the known warnings
      if (defaultWarningElement) return jsxRuntime.jsx(messages.WarningMessage, {
        id: props.id,
        children: defaultWarningElement
      }, key);
      // Render nothing in case the warning is not known and no custom warning
      // was returned
      return null;
    })
  });
};
FieldWarnings.propTypes = process.env.NODE_ENV !== "production" ? {
  id: _pt__default["default"].string,
  warnings: _pt__default["default"].objectOf(_pt__default["default"].bool),
  isVisible: _pt__default["default"].bool,
  renderWarning: _pt__default["default"].func,
  renderDefaultWarning: _pt__default["default"].func
} : {};
FieldWarnings.displayName = 'FieldWarnings';
var FieldWarnings$1 = FieldWarnings;

// NOTE: This string will be replaced on build time with the package version.
var version = "18.3.0";

exports["default"] = FieldWarnings$1;
exports.version = version;
