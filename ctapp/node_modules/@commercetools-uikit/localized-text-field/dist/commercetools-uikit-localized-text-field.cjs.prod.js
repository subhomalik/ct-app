'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _defineProperty = require('@babel/runtime-corejs3/helpers/defineProperty');
var _classCallCheck = require('@babel/runtime-corejs3/helpers/classCallCheck');
var _createClass = require('@babel/runtime-corejs3/helpers/createClass');
var _possibleConstructorReturn = require('@babel/runtime-corejs3/helpers/possibleConstructorReturn');
var _getPrototypeOf = require('@babel/runtime-corejs3/helpers/getPrototypeOf');
var _inherits = require('@babel/runtime-corejs3/helpers/inherits');
require('prop-types');
var _someInstanceProperty = require('@babel/runtime-corejs3/core-js-stable/instance/some');
var _Object$values = require('@babel/runtime-corejs3/core-js-stable/object/values');
var _Reflect$construct = require('@babel/runtime-corejs3/core-js-stable/reflect/construct');
var _Object$keys = require('@babel/runtime-corejs3/core-js-stable/object/keys');
var _Object$getOwnPropertySymbols = require('@babel/runtime-corejs3/core-js-stable/object/get-own-property-symbols');
var _filterInstanceProperty = require('@babel/runtime-corejs3/core-js-stable/instance/filter');
var _Object$getOwnPropertyDescriptor = require('@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptor');
var _forEachInstanceProperty = require('@babel/runtime-corejs3/core-js-stable/instance/for-each');
var _Object$getOwnPropertyDescriptors = require('@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptors');
var _Object$defineProperties = require('@babel/runtime-corejs3/core-js-stable/object/define-properties');
var _Object$defineProperty = require('@babel/runtime-corejs3/core-js-stable/object/define-property');
var react = require('react');
var utils = require('@commercetools-uikit/utils');
var Constraints = require('@commercetools-uikit/constraints');
var Spacings = require('@commercetools-uikit/spacings');
var FieldLabel = require('@commercetools-uikit/field-label');
var LocalizedTextInput = require('@commercetools-uikit/localized-text-input');
var FieldErrors = require('@commercetools-uikit/field-errors');
var FieldWarnings = require('@commercetools-uikit/field-warnings');
var jsxRuntime = require('@emotion/react/jsx-runtime');

function _interopDefault (e) { return e && e.__esModule ? e : { 'default': e }; }

var _someInstanceProperty__default = /*#__PURE__*/_interopDefault(_someInstanceProperty);
var _Object$values__default = /*#__PURE__*/_interopDefault(_Object$values);
var _Reflect$construct__default = /*#__PURE__*/_interopDefault(_Reflect$construct);
var _Object$keys__default = /*#__PURE__*/_interopDefault(_Object$keys);
var _Object$getOwnPropertySymbols__default = /*#__PURE__*/_interopDefault(_Object$getOwnPropertySymbols);
var _filterInstanceProperty__default = /*#__PURE__*/_interopDefault(_filterInstanceProperty);
var _Object$getOwnPropertyDescriptor__default = /*#__PURE__*/_interopDefault(_Object$getOwnPropertyDescriptor);
var _forEachInstanceProperty__default = /*#__PURE__*/_interopDefault(_forEachInstanceProperty);
var _Object$getOwnPropertyDescriptors__default = /*#__PURE__*/_interopDefault(_Object$getOwnPropertyDescriptors);
var _Object$defineProperties__default = /*#__PURE__*/_interopDefault(_Object$defineProperties);
var _Object$defineProperty__default = /*#__PURE__*/_interopDefault(_Object$defineProperty);
var Constraints__default = /*#__PURE__*/_interopDefault(Constraints);
var Spacings__default = /*#__PURE__*/_interopDefault(Spacings);
var FieldLabel__default = /*#__PURE__*/_interopDefault(FieldLabel);
var LocalizedTextInput__default = /*#__PURE__*/_interopDefault(LocalizedTextInput);
var FieldErrors__default = /*#__PURE__*/_interopDefault(FieldErrors);
var FieldWarnings__default = /*#__PURE__*/_interopDefault(FieldWarnings);

function ownKeys(e, r) { var t = _Object$keys__default["default"](e); if (_Object$getOwnPropertySymbols__default["default"]) { var o = _Object$getOwnPropertySymbols__default["default"](e); r && (o = _filterInstanceProperty__default["default"](o).call(o, function (r) { return _Object$getOwnPropertyDescriptor__default["default"](e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var _context3, _context4; var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? _forEachInstanceProperty__default["default"](_context3 = ownKeys(Object(t), !0)).call(_context3, function (r) { _defineProperty(e, r, t[r]); }) : _Object$getOwnPropertyDescriptors__default["default"] ? _Object$defineProperties__default["default"](e, _Object$getOwnPropertyDescriptors__default["default"](t)) : _forEachInstanceProperty__default["default"](_context4 = ownKeys(Object(t))).call(_context4, function (r) { _Object$defineProperty__default["default"](e, r, _Object$getOwnPropertyDescriptor__default["default"](t, r)); }); } return e; }
function _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? _Reflect$construct__default["default"](o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(_Reflect$construct__default["default"](Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function () { return !!t; })(); }
const sequentialId = utils.createSequentialId('localized-text-field-');
const sequentialErrorsId = utils.createSequentialId('localized-text-field-error-')();
const sequentialWarningsId = utils.createSequentialId('localized-text-field-warning-')();
const hasErrors = errors => {
  var _context;
  return errors && _someInstanceProperty__default["default"](_context = _Object$values__default["default"](errors)).call(_context, Boolean);
};
const hasWarnings = warnings => {
  var _context2;
  return warnings && _someInstanceProperty__default["default"](_context2 = _Object$values__default["default"](warnings)).call(_context2, Boolean);
};
let LocalizedTextField = /*#__PURE__*/function (_Component) {
  _inherits(LocalizedTextField, _Component);
  function LocalizedTextField() {
    var _this;
    _classCallCheck(this, LocalizedTextField);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _callSuper(this, LocalizedTextField, [...args]);
    _this.state = {
      // We generate an id in case no id is provided by the parent to attach the
      // label to the input component.
      id: _this.props.id
    };
    return _this;
  }
  _createClass(LocalizedTextField, [{
    key: "render",
    value: function render() {
      const hasError = this.props.touched && hasErrors(this.props.errors);
      const hasWarning = this.props.touched && hasWarnings(this.props.warnings);
      if (this.props.hintIcon) ;
      if (this.props.hideLanguageExpansionControls) ;
      return jsxRuntime.jsx(Constraints__default["default"].Horizontal, {
        max: this.props.horizontalConstraint,
        children: jsxRuntime.jsxs(Spacings__default["default"].Stack, {
          scale: "xs",
          children: [jsxRuntime.jsx(FieldLabel__default["default"], {
            title: this.props.title,
            hint: this.props.hint,
            description: this.props.description,
            onInfoButtonClick: this.props.onInfoButtonClick,
            hintIcon: this.props.hintIcon,
            badge: this.props.badge,
            hasRequiredIndicator: this.props.isRequired,
            htmlFor: this.state.id
          }), jsxRuntime.jsx(LocalizedTextInput__default["default"], _objectSpread(_objectSpread({
            autoComplete: this.props.autoComplete,
            id: this.state.id,
            name: this.props.name,
            value: this.props.value,
            onChange: this.props.onChange,
            selectedLanguage: this.props.selectedLanguage,
            onBlur: this.props.onBlur,
            onFocus: this.props.onFocus,
            hideLanguageExpansionControls: this.props.hideLanguageExpansionControls,
            defaultExpandLanguages: this.props.defaultExpandLanguages,
            isAutofocussed: this.props.isAutofocussed,
            isDisabled: this.props.isDisabled,
            isReadOnly: this.props.isReadOnly,
            errors: this.props.errorsByLanguage,
            hasError: hasError,
            hasWarning: hasWarning,
            placeholder: this.props.placeholder,
            horizontalConstraint: "scale"
          }, utils.filterDataAttributes(this.props)), {}, {
            "aria-invalid": hasError,
            "aria-errormessage": sequentialErrorsId,
            additionalInfo: this.props.additionalInfo && this.props.additionalInfo
          })), jsxRuntime.jsx(FieldErrors__default["default"], {
            id: sequentialErrorsId,
            errors: this.props.errors,
            isVisible: hasError,
            renderError: this.props.renderError
          }), jsxRuntime.jsx(FieldWarnings__default["default"], {
            id: sequentialWarningsId,
            warnings: this.props.warnings,
            isVisible: hasWarning,
            renderWarning: this.props.renderWarning
          })]
        })
      });
    }
  }], [{
    key: "toFieldErrors",
    value:
    /**
     * Use this function to convert the Formik `errors` object type to
     * our custom field errors type.
     * This is primarly useful when using TypeScript.
     */
    function toFieldErrors(errors) {
      return errors;
    }
  }]);
  return LocalizedTextField;
}(react.Component);
LocalizedTextField.displayName = 'LocalizedTextField';
LocalizedTextField.defaultProps = {
  horizontalConstraint: 'scale'
};
LocalizedTextField.getDerivedStateFromProps = (props, state) => ({
  id: utils.getFieldId(props, state, sequentialId)
});
LocalizedTextField.propTypes = {};
var LocalizedTextField$1 = LocalizedTextField;

// NOTE: This string will be replaced on build time with the package version.
var version = "18.3.0";

exports["default"] = LocalizedTextField$1;
exports.version = version;
