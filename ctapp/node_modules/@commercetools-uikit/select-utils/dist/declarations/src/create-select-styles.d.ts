import { ReactNode } from 'react';
type TProps = {
    isDisabled?: boolean;
    hasError?: boolean;
    hasWarning?: boolean;
    isReadOnly?: boolean;
    showOptionGroupDivider?: boolean;
    menuPortalZIndex?: number;
    iconLeft?: ReactNode;
    isMulti?: boolean;
    hasValue?: boolean;
    controlShouldRenderValue?: boolean;
    appearance?: 'default' | 'quiet';
    minMenuWidth?: 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 'scale' | 'auto';
    maxMenuWidth?: 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 'scale' | 'auto';
    horizontalConstraint?: 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 'scale' | 'auto';
};
type TBase = {
    fontColorForInput?: string;
    borderColorForInput?: string;
    color?: string;
    backgroundColor?: string;
    borderTop?: string;
    borderColor?: string;
    boxShadow?: string;
    pointerEvents?: string;
};
type TState = {
    isFocused?: boolean;
    isDisabled?: boolean;
    isSelected?: boolean;
};
export default function createSelectStyles(props: TProps): {
    control: (base: TBase, state: TState) => {
        '&:focus-within': {
            borderColor: "var(--border-color-for-input-when-focused, hsl(175, 55%, 45%))" | null;
        };
        '&:hover': {
            borderColor: "var(--color-neutral-95, hsl(232, 18%, 95%))" | "var(--border-color-for-input-when-disabled, hsl(232, 18%, 80%))" | "var(--border-color-for-input-when-error, #e60050)" | "var(--border-color-for-input-when-warning, #f16d0e)" | "var(--border-color-for-input-when-hovered, hsl(232, 18%, 80%))" | "var(--border-color-for-input-as-quiet, transparent)";
            backgroundColor: "var(--background-color-for-input-when-hovered, hsl(232, 18%, 98%))" | "var(--background-color-for-input-as-quiet-when-hovered, hsl(0deg 0% 10% / 2%))" | null;
        };
        pointerEvents: string;
        color: string | undefined;
        display?: string | undefined;
        fontSize: "var(--font-size-30, 1rem)";
        backgroundColor: "var(--background-color-for-input, #fff)" | "var(--background-color-for-input-when-disabled, hsl(232, 18%, 95%))" | "var(--background-color-for-input-when-readonly, hsl(232, 18%, 95%))" | "var(--background-color-for-input-as-quiet, transparent)";
        borderColor: "var(--color-neutral-95, hsl(232, 18%, 95%))" | "var(--border-color-for-input, hsl(232, 18%, 80%))" | "var(--border-color-for-input-when-focused, hsl(175, 55%, 45%))" | "var(--border-color-for-input-when-disabled, hsl(232, 18%, 80%))" | "var(--border-color-for-input-when-error, #e60050)" | "var(--border-color-for-input-when-warning, #f16d0e)" | "var(--border-color-for-input-as-quiet, transparent)";
        borderWidth: "var(--border-width-1, 1px)" | "var(--border-width-2, 2px)";
        borderRadius: "var(--border-radius-for-input, 4px)";
        minHeight: "var(--height-for-input, 40px)";
        cursor: string;
        padding: "var(--padding-for-input, 0 var(--spacing-30))" | "var(--padding-for-input-as-quiet, 0 var(--spacing-20))";
        transition: string;
        outline: number;
        boxShadow: string;
        fontColorForInput?: string | undefined;
        borderColorForInput?: string | undefined;
        borderTop?: string | undefined;
    };
    menu: (base: TBase) => {
        border: string;
        borderRadius: "var(--border-radius-for-input, 4px)";
        backgroundColor: "var(--background-color-for-input, #fff)";
        boxShadow: string;
        fontSize: "var(--font-size-30, 1rem)";
        fontFamily: string;
        margin: string;
        borderColor: string | undefined;
        width: string;
        minWidth: string;
        maxWidth: string;
        fontColorForInput?: string | undefined;
        borderColorForInput?: string | undefined;
        color?: string | undefined;
        borderTop?: string | undefined;
        pointerEvents?: string | undefined;
    };
    indicatorSeparator: (base: TBase) => {
        display: string;
        margin: string;
        padding: string;
        marginLeft: "var(--spacing-10, 4px)";
        fontColorForInput?: string | undefined;
        borderColorForInput?: string | undefined;
        color?: string | undefined;
        backgroundColor?: string | undefined;
        borderTop?: string | undefined;
        borderColor?: string | undefined;
        boxShadow?: string | undefined;
        pointerEvents?: string | undefined;
    };
    dropdownIndicator: (base: TBase) => {
        color: "var(--font-color-for-input, #1a1a1a)";
        margin: string;
        padding: string;
        marginLeft: "var(--spacing-20, 8px)";
        fill: "var(--color-neutral-60, hsl(232, 18%, 60%))" | "var(--color-warning, #f16d0e)" | "var(--color-error, #e60050)" | "var(--font-color-for-input-when-disabled, hsl(232, 18%, 60%))";
        fontColorForInput?: string | undefined;
        borderColorForInput?: string | undefined;
        backgroundColor?: string | undefined;
        borderTop?: string | undefined;
        borderColor?: string | undefined;
        boxShadow?: string | undefined;
        pointerEvents?: string | undefined;
    };
    clearIndicator: (base: TBase) => {
        display: string;
        padding: number;
        marginLeft: "var(--spacing-20, 8px)";
        fontColorForInput?: string | undefined;
        borderColorForInput?: string | undefined;
        color?: string | undefined;
        backgroundColor?: string | undefined;
        borderTop?: string | undefined;
        borderColor?: string | undefined;
        boxShadow?: string | undefined;
        pointerEvents?: string | undefined;
    };
    menuList: (base: TBase) => {
        padding: string;
        borderRadius: "var(--border-radius-for-input, 4px)";
        backgroundColor: "var(--background-color-for-input, #fff)";
        fontColorForInput?: string | undefined;
        borderColorForInput?: string | undefined;
        color?: string | undefined;
        borderTop?: string | undefined;
        borderColor?: string | undefined;
        boxShadow?: string | undefined;
        pointerEvents?: string | undefined;
    };
    menuPortal: (base: TBase) => {
        zIndex: number | undefined;
        fontColorForInput?: string | undefined;
        borderColorForInput?: string | undefined;
        color?: string | undefined;
        backgroundColor?: string | undefined;
        borderTop?: string | undefined;
        borderColor?: string | undefined;
        boxShadow?: string | undefined;
        pointerEvents?: string | undefined;
    };
    multiValue: (base: TBase) => {
        display: string;
        alignItems: string;
        height: string;
        backgroundColor: "var(--color-neutral-95, hsl(232, 18%, 95%))";
        padding: string;
        border: string;
        fontColorForInput?: string | undefined;
        borderColorForInput?: string | undefined;
        color?: string | undefined;
        borderTop?: string | undefined;
        borderColor?: string | undefined;
        boxShadow?: string | undefined;
        pointerEvents?: string | undefined;
    };
    multiValueLabel: (base: TBase) => {
        fontSize: "var(--font-size-30, 1rem)";
        color: string | undefined;
        padding: string;
        borderRadius: string;
        border: string;
        borderWidth: string;
        '&:last-child': {
            borderRadius: "var(--border-radius-2, 2px)";
            borderWidth: "var(--border-width-1, 1px)";
        };
        fontColorForInput?: string | undefined;
        borderColorForInput?: string | undefined;
        backgroundColor?: string | undefined;
        borderTop?: string | undefined;
        borderColor?: string | undefined;
        boxShadow?: string | undefined;
        pointerEvents?: string | undefined;
    };
    multiValueRemove: (base: TBase, state: TState) => {
        borderColor: "var(--color-neutral, hsl(232, 18%, 80%))";
        padding: string;
        borderRadius: string;
        borderStyle: string;
        borderWidth: string;
        pointerEvents: string | undefined;
        backgroundColor: "var(--color-neutral-95, hsl(232, 18%, 95%))";
        'svg *': {
            fill: string;
        };
        '&:hover, &:focus': {
            borderColor: "var(--color-warning, #f16d0e)";
            backgroundColor: "var(--color-neutral-95, hsl(232, 18%, 95%))";
            'svg *': {
                fill: "var(--color-error, #e60050)";
            };
        };
        fontColorForInput?: string | undefined;
        borderColorForInput?: string | undefined;
        color?: string | undefined;
        borderTop?: string | undefined;
        boxShadow?: string | undefined;
    };
    indicatorsContainer: () => {
        background: string;
        display: string;
        alignItems: string;
    };
    option: (base: TBase, state: TState) => {
        transition: string;
        padding: string;
        lineHeight: "var(--line-height-40, 1.625rem)";
        cursor: string;
        color: string | undefined;
        backgroundColor: string | undefined;
        '&:active': {
            color: string | undefined;
            backgroundColor: "var(--background-color-for-input-when-active, hsl(203.05555555555554, 93.9130434783%, 95%))";
        };
        fontColorForInput?: string | undefined;
        borderColorForInput?: string | undefined;
        borderTop?: string | undefined;
        borderColor?: string | undefined;
        boxShadow?: string | undefined;
        pointerEvents?: string | undefined;
    };
    placeholder: (base: TBase) => {
        color: "var(--color-neutral-60, hsl(232, 18%, 60%))" | "var(--color-warning, #f16d0e)" | "var(--color-error, #e60050)";
        width: string;
        overflow: string;
        whiteSpace: string;
        textOverflow: string;
        fill: string | undefined;
        fontColorForInput?: string | undefined;
        borderColorForInput?: string | undefined;
        backgroundColor?: string | undefined;
        borderTop?: string | undefined;
        borderColor?: string | undefined;
        boxShadow?: string | undefined;
        pointerEvents?: string | undefined;
    };
    valueContainer: (base: TBase) => {
        padding: string;
        backgroundColor: string;
        overflow: string;
        display: string;
        fill: "var(--color-neutral-60, hsl(232, 18%, 60%))" | "var(--font-color-for-input-when-disabled, hsl(232, 18%, 60%))";
        fontColorForInput?: string | undefined;
        borderColorForInput?: string | undefined;
        color?: string | undefined;
        borderTop?: string | undefined;
        borderColor?: string | undefined;
        boxShadow?: string | undefined;
        pointerEvents?: string | undefined;
    };
    singleValue: (base: TBase) => {
        color: "var(--color-warning, #f16d0e)" | "var(--color-error, #e60050)" | "var(--font-color-for-input, #1a1a1a)" | "var(--font-color-for-input-when-disabled, hsl(232, 18%, 60%))" | "var(--font-color-for-input-when-readonly, hsl(232, 18%, 40%))";
        fontColorForInput?: string | undefined;
        borderColorForInput?: string | undefined;
        backgroundColor?: string | undefined;
        borderTop?: string | undefined;
        borderColor?: string | undefined;
        boxShadow?: string | undefined;
        pointerEvents?: string | undefined;
    };
    group: (base: TBase) => {
        padding: number;
        '&:not(:first-of-type)': {
            borderTop: string | undefined;
        };
        fontColorForInput?: string | undefined;
        borderColorForInput?: string | undefined;
        color?: string | undefined;
        backgroundColor?: string | undefined;
        borderTop?: string | undefined;
        borderColor?: string | undefined;
        boxShadow?: string | undefined;
        pointerEvents?: string | undefined;
    };
    groupHeading: (base: TBase) => {
        color: "var(--font-color-for-input-when-readonly, hsl(232, 18%, 40%))";
        fontSize: "var(--font-size-20, 0.875rem)";
        borderBottom: string;
        textTransform: string;
        fontWeight: "var(--font-weight-500, 500)";
        padding: string;
        '&:empty': {
            padding: number;
        };
        fontColorForInput?: string | undefined;
        borderColorForInput?: string | undefined;
        backgroundColor?: string | undefined;
        borderTop?: string | undefined;
        borderColor?: string | undefined;
        boxShadow?: string | undefined;
        pointerEvents?: string | undefined;
    };
    container: (base: TBase, state: TState) => {
        fontFamily: string;
        minHeight: "var(--height-for-input-as-small, 32px)";
        borderRadius: "var(--border-radius-for-input, 4px)";
        borderColor: string | undefined;
        boxShadow: string | undefined;
        fontColorForInput?: string | undefined;
        borderColorForInput?: string | undefined;
        color?: string | undefined;
        backgroundColor?: string | undefined;
        borderTop?: string | undefined;
        pointerEvents?: string | undefined;
    };
};
export {};
