import _Object$keys from '@babel/runtime-corejs3/core-js-stable/object/keys';
import _Object$getOwnPropertySymbols from '@babel/runtime-corejs3/core-js-stable/object/get-own-property-symbols';
import _filterInstanceProperty from '@babel/runtime-corejs3/core-js-stable/instance/filter';
import _Object$getOwnPropertyDescriptor from '@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptor';
import _forEachInstanceProperty from '@babel/runtime-corejs3/core-js-stable/instance/for-each';
import _Object$getOwnPropertyDescriptors from '@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptors';
import _Object$defineProperties from '@babel/runtime-corejs3/core-js-stable/object/define-properties';
import _Object$defineProperty from '@babel/runtime-corejs3/core-js-stable/object/define-property';
import _defineProperty from '@babel/runtime-corejs3/helpers/esm/defineProperty';
import _pt from 'prop-types';
import { cloneElement } from 'react';
import { css } from '@emotion/react';
import { useTheme, designTokens } from '@commercetools-uikit/design-system';
import Text from '@commercetools-uikit/text';
import SpacingsInline from '@commercetools-uikit/spacings-inline';
import { useWarnDeprecatedProp } from '@commercetools-uikit/utils';
import { jsx, jsxs } from '@emotion/react/jsx-runtime';

function ownKeys(e, r) { var t = _Object$keys(e); if (_Object$getOwnPropertySymbols) { var o = _Object$getOwnPropertySymbols(e); r && (o = _filterInstanceProperty(o).call(o, function (r) { return _Object$getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var _context, _context2; var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? _forEachInstanceProperty(_context = ownKeys(Object(t), !0)).call(_context, function (r) { _defineProperty(e, r, t[r]); }) : _Object$getOwnPropertyDescriptors ? _Object$defineProperties(e, _Object$getOwnPropertyDescriptors(t)) : _forEachInstanceProperty(_context2 = ownKeys(Object(t))).call(_context2, function (r) { _Object$defineProperty(e, r, _Object$getOwnPropertyDescriptor(t, r)); }); } return e; }
const tonesPropsMap = themedValue => ({
  critical: {
    styles: {
      backgroundColor: designTokens.colorError95,
      borderColor: designTokens.colorError85,
      color: designTokens.colorError40
    },
    iconColor: 'error'
  },
  warning: {
    styles: {
      backgroundColor: designTokens.colorWarning95,
      borderColor: designTokens.colorWarning85,
      color: designTokens.colorWarning40
    },
    iconColor: 'warning'
  },
  positive: {
    styles: {
      backgroundColor: designTokens.backgroundColorForStampAsPositive,
      borderColor: designTokens.colorPrimary85,
      color: designTokens.fontColorForStampAsPositive
    },
    iconColor: themedValue('primary', 'success')
  },
  information: {
    styles: {
      backgroundColor: designTokens.colorInfo95,
      borderColor: designTokens.colorInfo85,
      color: designTokens.colorInfo40
    },
    iconColor: 'info'
  },
  primary: {
    styles: {
      backgroundColor: designTokens.backgroundColorForStampAsPrimary,
      borderColor: designTokens.colorPrimary85,
      color: designTokens.colorPrimary25
    },
    iconColor: 'primary40'
  },
  secondary: {
    styles: {
      backgroundColor: designTokens.colorNeutral95,
      borderColor: designTokens.colorNeutral85,
      color: designTokens.colorNeutral40
    },
    iconColor: 'neutral60'
  }
});
const getPaddingStyle = props => {
  if (props.isCondensed) return /*#__PURE__*/css("padding:", designTokens.spacing05, " ", designTokens.spacing10, ";" + (process.env.NODE_ENV === "production" ? "" : ";label:getPaddingStyle;"), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInN0YW1wLnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFxSGMiLCJmaWxlIjoic3RhbXAudHN4Iiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY2xvbmVFbGVtZW50LCB0eXBlIFJlYWN0RWxlbWVudCwgdHlwZSBSZWFjdE5vZGUgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBjc3MgfSBmcm9tICdAZW1vdGlvbi9yZWFjdCc7XG5pbXBvcnQge1xuICBkZXNpZ25Ub2tlbnMsXG4gIHVzZVRoZW1lLFxuICB0eXBlIFRVc2VUaGVtZVJlc3VsdCxcbn0gZnJvbSAnQGNvbW1lcmNldG9vbHMtdWlraXQvZGVzaWduLXN5c3RlbSc7XG5pbXBvcnQgVGV4dCBmcm9tICdAY29tbWVyY2V0b29scy11aWtpdC90ZXh0JztcbmltcG9ydCBTcGFjaW5nc0lubGluZSBmcm9tICdAY29tbWVyY2V0b29scy11aWtpdC9zcGFjaW5ncy1pbmxpbmUnO1xuaW1wb3J0IHsgdXNlV2FybkRlcHJlY2F0ZWRQcm9wIH0gZnJvbSAnQGNvbW1lcmNldG9vbHMtdWlraXQvdXRpbHMnO1xuXG5leHBvcnQgdHlwZSBUVG9uZSA9XG4gIHwgJ2NyaXRpY2FsJ1xuICB8ICd3YXJuaW5nJ1xuICB8ICdwb3NpdGl2ZSdcbiAgfCAnaW5mb3JtYXRpb24nXG4gIHwgJ3ByaW1hcnknXG4gIHwgJ3NlY29uZGFyeSc7XG5cbmV4cG9ydCB0eXBlIFRTdGFtcFByb3BzID0ge1xuICAvKipcbiAgICogSW5kaWNhdGVzIHRoZSBjb2xvciBzY2hlbWUgb2Ygc3RhbXBcbiAgICovXG4gIHRvbmU/OiBUVG9uZTtcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgcmVuZGVycyBhIGNvbmRlbnNlZCB2ZXJzaW9uIG9mIHRoZSBzdGFtcC5cbiAgICovXG4gIGlzQ29uZGVuc2VkOiBib29sZWFuO1xuICAvKipcbiAgICogQ29udGVudCB0byByZW5kZXIgd2l0aGluIHRoZSBzdGFtcC5cbiAgICogVGhpcyBwcm9wZXJ0eSBoYXMgYmVlbiAqKmRlcHJlY2F0ZWQqKiBpbiBmYXZvciBvZiBgbGFiZWxgLlxuICAgKi9cbiAgY2hpbGRyZW4/OiBSZWFjdE5vZGU7XG4gIC8qKlxuICAgKiBJY29uIHRvIHJlbmRlciBiZXNpZGUgKGxlZnQpIHRoZSBzdGFtcCB0ZXh0LlxuICAgKi9cbiAgaWNvbj86IFJlYWN0RWxlbWVudDtcbiAgLyoqXG4gICAqIFRleHQgdG8gcmVuZGVyIHdpdGhpbiB0aGUgc3RhbXAuXG4gICAqL1xuICBsYWJlbD86IHN0cmluZztcbn07XG5cbnR5cGUgVG9uZVJlbGF0ZWRQcm9wcyA9IHtcbiAgc3R5bGVzOiB7XG4gICAgYmFja2dyb3VuZENvbG9yOiBzdHJpbmc7XG4gICAgYm9yZGVyQ29sb3I6IHN0cmluZztcbiAgICBjb2xvcjogc3RyaW5nO1xuICB9O1xuICBpY29uQ29sb3I6IHN0cmluZztcbn07XG5cbnR5cGUgU3R5bGVzRnVuY3Rpb25QYXJhbXMgPSBUU3RhbXBQcm9wcyAmIHsgb3ZlcnJpZGVUZXh0Q29sb3I/OiBib29sZWFuIH07XG5cbmNvbnN0IHRvbmVzUHJvcHNNYXAgPSAoXG4gIHRoZW1lZFZhbHVlOiBUVXNlVGhlbWVSZXN1bHRbJ3RoZW1lZFZhbHVlJ11cbik6IFJlY29yZDxUVG9uZSwgVG9uZVJlbGF0ZWRQcm9wcz4gPT4gKHtcbiAgY3JpdGljYWw6IHtcbiAgICBzdHlsZXM6IHtcbiAgICAgIGJhY2tncm91bmRDb2xvcjogZGVzaWduVG9rZW5zLmNvbG9yRXJyb3I5NSxcbiAgICAgIGJvcmRlckNvbG9yOiBkZXNpZ25Ub2tlbnMuY29sb3JFcnJvcjg1LFxuICAgICAgY29sb3I6IGRlc2lnblRva2Vucy5jb2xvckVycm9yNDAsXG4gICAgfSxcbiAgICBpY29uQ29sb3I6ICdlcnJvcicsXG4gIH0sXG4gIHdhcm5pbmc6IHtcbiAgICBzdHlsZXM6IHtcbiAgICAgIGJhY2tncm91bmRDb2xvcjogZGVzaWduVG9rZW5zLmNvbG9yV2FybmluZzk1LFxuICAgICAgYm9yZGVyQ29sb3I6IGRlc2lnblRva2Vucy5jb2xvcldhcm5pbmc4NSxcbiAgICAgIGNvbG9yOiBkZXNpZ25Ub2tlbnMuY29sb3JXYXJuaW5nNDAsXG4gICAgfSxcbiAgICBpY29uQ29sb3I6ICd3YXJuaW5nJyxcbiAgfSxcbiAgcG9zaXRpdmU6IHtcbiAgICBzdHlsZXM6IHtcbiAgICAgIGJhY2tncm91bmRDb2xvcjogZGVzaWduVG9rZW5zLmJhY2tncm91bmRDb2xvckZvclN0YW1wQXNQb3NpdGl2ZSxcbiAgICAgIGJvcmRlckNvbG9yOiBkZXNpZ25Ub2tlbnMuY29sb3JQcmltYXJ5ODUsXG4gICAgICBjb2xvcjogZGVzaWduVG9rZW5zLmZvbnRDb2xvckZvclN0YW1wQXNQb3NpdGl2ZSxcbiAgICB9LFxuICAgIGljb25Db2xvcjogdGhlbWVkVmFsdWUoJ3ByaW1hcnknLCAnc3VjY2VzcycpLFxuICB9LFxuICBpbmZvcm1hdGlvbjoge1xuICAgIHN0eWxlczoge1xuICAgICAgYmFja2dyb3VuZENvbG9yOiBkZXNpZ25Ub2tlbnMuY29sb3JJbmZvOTUsXG4gICAgICBib3JkZXJDb2xvcjogZGVzaWduVG9rZW5zLmNvbG9ySW5mbzg1LFxuICAgICAgY29sb3I6IGRlc2lnblRva2Vucy5jb2xvckluZm80MCxcbiAgICB9LFxuICAgIGljb25Db2xvcjogJ2luZm8nLFxuICB9LFxuICBwcmltYXJ5OiB7XG4gICAgc3R5bGVzOiB7XG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6IGRlc2lnblRva2Vucy5iYWNrZ3JvdW5kQ29sb3JGb3JTdGFtcEFzUHJpbWFyeSxcbiAgICAgIGJvcmRlckNvbG9yOiBkZXNpZ25Ub2tlbnMuY29sb3JQcmltYXJ5ODUsXG4gICAgICBjb2xvcjogZGVzaWduVG9rZW5zLmNvbG9yUHJpbWFyeTI1LFxuICAgIH0sXG4gICAgaWNvbkNvbG9yOiAncHJpbWFyeTQwJyxcbiAgfSxcbiAgc2Vjb25kYXJ5OiB7XG4gICAgc3R5bGVzOiB7XG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6IGRlc2lnblRva2Vucy5jb2xvck5ldXRyYWw5NSxcbiAgICAgIGJvcmRlckNvbG9yOiBkZXNpZ25Ub2tlbnMuY29sb3JOZXV0cmFsODUsXG4gICAgICBjb2xvcjogZGVzaWduVG9rZW5zLmNvbG9yTmV1dHJhbDQwLFxuICAgIH0sXG4gICAgaWNvbkNvbG9yOiAnbmV1dHJhbDYwJyxcbiAgfSxcbn0pO1xuXG5leHBvcnQgY29uc3QgYXZhaWxhYmxlVG9uZXM6IFRUb25lW10gPSBbXG4gICdjcml0aWNhbCcsXG4gICd3YXJuaW5nJyxcbiAgJ3Bvc2l0aXZlJyxcbiAgJ2luZm9ybWF0aW9uJyxcbiAgJ3ByaW1hcnknLFxuICAnc2Vjb25kYXJ5Jyxcbl07XG5jb25zdCBnZXRQYWRkaW5nU3R5bGUgPSAocHJvcHM6IFN0eWxlc0Z1bmN0aW9uUGFyYW1zKSA9PiB7XG4gIGlmIChwcm9wcy5pc0NvbmRlbnNlZClcbiAgICByZXR1cm4gY3NzYFxuICAgICAgcGFkZGluZzogJHtkZXNpZ25Ub2tlbnMuc3BhY2luZzA1fSAke2Rlc2lnblRva2Vucy5zcGFjaW5nMTB9O1xuICAgIGA7XG4gIHJldHVybiBjc3NgXG4gICAgcGFkZGluZzogJHtkZXNpZ25Ub2tlbnMuc3BhY2luZzEwfSAke2Rlc2lnblRva2Vucy5zcGFjaW5nMjV9O1xuICBgO1xufTtcblxuY29uc3QgZ2V0SWNvbkNvbG9yID0gKFxuICBwcm9wczogU3R5bGVzRnVuY3Rpb25QYXJhbXMsXG4gIG92ZXJyaWRlVGV4dENvbG9yOiBib29sZWFuLFxuICB0aGVtZWRWYWx1ZTogVFVzZVRoZW1lUmVzdWx0Wyd0aGVtZWRWYWx1ZSddXG4pID0+IHtcbiAgaWYgKCFvdmVycmlkZVRleHRDb2xvcikge1xuICAgIHJldHVybiAnaW5oZXJpdCc7XG4gIH1cblxuICBjb25zdCB0b25lUHJvcHMgPSBwcm9wcy50b25lICYmIHRvbmVzUHJvcHNNYXAodGhlbWVkVmFsdWUpW3Byb3BzLnRvbmVdO1xuICByZXR1cm4gdG9uZVByb3BzID8gdG9uZVByb3BzLmljb25Db2xvciA6ICcnO1xufTtcblxuY29uc3QgZ2V0VG9uZVN0eWxlcyA9IChcbiAgcHJvcHM6IFN0eWxlc0Z1bmN0aW9uUGFyYW1zLFxuICB0aGVtZWRWYWx1ZTogVFVzZVRoZW1lUmVzdWx0Wyd0aGVtZWRWYWx1ZSddXG4pID0+IHtcbiAgaWYgKCFwcm9wcy50b25lIHx8ICF0b25lc1Byb3BzTWFwKHRoZW1lZFZhbHVlKVtwcm9wcy50b25lXSkge1xuICAgIHJldHVybiBjc3NgYDtcbiAgfVxuXG4gIGNvbnN0IHRvbmVQcm9wcyA9IHRvbmVzUHJvcHNNYXAodGhlbWVkVmFsdWUpW3Byb3BzLnRvbmVdO1xuICByZXR1cm4gY3NzYFxuICAgIGJhY2tncm91bmQtY29sb3I6ICR7dG9uZVByb3BzLnN0eWxlcy5iYWNrZ3JvdW5kQ29sb3J9O1xuXG4gICAgJixcbiAgICAmICoge1xuICAgICAgY29sb3I6ICR7cHJvcHMub3ZlcnJpZGVUZXh0Q29sb3IgPyB0b25lUHJvcHMuc3R5bGVzLmNvbG9yIDogJ2luaGVyaXQnfTtcbiAgICB9XG4gIGA7XG59O1xuXG5jb25zdCBnZXRTdGFtcFN0eWxlcyA9IChwcm9wczogU3R5bGVzRnVuY3Rpb25QYXJhbXMpID0+IHtcbiAgcmV0dXJuIGNzc2BcbiAgICBjb2xvcjogJHtwcm9wcy5vdmVycmlkZVRleHRDb2xvciA/ICdpbmhlcml0JyA6IGRlc2lnblRva2Vucy5jb2xvclNvbGlkfTtcbiAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gICAgYm9yZGVyLXJhZGl1czogJHtwcm9wcy5pc0NvbmRlbnNlZFxuICAgICAgPyBkZXNpZ25Ub2tlbnMuYm9yZGVyUmFkaXVzMlxuICAgICAgOiBkZXNpZ25Ub2tlbnMuYm9yZGVyUmFkaXVzNH07XG4gIGA7XG59O1xuXG5jb25zdCBTdGFtcCA9IChwcm9wczogVFN0YW1wUHJvcHMpID0+IHtcbiAgY29uc3QgeyB0aGVtZWRWYWx1ZSB9ID0gdXNlVGhlbWUoKTtcbiAgY29uc3QgSWNvbiA9XG4gICAgcHJvcHMuaWNvbiAmJlxuICAgIGNsb25lRWxlbWVudChwcm9wcy5pY29uLCB7XG4gICAgICBzaXplOiAnbWVkaXVtJyxcbiAgICAgIGNvbG9yOiBnZXRJY29uQ29sb3IocHJvcHMsIHRydWUsIHRoZW1lZFZhbHVlKSxcbiAgICB9KTtcblxuICB1c2VXYXJuRGVwcmVjYXRlZFByb3AoXG4gICAgIUJvb2xlYW4ocHJvcHMuY2hpbGRyZW4pLFxuICAgICdjaGlsZHJlbicsXG4gICAgJ1N0YW1wJyxcbiAgICAnUGxlYXNlIHVzZSBgbGFiZWxgIGFuZCBgaWNvbmAgcHJvcGVydGllcyBpbnN0ZWFkLidcbiAgKTtcblxuICBjb25zdCBTdGFtcExhYmVsID0gKHsgY2hpbGRyZW4gfTogeyBjaGlsZHJlbjogc3RyaW5nIH0pOiBSZWFjdEVsZW1lbnQgPT5cbiAgICBwcm9wcy5pc0NvbmRlbnNlZCA/IChcbiAgICAgIDxUZXh0LkNhcHRpb24gdG9uZT1cImluaGVyaXRcIiBmb250V2VpZ2h0PVwibWVkaXVtXCI+XG4gICAgICAgIHtjaGlsZHJlbn1cbiAgICAgIDwvVGV4dC5DYXB0aW9uPlxuICAgICkgOiAoXG4gICAgICA8VGV4dC5EZXRhaWwgdG9uZT1cImluaGVyaXRcIiBmb250V2VpZ2h0PVwibWVkaXVtXCI+XG4gICAgICAgIHtjaGlsZHJlbn1cbiAgICAgIDwvVGV4dC5EZXRhaWw+XG4gICAgKTtcblxuICByZXR1cm4gKFxuICAgIDxkaXZcbiAgICAgIGNzcz17W1xuICAgICAgICBnZXRTdGFtcFN0eWxlcyh7IC4uLnByb3BzLCBvdmVycmlkZVRleHRDb2xvcjogdHJ1ZSB9KSxcbiAgICAgICAgZ2V0VG9uZVN0eWxlcyh7IC4uLnByb3BzLCBvdmVycmlkZVRleHRDb2xvcjogdHJ1ZSB9LCB0aGVtZWRWYWx1ZSksXG4gICAgICAgIGdldFBhZGRpbmdTdHlsZShwcm9wcyksXG4gICAgICBdfVxuICAgID5cbiAgICAgIDxTcGFjaW5nc0lubGluZVxuICAgICAgICBhbGlnbkl0ZW1zPVwiY2VudGVyXCJcbiAgICAgICAgc2NhbGU9e3Byb3BzLmlzQ29uZGVuc2VkID8gJ3hzJyA6ICdzJ31cbiAgICAgID5cbiAgICAgICAge0ljb259XG4gICAgICAgIHtwcm9wcy5sYWJlbCA/IDxTdGFtcExhYmVsPntwcm9wcy5sYWJlbH08L1N0YW1wTGFiZWw+IDogcHJvcHMuY2hpbGRyZW59XG4gICAgICA8L1NwYWNpbmdzSW5saW5lPlxuICAgIDwvZGl2PlxuICApO1xufTtcbmNvbnN0IGRlZmF1bHRQcm9wczogUGljazxUU3RhbXBQcm9wcywgJ2lzQ29uZGVuc2VkJyB8ICd0b25lJz4gPSB7XG4gIGlzQ29uZGVuc2VkOiBmYWxzZSxcbiAgdG9uZTogJ2luZm9ybWF0aW9uJyxcbn07XG5TdGFtcC5kaXNwbGF5TmFtZSA9ICdTdGFtcCc7XG5TdGFtcC5kZWZhdWx0UHJvcHMgPSBkZWZhdWx0UHJvcHM7XG5cbmV4cG9ydCBkZWZhdWx0IFN0YW1wO1xuIl19 */");
  return /*#__PURE__*/css("padding:", designTokens.spacing10, " ", designTokens.spacing25, ";" + (process.env.NODE_ENV === "production" ? "" : ";label:getPaddingStyle;"), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInN0YW1wLnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUF3SFkiLCJmaWxlIjoic3RhbXAudHN4Iiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY2xvbmVFbGVtZW50LCB0eXBlIFJlYWN0RWxlbWVudCwgdHlwZSBSZWFjdE5vZGUgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBjc3MgfSBmcm9tICdAZW1vdGlvbi9yZWFjdCc7XG5pbXBvcnQge1xuICBkZXNpZ25Ub2tlbnMsXG4gIHVzZVRoZW1lLFxuICB0eXBlIFRVc2VUaGVtZVJlc3VsdCxcbn0gZnJvbSAnQGNvbW1lcmNldG9vbHMtdWlraXQvZGVzaWduLXN5c3RlbSc7XG5pbXBvcnQgVGV4dCBmcm9tICdAY29tbWVyY2V0b29scy11aWtpdC90ZXh0JztcbmltcG9ydCBTcGFjaW5nc0lubGluZSBmcm9tICdAY29tbWVyY2V0b29scy11aWtpdC9zcGFjaW5ncy1pbmxpbmUnO1xuaW1wb3J0IHsgdXNlV2FybkRlcHJlY2F0ZWRQcm9wIH0gZnJvbSAnQGNvbW1lcmNldG9vbHMtdWlraXQvdXRpbHMnO1xuXG5leHBvcnQgdHlwZSBUVG9uZSA9XG4gIHwgJ2NyaXRpY2FsJ1xuICB8ICd3YXJuaW5nJ1xuICB8ICdwb3NpdGl2ZSdcbiAgfCAnaW5mb3JtYXRpb24nXG4gIHwgJ3ByaW1hcnknXG4gIHwgJ3NlY29uZGFyeSc7XG5cbmV4cG9ydCB0eXBlIFRTdGFtcFByb3BzID0ge1xuICAvKipcbiAgICogSW5kaWNhdGVzIHRoZSBjb2xvciBzY2hlbWUgb2Ygc3RhbXBcbiAgICovXG4gIHRvbmU/OiBUVG9uZTtcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgcmVuZGVycyBhIGNvbmRlbnNlZCB2ZXJzaW9uIG9mIHRoZSBzdGFtcC5cbiAgICovXG4gIGlzQ29uZGVuc2VkOiBib29sZWFuO1xuICAvKipcbiAgICogQ29udGVudCB0byByZW5kZXIgd2l0aGluIHRoZSBzdGFtcC5cbiAgICogVGhpcyBwcm9wZXJ0eSBoYXMgYmVlbiAqKmRlcHJlY2F0ZWQqKiBpbiBmYXZvciBvZiBgbGFiZWxgLlxuICAgKi9cbiAgY2hpbGRyZW4/OiBSZWFjdE5vZGU7XG4gIC8qKlxuICAgKiBJY29uIHRvIHJlbmRlciBiZXNpZGUgKGxlZnQpIHRoZSBzdGFtcCB0ZXh0LlxuICAgKi9cbiAgaWNvbj86IFJlYWN0RWxlbWVudDtcbiAgLyoqXG4gICAqIFRleHQgdG8gcmVuZGVyIHdpdGhpbiB0aGUgc3RhbXAuXG4gICAqL1xuICBsYWJlbD86IHN0cmluZztcbn07XG5cbnR5cGUgVG9uZVJlbGF0ZWRQcm9wcyA9IHtcbiAgc3R5bGVzOiB7XG4gICAgYmFja2dyb3VuZENvbG9yOiBzdHJpbmc7XG4gICAgYm9yZGVyQ29sb3I6IHN0cmluZztcbiAgICBjb2xvcjogc3RyaW5nO1xuICB9O1xuICBpY29uQ29sb3I6IHN0cmluZztcbn07XG5cbnR5cGUgU3R5bGVzRnVuY3Rpb25QYXJhbXMgPSBUU3RhbXBQcm9wcyAmIHsgb3ZlcnJpZGVUZXh0Q29sb3I/OiBib29sZWFuIH07XG5cbmNvbnN0IHRvbmVzUHJvcHNNYXAgPSAoXG4gIHRoZW1lZFZhbHVlOiBUVXNlVGhlbWVSZXN1bHRbJ3RoZW1lZFZhbHVlJ11cbik6IFJlY29yZDxUVG9uZSwgVG9uZVJlbGF0ZWRQcm9wcz4gPT4gKHtcbiAgY3JpdGljYWw6IHtcbiAgICBzdHlsZXM6IHtcbiAgICAgIGJhY2tncm91bmRDb2xvcjogZGVzaWduVG9rZW5zLmNvbG9yRXJyb3I5NSxcbiAgICAgIGJvcmRlckNvbG9yOiBkZXNpZ25Ub2tlbnMuY29sb3JFcnJvcjg1LFxuICAgICAgY29sb3I6IGRlc2lnblRva2Vucy5jb2xvckVycm9yNDAsXG4gICAgfSxcbiAgICBpY29uQ29sb3I6ICdlcnJvcicsXG4gIH0sXG4gIHdhcm5pbmc6IHtcbiAgICBzdHlsZXM6IHtcbiAgICAgIGJhY2tncm91bmRDb2xvcjogZGVzaWduVG9rZW5zLmNvbG9yV2FybmluZzk1LFxuICAgICAgYm9yZGVyQ29sb3I6IGRlc2lnblRva2Vucy5jb2xvcldhcm5pbmc4NSxcbiAgICAgIGNvbG9yOiBkZXNpZ25Ub2tlbnMuY29sb3JXYXJuaW5nNDAsXG4gICAgfSxcbiAgICBpY29uQ29sb3I6ICd3YXJuaW5nJyxcbiAgfSxcbiAgcG9zaXRpdmU6IHtcbiAgICBzdHlsZXM6IHtcbiAgICAgIGJhY2tncm91bmRDb2xvcjogZGVzaWduVG9rZW5zLmJhY2tncm91bmRDb2xvckZvclN0YW1wQXNQb3NpdGl2ZSxcbiAgICAgIGJvcmRlckNvbG9yOiBkZXNpZ25Ub2tlbnMuY29sb3JQcmltYXJ5ODUsXG4gICAgICBjb2xvcjogZGVzaWduVG9rZW5zLmZvbnRDb2xvckZvclN0YW1wQXNQb3NpdGl2ZSxcbiAgICB9LFxuICAgIGljb25Db2xvcjogdGhlbWVkVmFsdWUoJ3ByaW1hcnknLCAnc3VjY2VzcycpLFxuICB9LFxuICBpbmZvcm1hdGlvbjoge1xuICAgIHN0eWxlczoge1xuICAgICAgYmFja2dyb3VuZENvbG9yOiBkZXNpZ25Ub2tlbnMuY29sb3JJbmZvOTUsXG4gICAgICBib3JkZXJDb2xvcjogZGVzaWduVG9rZW5zLmNvbG9ySW5mbzg1LFxuICAgICAgY29sb3I6IGRlc2lnblRva2Vucy5jb2xvckluZm80MCxcbiAgICB9LFxuICAgIGljb25Db2xvcjogJ2luZm8nLFxuICB9LFxuICBwcmltYXJ5OiB7XG4gICAgc3R5bGVzOiB7XG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6IGRlc2lnblRva2Vucy5iYWNrZ3JvdW5kQ29sb3JGb3JTdGFtcEFzUHJpbWFyeSxcbiAgICAgIGJvcmRlckNvbG9yOiBkZXNpZ25Ub2tlbnMuY29sb3JQcmltYXJ5ODUsXG4gICAgICBjb2xvcjogZGVzaWduVG9rZW5zLmNvbG9yUHJpbWFyeTI1LFxuICAgIH0sXG4gICAgaWNvbkNvbG9yOiAncHJpbWFyeTQwJyxcbiAgfSxcbiAgc2Vjb25kYXJ5OiB7XG4gICAgc3R5bGVzOiB7XG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6IGRlc2lnblRva2Vucy5jb2xvck5ldXRyYWw5NSxcbiAgICAgIGJvcmRlckNvbG9yOiBkZXNpZ25Ub2tlbnMuY29sb3JOZXV0cmFsODUsXG4gICAgICBjb2xvcjogZGVzaWduVG9rZW5zLmNvbG9yTmV1dHJhbDQwLFxuICAgIH0sXG4gICAgaWNvbkNvbG9yOiAnbmV1dHJhbDYwJyxcbiAgfSxcbn0pO1xuXG5leHBvcnQgY29uc3QgYXZhaWxhYmxlVG9uZXM6IFRUb25lW10gPSBbXG4gICdjcml0aWNhbCcsXG4gICd3YXJuaW5nJyxcbiAgJ3Bvc2l0aXZlJyxcbiAgJ2luZm9ybWF0aW9uJyxcbiAgJ3ByaW1hcnknLFxuICAnc2Vjb25kYXJ5Jyxcbl07XG5jb25zdCBnZXRQYWRkaW5nU3R5bGUgPSAocHJvcHM6IFN0eWxlc0Z1bmN0aW9uUGFyYW1zKSA9PiB7XG4gIGlmIChwcm9wcy5pc0NvbmRlbnNlZClcbiAgICByZXR1cm4gY3NzYFxuICAgICAgcGFkZGluZzogJHtkZXNpZ25Ub2tlbnMuc3BhY2luZzA1fSAke2Rlc2lnblRva2Vucy5zcGFjaW5nMTB9O1xuICAgIGA7XG4gIHJldHVybiBjc3NgXG4gICAgcGFkZGluZzogJHtkZXNpZ25Ub2tlbnMuc3BhY2luZzEwfSAke2Rlc2lnblRva2Vucy5zcGFjaW5nMjV9O1xuICBgO1xufTtcblxuY29uc3QgZ2V0SWNvbkNvbG9yID0gKFxuICBwcm9wczogU3R5bGVzRnVuY3Rpb25QYXJhbXMsXG4gIG92ZXJyaWRlVGV4dENvbG9yOiBib29sZWFuLFxuICB0aGVtZWRWYWx1ZTogVFVzZVRoZW1lUmVzdWx0Wyd0aGVtZWRWYWx1ZSddXG4pID0+IHtcbiAgaWYgKCFvdmVycmlkZVRleHRDb2xvcikge1xuICAgIHJldHVybiAnaW5oZXJpdCc7XG4gIH1cblxuICBjb25zdCB0b25lUHJvcHMgPSBwcm9wcy50b25lICYmIHRvbmVzUHJvcHNNYXAodGhlbWVkVmFsdWUpW3Byb3BzLnRvbmVdO1xuICByZXR1cm4gdG9uZVByb3BzID8gdG9uZVByb3BzLmljb25Db2xvciA6ICcnO1xufTtcblxuY29uc3QgZ2V0VG9uZVN0eWxlcyA9IChcbiAgcHJvcHM6IFN0eWxlc0Z1bmN0aW9uUGFyYW1zLFxuICB0aGVtZWRWYWx1ZTogVFVzZVRoZW1lUmVzdWx0Wyd0aGVtZWRWYWx1ZSddXG4pID0+IHtcbiAgaWYgKCFwcm9wcy50b25lIHx8ICF0b25lc1Byb3BzTWFwKHRoZW1lZFZhbHVlKVtwcm9wcy50b25lXSkge1xuICAgIHJldHVybiBjc3NgYDtcbiAgfVxuXG4gIGNvbnN0IHRvbmVQcm9wcyA9IHRvbmVzUHJvcHNNYXAodGhlbWVkVmFsdWUpW3Byb3BzLnRvbmVdO1xuICByZXR1cm4gY3NzYFxuICAgIGJhY2tncm91bmQtY29sb3I6ICR7dG9uZVByb3BzLnN0eWxlcy5iYWNrZ3JvdW5kQ29sb3J9O1xuXG4gICAgJixcbiAgICAmICoge1xuICAgICAgY29sb3I6ICR7cHJvcHMub3ZlcnJpZGVUZXh0Q29sb3IgPyB0b25lUHJvcHMuc3R5bGVzLmNvbG9yIDogJ2luaGVyaXQnfTtcbiAgICB9XG4gIGA7XG59O1xuXG5jb25zdCBnZXRTdGFtcFN0eWxlcyA9IChwcm9wczogU3R5bGVzRnVuY3Rpb25QYXJhbXMpID0+IHtcbiAgcmV0dXJuIGNzc2BcbiAgICBjb2xvcjogJHtwcm9wcy5vdmVycmlkZVRleHRDb2xvciA/ICdpbmhlcml0JyA6IGRlc2lnblRva2Vucy5jb2xvclNvbGlkfTtcbiAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gICAgYm9yZGVyLXJhZGl1czogJHtwcm9wcy5pc0NvbmRlbnNlZFxuICAgICAgPyBkZXNpZ25Ub2tlbnMuYm9yZGVyUmFkaXVzMlxuICAgICAgOiBkZXNpZ25Ub2tlbnMuYm9yZGVyUmFkaXVzNH07XG4gIGA7XG59O1xuXG5jb25zdCBTdGFtcCA9IChwcm9wczogVFN0YW1wUHJvcHMpID0+IHtcbiAgY29uc3QgeyB0aGVtZWRWYWx1ZSB9ID0gdXNlVGhlbWUoKTtcbiAgY29uc3QgSWNvbiA9XG4gICAgcHJvcHMuaWNvbiAmJlxuICAgIGNsb25lRWxlbWVudChwcm9wcy5pY29uLCB7XG4gICAgICBzaXplOiAnbWVkaXVtJyxcbiAgICAgIGNvbG9yOiBnZXRJY29uQ29sb3IocHJvcHMsIHRydWUsIHRoZW1lZFZhbHVlKSxcbiAgICB9KTtcblxuICB1c2VXYXJuRGVwcmVjYXRlZFByb3AoXG4gICAgIUJvb2xlYW4ocHJvcHMuY2hpbGRyZW4pLFxuICAgICdjaGlsZHJlbicsXG4gICAgJ1N0YW1wJyxcbiAgICAnUGxlYXNlIHVzZSBgbGFiZWxgIGFuZCBgaWNvbmAgcHJvcGVydGllcyBpbnN0ZWFkLidcbiAgKTtcblxuICBjb25zdCBTdGFtcExhYmVsID0gKHsgY2hpbGRyZW4gfTogeyBjaGlsZHJlbjogc3RyaW5nIH0pOiBSZWFjdEVsZW1lbnQgPT5cbiAgICBwcm9wcy5pc0NvbmRlbnNlZCA/IChcbiAgICAgIDxUZXh0LkNhcHRpb24gdG9uZT1cImluaGVyaXRcIiBmb250V2VpZ2h0PVwibWVkaXVtXCI+XG4gICAgICAgIHtjaGlsZHJlbn1cbiAgICAgIDwvVGV4dC5DYXB0aW9uPlxuICAgICkgOiAoXG4gICAgICA8VGV4dC5EZXRhaWwgdG9uZT1cImluaGVyaXRcIiBmb250V2VpZ2h0PVwibWVkaXVtXCI+XG4gICAgICAgIHtjaGlsZHJlbn1cbiAgICAgIDwvVGV4dC5EZXRhaWw+XG4gICAgKTtcblxuICByZXR1cm4gKFxuICAgIDxkaXZcbiAgICAgIGNzcz17W1xuICAgICAgICBnZXRTdGFtcFN0eWxlcyh7IC4uLnByb3BzLCBvdmVycmlkZVRleHRDb2xvcjogdHJ1ZSB9KSxcbiAgICAgICAgZ2V0VG9uZVN0eWxlcyh7IC4uLnByb3BzLCBvdmVycmlkZVRleHRDb2xvcjogdHJ1ZSB9LCB0aGVtZWRWYWx1ZSksXG4gICAgICAgIGdldFBhZGRpbmdTdHlsZShwcm9wcyksXG4gICAgICBdfVxuICAgID5cbiAgICAgIDxTcGFjaW5nc0lubGluZVxuICAgICAgICBhbGlnbkl0ZW1zPVwiY2VudGVyXCJcbiAgICAgICAgc2NhbGU9e3Byb3BzLmlzQ29uZGVuc2VkID8gJ3hzJyA6ICdzJ31cbiAgICAgID5cbiAgICAgICAge0ljb259XG4gICAgICAgIHtwcm9wcy5sYWJlbCA/IDxTdGFtcExhYmVsPntwcm9wcy5sYWJlbH08L1N0YW1wTGFiZWw+IDogcHJvcHMuY2hpbGRyZW59XG4gICAgICA8L1NwYWNpbmdzSW5saW5lPlxuICAgIDwvZGl2PlxuICApO1xufTtcbmNvbnN0IGRlZmF1bHRQcm9wczogUGljazxUU3RhbXBQcm9wcywgJ2lzQ29uZGVuc2VkJyB8ICd0b25lJz4gPSB7XG4gIGlzQ29uZGVuc2VkOiBmYWxzZSxcbiAgdG9uZTogJ2luZm9ybWF0aW9uJyxcbn07XG5TdGFtcC5kaXNwbGF5TmFtZSA9ICdTdGFtcCc7XG5TdGFtcC5kZWZhdWx0UHJvcHMgPSBkZWZhdWx0UHJvcHM7XG5cbmV4cG9ydCBkZWZhdWx0IFN0YW1wO1xuIl19 */");
};
const getIconColor = (props, overrideTextColor, themedValue) => {
  if (!overrideTextColor) {
    return 'inherit';
  }
  const toneProps = props.tone && tonesPropsMap(themedValue)[props.tone];
  return toneProps ? toneProps.iconColor : '';
};
const getToneStyles = (props, themedValue) => {
  if (!props.tone || !tonesPropsMap(themedValue)[props.tone]) {
    return /*#__PURE__*/css(process.env.NODE_ENV === "production" ? "" : ";label:getToneStyles;", process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInN0YW1wLnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUErSWMiLCJmaWxlIjoic3RhbXAudHN4Iiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY2xvbmVFbGVtZW50LCB0eXBlIFJlYWN0RWxlbWVudCwgdHlwZSBSZWFjdE5vZGUgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBjc3MgfSBmcm9tICdAZW1vdGlvbi9yZWFjdCc7XG5pbXBvcnQge1xuICBkZXNpZ25Ub2tlbnMsXG4gIHVzZVRoZW1lLFxuICB0eXBlIFRVc2VUaGVtZVJlc3VsdCxcbn0gZnJvbSAnQGNvbW1lcmNldG9vbHMtdWlraXQvZGVzaWduLXN5c3RlbSc7XG5pbXBvcnQgVGV4dCBmcm9tICdAY29tbWVyY2V0b29scy11aWtpdC90ZXh0JztcbmltcG9ydCBTcGFjaW5nc0lubGluZSBmcm9tICdAY29tbWVyY2V0b29scy11aWtpdC9zcGFjaW5ncy1pbmxpbmUnO1xuaW1wb3J0IHsgdXNlV2FybkRlcHJlY2F0ZWRQcm9wIH0gZnJvbSAnQGNvbW1lcmNldG9vbHMtdWlraXQvdXRpbHMnO1xuXG5leHBvcnQgdHlwZSBUVG9uZSA9XG4gIHwgJ2NyaXRpY2FsJ1xuICB8ICd3YXJuaW5nJ1xuICB8ICdwb3NpdGl2ZSdcbiAgfCAnaW5mb3JtYXRpb24nXG4gIHwgJ3ByaW1hcnknXG4gIHwgJ3NlY29uZGFyeSc7XG5cbmV4cG9ydCB0eXBlIFRTdGFtcFByb3BzID0ge1xuICAvKipcbiAgICogSW5kaWNhdGVzIHRoZSBjb2xvciBzY2hlbWUgb2Ygc3RhbXBcbiAgICovXG4gIHRvbmU/OiBUVG9uZTtcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgcmVuZGVycyBhIGNvbmRlbnNlZCB2ZXJzaW9uIG9mIHRoZSBzdGFtcC5cbiAgICovXG4gIGlzQ29uZGVuc2VkOiBib29sZWFuO1xuICAvKipcbiAgICogQ29udGVudCB0byByZW5kZXIgd2l0aGluIHRoZSBzdGFtcC5cbiAgICogVGhpcyBwcm9wZXJ0eSBoYXMgYmVlbiAqKmRlcHJlY2F0ZWQqKiBpbiBmYXZvciBvZiBgbGFiZWxgLlxuICAgKi9cbiAgY2hpbGRyZW4/OiBSZWFjdE5vZGU7XG4gIC8qKlxuICAgKiBJY29uIHRvIHJlbmRlciBiZXNpZGUgKGxlZnQpIHRoZSBzdGFtcCB0ZXh0LlxuICAgKi9cbiAgaWNvbj86IFJlYWN0RWxlbWVudDtcbiAgLyoqXG4gICAqIFRleHQgdG8gcmVuZGVyIHdpdGhpbiB0aGUgc3RhbXAuXG4gICAqL1xuICBsYWJlbD86IHN0cmluZztcbn07XG5cbnR5cGUgVG9uZVJlbGF0ZWRQcm9wcyA9IHtcbiAgc3R5bGVzOiB7XG4gICAgYmFja2dyb3VuZENvbG9yOiBzdHJpbmc7XG4gICAgYm9yZGVyQ29sb3I6IHN0cmluZztcbiAgICBjb2xvcjogc3RyaW5nO1xuICB9O1xuICBpY29uQ29sb3I6IHN0cmluZztcbn07XG5cbnR5cGUgU3R5bGVzRnVuY3Rpb25QYXJhbXMgPSBUU3RhbXBQcm9wcyAmIHsgb3ZlcnJpZGVUZXh0Q29sb3I/OiBib29sZWFuIH07XG5cbmNvbnN0IHRvbmVzUHJvcHNNYXAgPSAoXG4gIHRoZW1lZFZhbHVlOiBUVXNlVGhlbWVSZXN1bHRbJ3RoZW1lZFZhbHVlJ11cbik6IFJlY29yZDxUVG9uZSwgVG9uZVJlbGF0ZWRQcm9wcz4gPT4gKHtcbiAgY3JpdGljYWw6IHtcbiAgICBzdHlsZXM6IHtcbiAgICAgIGJhY2tncm91bmRDb2xvcjogZGVzaWduVG9rZW5zLmNvbG9yRXJyb3I5NSxcbiAgICAgIGJvcmRlckNvbG9yOiBkZXNpZ25Ub2tlbnMuY29sb3JFcnJvcjg1LFxuICAgICAgY29sb3I6IGRlc2lnblRva2Vucy5jb2xvckVycm9yNDAsXG4gICAgfSxcbiAgICBpY29uQ29sb3I6ICdlcnJvcicsXG4gIH0sXG4gIHdhcm5pbmc6IHtcbiAgICBzdHlsZXM6IHtcbiAgICAgIGJhY2tncm91bmRDb2xvcjogZGVzaWduVG9rZW5zLmNvbG9yV2FybmluZzk1LFxuICAgICAgYm9yZGVyQ29sb3I6IGRlc2lnblRva2Vucy5jb2xvcldhcm5pbmc4NSxcbiAgICAgIGNvbG9yOiBkZXNpZ25Ub2tlbnMuY29sb3JXYXJuaW5nNDAsXG4gICAgfSxcbiAgICBpY29uQ29sb3I6ICd3YXJuaW5nJyxcbiAgfSxcbiAgcG9zaXRpdmU6IHtcbiAgICBzdHlsZXM6IHtcbiAgICAgIGJhY2tncm91bmRDb2xvcjogZGVzaWduVG9rZW5zLmJhY2tncm91bmRDb2xvckZvclN0YW1wQXNQb3NpdGl2ZSxcbiAgICAgIGJvcmRlckNvbG9yOiBkZXNpZ25Ub2tlbnMuY29sb3JQcmltYXJ5ODUsXG4gICAgICBjb2xvcjogZGVzaWduVG9rZW5zLmZvbnRDb2xvckZvclN0YW1wQXNQb3NpdGl2ZSxcbiAgICB9LFxuICAgIGljb25Db2xvcjogdGhlbWVkVmFsdWUoJ3ByaW1hcnknLCAnc3VjY2VzcycpLFxuICB9LFxuICBpbmZvcm1hdGlvbjoge1xuICAgIHN0eWxlczoge1xuICAgICAgYmFja2dyb3VuZENvbG9yOiBkZXNpZ25Ub2tlbnMuY29sb3JJbmZvOTUsXG4gICAgICBib3JkZXJDb2xvcjogZGVzaWduVG9rZW5zLmNvbG9ySW5mbzg1LFxuICAgICAgY29sb3I6IGRlc2lnblRva2Vucy5jb2xvckluZm80MCxcbiAgICB9LFxuICAgIGljb25Db2xvcjogJ2luZm8nLFxuICB9LFxuICBwcmltYXJ5OiB7XG4gICAgc3R5bGVzOiB7XG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6IGRlc2lnblRva2Vucy5iYWNrZ3JvdW5kQ29sb3JGb3JTdGFtcEFzUHJpbWFyeSxcbiAgICAgIGJvcmRlckNvbG9yOiBkZXNpZ25Ub2tlbnMuY29sb3JQcmltYXJ5ODUsXG4gICAgICBjb2xvcjogZGVzaWduVG9rZW5zLmNvbG9yUHJpbWFyeTI1LFxuICAgIH0sXG4gICAgaWNvbkNvbG9yOiAncHJpbWFyeTQwJyxcbiAgfSxcbiAgc2Vjb25kYXJ5OiB7XG4gICAgc3R5bGVzOiB7XG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6IGRlc2lnblRva2Vucy5jb2xvck5ldXRyYWw5NSxcbiAgICAgIGJvcmRlckNvbG9yOiBkZXNpZ25Ub2tlbnMuY29sb3JOZXV0cmFsODUsXG4gICAgICBjb2xvcjogZGVzaWduVG9rZW5zLmNvbG9yTmV1dHJhbDQwLFxuICAgIH0sXG4gICAgaWNvbkNvbG9yOiAnbmV1dHJhbDYwJyxcbiAgfSxcbn0pO1xuXG5leHBvcnQgY29uc3QgYXZhaWxhYmxlVG9uZXM6IFRUb25lW10gPSBbXG4gICdjcml0aWNhbCcsXG4gICd3YXJuaW5nJyxcbiAgJ3Bvc2l0aXZlJyxcbiAgJ2luZm9ybWF0aW9uJyxcbiAgJ3ByaW1hcnknLFxuICAnc2Vjb25kYXJ5Jyxcbl07XG5jb25zdCBnZXRQYWRkaW5nU3R5bGUgPSAocHJvcHM6IFN0eWxlc0Z1bmN0aW9uUGFyYW1zKSA9PiB7XG4gIGlmIChwcm9wcy5pc0NvbmRlbnNlZClcbiAgICByZXR1cm4gY3NzYFxuICAgICAgcGFkZGluZzogJHtkZXNpZ25Ub2tlbnMuc3BhY2luZzA1fSAke2Rlc2lnblRva2Vucy5zcGFjaW5nMTB9O1xuICAgIGA7XG4gIHJldHVybiBjc3NgXG4gICAgcGFkZGluZzogJHtkZXNpZ25Ub2tlbnMuc3BhY2luZzEwfSAke2Rlc2lnblRva2Vucy5zcGFjaW5nMjV9O1xuICBgO1xufTtcblxuY29uc3QgZ2V0SWNvbkNvbG9yID0gKFxuICBwcm9wczogU3R5bGVzRnVuY3Rpb25QYXJhbXMsXG4gIG92ZXJyaWRlVGV4dENvbG9yOiBib29sZWFuLFxuICB0aGVtZWRWYWx1ZTogVFVzZVRoZW1lUmVzdWx0Wyd0aGVtZWRWYWx1ZSddXG4pID0+IHtcbiAgaWYgKCFvdmVycmlkZVRleHRDb2xvcikge1xuICAgIHJldHVybiAnaW5oZXJpdCc7XG4gIH1cblxuICBjb25zdCB0b25lUHJvcHMgPSBwcm9wcy50b25lICYmIHRvbmVzUHJvcHNNYXAodGhlbWVkVmFsdWUpW3Byb3BzLnRvbmVdO1xuICByZXR1cm4gdG9uZVByb3BzID8gdG9uZVByb3BzLmljb25Db2xvciA6ICcnO1xufTtcblxuY29uc3QgZ2V0VG9uZVN0eWxlcyA9IChcbiAgcHJvcHM6IFN0eWxlc0Z1bmN0aW9uUGFyYW1zLFxuICB0aGVtZWRWYWx1ZTogVFVzZVRoZW1lUmVzdWx0Wyd0aGVtZWRWYWx1ZSddXG4pID0+IHtcbiAgaWYgKCFwcm9wcy50b25lIHx8ICF0b25lc1Byb3BzTWFwKHRoZW1lZFZhbHVlKVtwcm9wcy50b25lXSkge1xuICAgIHJldHVybiBjc3NgYDtcbiAgfVxuXG4gIGNvbnN0IHRvbmVQcm9wcyA9IHRvbmVzUHJvcHNNYXAodGhlbWVkVmFsdWUpW3Byb3BzLnRvbmVdO1xuICByZXR1cm4gY3NzYFxuICAgIGJhY2tncm91bmQtY29sb3I6ICR7dG9uZVByb3BzLnN0eWxlcy5iYWNrZ3JvdW5kQ29sb3J9O1xuXG4gICAgJixcbiAgICAmICoge1xuICAgICAgY29sb3I6ICR7cHJvcHMub3ZlcnJpZGVUZXh0Q29sb3IgPyB0b25lUHJvcHMuc3R5bGVzLmNvbG9yIDogJ2luaGVyaXQnfTtcbiAgICB9XG4gIGA7XG59O1xuXG5jb25zdCBnZXRTdGFtcFN0eWxlcyA9IChwcm9wczogU3R5bGVzRnVuY3Rpb25QYXJhbXMpID0+IHtcbiAgcmV0dXJuIGNzc2BcbiAgICBjb2xvcjogJHtwcm9wcy5vdmVycmlkZVRleHRDb2xvciA/ICdpbmhlcml0JyA6IGRlc2lnblRva2Vucy5jb2xvclNvbGlkfTtcbiAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gICAgYm9yZGVyLXJhZGl1czogJHtwcm9wcy5pc0NvbmRlbnNlZFxuICAgICAgPyBkZXNpZ25Ub2tlbnMuYm9yZGVyUmFkaXVzMlxuICAgICAgOiBkZXNpZ25Ub2tlbnMuYm9yZGVyUmFkaXVzNH07XG4gIGA7XG59O1xuXG5jb25zdCBTdGFtcCA9IChwcm9wczogVFN0YW1wUHJvcHMpID0+IHtcbiAgY29uc3QgeyB0aGVtZWRWYWx1ZSB9ID0gdXNlVGhlbWUoKTtcbiAgY29uc3QgSWNvbiA9XG4gICAgcHJvcHMuaWNvbiAmJlxuICAgIGNsb25lRWxlbWVudChwcm9wcy5pY29uLCB7XG4gICAgICBzaXplOiAnbWVkaXVtJyxcbiAgICAgIGNvbG9yOiBnZXRJY29uQ29sb3IocHJvcHMsIHRydWUsIHRoZW1lZFZhbHVlKSxcbiAgICB9KTtcblxuICB1c2VXYXJuRGVwcmVjYXRlZFByb3AoXG4gICAgIUJvb2xlYW4ocHJvcHMuY2hpbGRyZW4pLFxuICAgICdjaGlsZHJlbicsXG4gICAgJ1N0YW1wJyxcbiAgICAnUGxlYXNlIHVzZSBgbGFiZWxgIGFuZCBgaWNvbmAgcHJvcGVydGllcyBpbnN0ZWFkLidcbiAgKTtcblxuICBjb25zdCBTdGFtcExhYmVsID0gKHsgY2hpbGRyZW4gfTogeyBjaGlsZHJlbjogc3RyaW5nIH0pOiBSZWFjdEVsZW1lbnQgPT5cbiAgICBwcm9wcy5pc0NvbmRlbnNlZCA/IChcbiAgICAgIDxUZXh0LkNhcHRpb24gdG9uZT1cImluaGVyaXRcIiBmb250V2VpZ2h0PVwibWVkaXVtXCI+XG4gICAgICAgIHtjaGlsZHJlbn1cbiAgICAgIDwvVGV4dC5DYXB0aW9uPlxuICAgICkgOiAoXG4gICAgICA8VGV4dC5EZXRhaWwgdG9uZT1cImluaGVyaXRcIiBmb250V2VpZ2h0PVwibWVkaXVtXCI+XG4gICAgICAgIHtjaGlsZHJlbn1cbiAgICAgIDwvVGV4dC5EZXRhaWw+XG4gICAgKTtcblxuICByZXR1cm4gKFxuICAgIDxkaXZcbiAgICAgIGNzcz17W1xuICAgICAgICBnZXRTdGFtcFN0eWxlcyh7IC4uLnByb3BzLCBvdmVycmlkZVRleHRDb2xvcjogdHJ1ZSB9KSxcbiAgICAgICAgZ2V0VG9uZVN0eWxlcyh7IC4uLnByb3BzLCBvdmVycmlkZVRleHRDb2xvcjogdHJ1ZSB9LCB0aGVtZWRWYWx1ZSksXG4gICAgICAgIGdldFBhZGRpbmdTdHlsZShwcm9wcyksXG4gICAgICBdfVxuICAgID5cbiAgICAgIDxTcGFjaW5nc0lubGluZVxuICAgICAgICBhbGlnbkl0ZW1zPVwiY2VudGVyXCJcbiAgICAgICAgc2NhbGU9e3Byb3BzLmlzQ29uZGVuc2VkID8gJ3hzJyA6ICdzJ31cbiAgICAgID5cbiAgICAgICAge0ljb259XG4gICAgICAgIHtwcm9wcy5sYWJlbCA/IDxTdGFtcExhYmVsPntwcm9wcy5sYWJlbH08L1N0YW1wTGFiZWw+IDogcHJvcHMuY2hpbGRyZW59XG4gICAgICA8L1NwYWNpbmdzSW5saW5lPlxuICAgIDwvZGl2PlxuICApO1xufTtcbmNvbnN0IGRlZmF1bHRQcm9wczogUGljazxUU3RhbXBQcm9wcywgJ2lzQ29uZGVuc2VkJyB8ICd0b25lJz4gPSB7XG4gIGlzQ29uZGVuc2VkOiBmYWxzZSxcbiAgdG9uZTogJ2luZm9ybWF0aW9uJyxcbn07XG5TdGFtcC5kaXNwbGF5TmFtZSA9ICdTdGFtcCc7XG5TdGFtcC5kZWZhdWx0UHJvcHMgPSBkZWZhdWx0UHJvcHM7XG5cbmV4cG9ydCBkZWZhdWx0IFN0YW1wO1xuIl19 */");
  }
  const toneProps = tonesPropsMap(themedValue)[props.tone];
  return /*#__PURE__*/css("background-color:", toneProps.styles.backgroundColor, ";&,& *{color:", props.overrideTextColor ? toneProps.styles.color : 'inherit', ";}" + (process.env.NODE_ENV === "production" ? "" : ";label:getToneStyles;"), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInN0YW1wLnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFtSlkiLCJmaWxlIjoic3RhbXAudHN4Iiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY2xvbmVFbGVtZW50LCB0eXBlIFJlYWN0RWxlbWVudCwgdHlwZSBSZWFjdE5vZGUgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBjc3MgfSBmcm9tICdAZW1vdGlvbi9yZWFjdCc7XG5pbXBvcnQge1xuICBkZXNpZ25Ub2tlbnMsXG4gIHVzZVRoZW1lLFxuICB0eXBlIFRVc2VUaGVtZVJlc3VsdCxcbn0gZnJvbSAnQGNvbW1lcmNldG9vbHMtdWlraXQvZGVzaWduLXN5c3RlbSc7XG5pbXBvcnQgVGV4dCBmcm9tICdAY29tbWVyY2V0b29scy11aWtpdC90ZXh0JztcbmltcG9ydCBTcGFjaW5nc0lubGluZSBmcm9tICdAY29tbWVyY2V0b29scy11aWtpdC9zcGFjaW5ncy1pbmxpbmUnO1xuaW1wb3J0IHsgdXNlV2FybkRlcHJlY2F0ZWRQcm9wIH0gZnJvbSAnQGNvbW1lcmNldG9vbHMtdWlraXQvdXRpbHMnO1xuXG5leHBvcnQgdHlwZSBUVG9uZSA9XG4gIHwgJ2NyaXRpY2FsJ1xuICB8ICd3YXJuaW5nJ1xuICB8ICdwb3NpdGl2ZSdcbiAgfCAnaW5mb3JtYXRpb24nXG4gIHwgJ3ByaW1hcnknXG4gIHwgJ3NlY29uZGFyeSc7XG5cbmV4cG9ydCB0eXBlIFRTdGFtcFByb3BzID0ge1xuICAvKipcbiAgICogSW5kaWNhdGVzIHRoZSBjb2xvciBzY2hlbWUgb2Ygc3RhbXBcbiAgICovXG4gIHRvbmU/OiBUVG9uZTtcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgcmVuZGVycyBhIGNvbmRlbnNlZCB2ZXJzaW9uIG9mIHRoZSBzdGFtcC5cbiAgICovXG4gIGlzQ29uZGVuc2VkOiBib29sZWFuO1xuICAvKipcbiAgICogQ29udGVudCB0byByZW5kZXIgd2l0aGluIHRoZSBzdGFtcC5cbiAgICogVGhpcyBwcm9wZXJ0eSBoYXMgYmVlbiAqKmRlcHJlY2F0ZWQqKiBpbiBmYXZvciBvZiBgbGFiZWxgLlxuICAgKi9cbiAgY2hpbGRyZW4/OiBSZWFjdE5vZGU7XG4gIC8qKlxuICAgKiBJY29uIHRvIHJlbmRlciBiZXNpZGUgKGxlZnQpIHRoZSBzdGFtcCB0ZXh0LlxuICAgKi9cbiAgaWNvbj86IFJlYWN0RWxlbWVudDtcbiAgLyoqXG4gICAqIFRleHQgdG8gcmVuZGVyIHdpdGhpbiB0aGUgc3RhbXAuXG4gICAqL1xuICBsYWJlbD86IHN0cmluZztcbn07XG5cbnR5cGUgVG9uZVJlbGF0ZWRQcm9wcyA9IHtcbiAgc3R5bGVzOiB7XG4gICAgYmFja2dyb3VuZENvbG9yOiBzdHJpbmc7XG4gICAgYm9yZGVyQ29sb3I6IHN0cmluZztcbiAgICBjb2xvcjogc3RyaW5nO1xuICB9O1xuICBpY29uQ29sb3I6IHN0cmluZztcbn07XG5cbnR5cGUgU3R5bGVzRnVuY3Rpb25QYXJhbXMgPSBUU3RhbXBQcm9wcyAmIHsgb3ZlcnJpZGVUZXh0Q29sb3I/OiBib29sZWFuIH07XG5cbmNvbnN0IHRvbmVzUHJvcHNNYXAgPSAoXG4gIHRoZW1lZFZhbHVlOiBUVXNlVGhlbWVSZXN1bHRbJ3RoZW1lZFZhbHVlJ11cbik6IFJlY29yZDxUVG9uZSwgVG9uZVJlbGF0ZWRQcm9wcz4gPT4gKHtcbiAgY3JpdGljYWw6IHtcbiAgICBzdHlsZXM6IHtcbiAgICAgIGJhY2tncm91bmRDb2xvcjogZGVzaWduVG9rZW5zLmNvbG9yRXJyb3I5NSxcbiAgICAgIGJvcmRlckNvbG9yOiBkZXNpZ25Ub2tlbnMuY29sb3JFcnJvcjg1LFxuICAgICAgY29sb3I6IGRlc2lnblRva2Vucy5jb2xvckVycm9yNDAsXG4gICAgfSxcbiAgICBpY29uQ29sb3I6ICdlcnJvcicsXG4gIH0sXG4gIHdhcm5pbmc6IHtcbiAgICBzdHlsZXM6IHtcbiAgICAgIGJhY2tncm91bmRDb2xvcjogZGVzaWduVG9rZW5zLmNvbG9yV2FybmluZzk1LFxuICAgICAgYm9yZGVyQ29sb3I6IGRlc2lnblRva2Vucy5jb2xvcldhcm5pbmc4NSxcbiAgICAgIGNvbG9yOiBkZXNpZ25Ub2tlbnMuY29sb3JXYXJuaW5nNDAsXG4gICAgfSxcbiAgICBpY29uQ29sb3I6ICd3YXJuaW5nJyxcbiAgfSxcbiAgcG9zaXRpdmU6IHtcbiAgICBzdHlsZXM6IHtcbiAgICAgIGJhY2tncm91bmRDb2xvcjogZGVzaWduVG9rZW5zLmJhY2tncm91bmRDb2xvckZvclN0YW1wQXNQb3NpdGl2ZSxcbiAgICAgIGJvcmRlckNvbG9yOiBkZXNpZ25Ub2tlbnMuY29sb3JQcmltYXJ5ODUsXG4gICAgICBjb2xvcjogZGVzaWduVG9rZW5zLmZvbnRDb2xvckZvclN0YW1wQXNQb3NpdGl2ZSxcbiAgICB9LFxuICAgIGljb25Db2xvcjogdGhlbWVkVmFsdWUoJ3ByaW1hcnknLCAnc3VjY2VzcycpLFxuICB9LFxuICBpbmZvcm1hdGlvbjoge1xuICAgIHN0eWxlczoge1xuICAgICAgYmFja2dyb3VuZENvbG9yOiBkZXNpZ25Ub2tlbnMuY29sb3JJbmZvOTUsXG4gICAgICBib3JkZXJDb2xvcjogZGVzaWduVG9rZW5zLmNvbG9ySW5mbzg1LFxuICAgICAgY29sb3I6IGRlc2lnblRva2Vucy5jb2xvckluZm80MCxcbiAgICB9LFxuICAgIGljb25Db2xvcjogJ2luZm8nLFxuICB9LFxuICBwcmltYXJ5OiB7XG4gICAgc3R5bGVzOiB7XG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6IGRlc2lnblRva2Vucy5iYWNrZ3JvdW5kQ29sb3JGb3JTdGFtcEFzUHJpbWFyeSxcbiAgICAgIGJvcmRlckNvbG9yOiBkZXNpZ25Ub2tlbnMuY29sb3JQcmltYXJ5ODUsXG4gICAgICBjb2xvcjogZGVzaWduVG9rZW5zLmNvbG9yUHJpbWFyeTI1LFxuICAgIH0sXG4gICAgaWNvbkNvbG9yOiAncHJpbWFyeTQwJyxcbiAgfSxcbiAgc2Vjb25kYXJ5OiB7XG4gICAgc3R5bGVzOiB7XG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6IGRlc2lnblRva2Vucy5jb2xvck5ldXRyYWw5NSxcbiAgICAgIGJvcmRlckNvbG9yOiBkZXNpZ25Ub2tlbnMuY29sb3JOZXV0cmFsODUsXG4gICAgICBjb2xvcjogZGVzaWduVG9rZW5zLmNvbG9yTmV1dHJhbDQwLFxuICAgIH0sXG4gICAgaWNvbkNvbG9yOiAnbmV1dHJhbDYwJyxcbiAgfSxcbn0pO1xuXG5leHBvcnQgY29uc3QgYXZhaWxhYmxlVG9uZXM6IFRUb25lW10gPSBbXG4gICdjcml0aWNhbCcsXG4gICd3YXJuaW5nJyxcbiAgJ3Bvc2l0aXZlJyxcbiAgJ2luZm9ybWF0aW9uJyxcbiAgJ3ByaW1hcnknLFxuICAnc2Vjb25kYXJ5Jyxcbl07XG5jb25zdCBnZXRQYWRkaW5nU3R5bGUgPSAocHJvcHM6IFN0eWxlc0Z1bmN0aW9uUGFyYW1zKSA9PiB7XG4gIGlmIChwcm9wcy5pc0NvbmRlbnNlZClcbiAgICByZXR1cm4gY3NzYFxuICAgICAgcGFkZGluZzogJHtkZXNpZ25Ub2tlbnMuc3BhY2luZzA1fSAke2Rlc2lnblRva2Vucy5zcGFjaW5nMTB9O1xuICAgIGA7XG4gIHJldHVybiBjc3NgXG4gICAgcGFkZGluZzogJHtkZXNpZ25Ub2tlbnMuc3BhY2luZzEwfSAke2Rlc2lnblRva2Vucy5zcGFjaW5nMjV9O1xuICBgO1xufTtcblxuY29uc3QgZ2V0SWNvbkNvbG9yID0gKFxuICBwcm9wczogU3R5bGVzRnVuY3Rpb25QYXJhbXMsXG4gIG92ZXJyaWRlVGV4dENvbG9yOiBib29sZWFuLFxuICB0aGVtZWRWYWx1ZTogVFVzZVRoZW1lUmVzdWx0Wyd0aGVtZWRWYWx1ZSddXG4pID0+IHtcbiAgaWYgKCFvdmVycmlkZVRleHRDb2xvcikge1xuICAgIHJldHVybiAnaW5oZXJpdCc7XG4gIH1cblxuICBjb25zdCB0b25lUHJvcHMgPSBwcm9wcy50b25lICYmIHRvbmVzUHJvcHNNYXAodGhlbWVkVmFsdWUpW3Byb3BzLnRvbmVdO1xuICByZXR1cm4gdG9uZVByb3BzID8gdG9uZVByb3BzLmljb25Db2xvciA6ICcnO1xufTtcblxuY29uc3QgZ2V0VG9uZVN0eWxlcyA9IChcbiAgcHJvcHM6IFN0eWxlc0Z1bmN0aW9uUGFyYW1zLFxuICB0aGVtZWRWYWx1ZTogVFVzZVRoZW1lUmVzdWx0Wyd0aGVtZWRWYWx1ZSddXG4pID0+IHtcbiAgaWYgKCFwcm9wcy50b25lIHx8ICF0b25lc1Byb3BzTWFwKHRoZW1lZFZhbHVlKVtwcm9wcy50b25lXSkge1xuICAgIHJldHVybiBjc3NgYDtcbiAgfVxuXG4gIGNvbnN0IHRvbmVQcm9wcyA9IHRvbmVzUHJvcHNNYXAodGhlbWVkVmFsdWUpW3Byb3BzLnRvbmVdO1xuICByZXR1cm4gY3NzYFxuICAgIGJhY2tncm91bmQtY29sb3I6ICR7dG9uZVByb3BzLnN0eWxlcy5iYWNrZ3JvdW5kQ29sb3J9O1xuXG4gICAgJixcbiAgICAmICoge1xuICAgICAgY29sb3I6ICR7cHJvcHMub3ZlcnJpZGVUZXh0Q29sb3IgPyB0b25lUHJvcHMuc3R5bGVzLmNvbG9yIDogJ2luaGVyaXQnfTtcbiAgICB9XG4gIGA7XG59O1xuXG5jb25zdCBnZXRTdGFtcFN0eWxlcyA9IChwcm9wczogU3R5bGVzRnVuY3Rpb25QYXJhbXMpID0+IHtcbiAgcmV0dXJuIGNzc2BcbiAgICBjb2xvcjogJHtwcm9wcy5vdmVycmlkZVRleHRDb2xvciA/ICdpbmhlcml0JyA6IGRlc2lnblRva2Vucy5jb2xvclNvbGlkfTtcbiAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gICAgYm9yZGVyLXJhZGl1czogJHtwcm9wcy5pc0NvbmRlbnNlZFxuICAgICAgPyBkZXNpZ25Ub2tlbnMuYm9yZGVyUmFkaXVzMlxuICAgICAgOiBkZXNpZ25Ub2tlbnMuYm9yZGVyUmFkaXVzNH07XG4gIGA7XG59O1xuXG5jb25zdCBTdGFtcCA9IChwcm9wczogVFN0YW1wUHJvcHMpID0+IHtcbiAgY29uc3QgeyB0aGVtZWRWYWx1ZSB9ID0gdXNlVGhlbWUoKTtcbiAgY29uc3QgSWNvbiA9XG4gICAgcHJvcHMuaWNvbiAmJlxuICAgIGNsb25lRWxlbWVudChwcm9wcy5pY29uLCB7XG4gICAgICBzaXplOiAnbWVkaXVtJyxcbiAgICAgIGNvbG9yOiBnZXRJY29uQ29sb3IocHJvcHMsIHRydWUsIHRoZW1lZFZhbHVlKSxcbiAgICB9KTtcblxuICB1c2VXYXJuRGVwcmVjYXRlZFByb3AoXG4gICAgIUJvb2xlYW4ocHJvcHMuY2hpbGRyZW4pLFxuICAgICdjaGlsZHJlbicsXG4gICAgJ1N0YW1wJyxcbiAgICAnUGxlYXNlIHVzZSBgbGFiZWxgIGFuZCBgaWNvbmAgcHJvcGVydGllcyBpbnN0ZWFkLidcbiAgKTtcblxuICBjb25zdCBTdGFtcExhYmVsID0gKHsgY2hpbGRyZW4gfTogeyBjaGlsZHJlbjogc3RyaW5nIH0pOiBSZWFjdEVsZW1lbnQgPT5cbiAgICBwcm9wcy5pc0NvbmRlbnNlZCA/IChcbiAgICAgIDxUZXh0LkNhcHRpb24gdG9uZT1cImluaGVyaXRcIiBmb250V2VpZ2h0PVwibWVkaXVtXCI+XG4gICAgICAgIHtjaGlsZHJlbn1cbiAgICAgIDwvVGV4dC5DYXB0aW9uPlxuICAgICkgOiAoXG4gICAgICA8VGV4dC5EZXRhaWwgdG9uZT1cImluaGVyaXRcIiBmb250V2VpZ2h0PVwibWVkaXVtXCI+XG4gICAgICAgIHtjaGlsZHJlbn1cbiAgICAgIDwvVGV4dC5EZXRhaWw+XG4gICAgKTtcblxuICByZXR1cm4gKFxuICAgIDxkaXZcbiAgICAgIGNzcz17W1xuICAgICAgICBnZXRTdGFtcFN0eWxlcyh7IC4uLnByb3BzLCBvdmVycmlkZVRleHRDb2xvcjogdHJ1ZSB9KSxcbiAgICAgICAgZ2V0VG9uZVN0eWxlcyh7IC4uLnByb3BzLCBvdmVycmlkZVRleHRDb2xvcjogdHJ1ZSB9LCB0aGVtZWRWYWx1ZSksXG4gICAgICAgIGdldFBhZGRpbmdTdHlsZShwcm9wcyksXG4gICAgICBdfVxuICAgID5cbiAgICAgIDxTcGFjaW5nc0lubGluZVxuICAgICAgICBhbGlnbkl0ZW1zPVwiY2VudGVyXCJcbiAgICAgICAgc2NhbGU9e3Byb3BzLmlzQ29uZGVuc2VkID8gJ3hzJyA6ICdzJ31cbiAgICAgID5cbiAgICAgICAge0ljb259XG4gICAgICAgIHtwcm9wcy5sYWJlbCA/IDxTdGFtcExhYmVsPntwcm9wcy5sYWJlbH08L1N0YW1wTGFiZWw+IDogcHJvcHMuY2hpbGRyZW59XG4gICAgICA8L1NwYWNpbmdzSW5saW5lPlxuICAgIDwvZGl2PlxuICApO1xufTtcbmNvbnN0IGRlZmF1bHRQcm9wczogUGljazxUU3RhbXBQcm9wcywgJ2lzQ29uZGVuc2VkJyB8ICd0b25lJz4gPSB7XG4gIGlzQ29uZGVuc2VkOiBmYWxzZSxcbiAgdG9uZTogJ2luZm9ybWF0aW9uJyxcbn07XG5TdGFtcC5kaXNwbGF5TmFtZSA9ICdTdGFtcCc7XG5TdGFtcC5kZWZhdWx0UHJvcHMgPSBkZWZhdWx0UHJvcHM7XG5cbmV4cG9ydCBkZWZhdWx0IFN0YW1wO1xuIl19 */");
};
const getStampStyles = props => {
  return /*#__PURE__*/css("color:", props.overrideTextColor ? 'inherit' : designTokens.colorSolid, ";display:inline-block;border-radius:", props.isCondensed ? designTokens.borderRadius2 : designTokens.borderRadius4, ";" + (process.env.NODE_ENV === "production" ? "" : ";label:getStampStyles;"), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInN0YW1wLnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUE4SlkiLCJmaWxlIjoic3RhbXAudHN4Iiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY2xvbmVFbGVtZW50LCB0eXBlIFJlYWN0RWxlbWVudCwgdHlwZSBSZWFjdE5vZGUgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBjc3MgfSBmcm9tICdAZW1vdGlvbi9yZWFjdCc7XG5pbXBvcnQge1xuICBkZXNpZ25Ub2tlbnMsXG4gIHVzZVRoZW1lLFxuICB0eXBlIFRVc2VUaGVtZVJlc3VsdCxcbn0gZnJvbSAnQGNvbW1lcmNldG9vbHMtdWlraXQvZGVzaWduLXN5c3RlbSc7XG5pbXBvcnQgVGV4dCBmcm9tICdAY29tbWVyY2V0b29scy11aWtpdC90ZXh0JztcbmltcG9ydCBTcGFjaW5nc0lubGluZSBmcm9tICdAY29tbWVyY2V0b29scy11aWtpdC9zcGFjaW5ncy1pbmxpbmUnO1xuaW1wb3J0IHsgdXNlV2FybkRlcHJlY2F0ZWRQcm9wIH0gZnJvbSAnQGNvbW1lcmNldG9vbHMtdWlraXQvdXRpbHMnO1xuXG5leHBvcnQgdHlwZSBUVG9uZSA9XG4gIHwgJ2NyaXRpY2FsJ1xuICB8ICd3YXJuaW5nJ1xuICB8ICdwb3NpdGl2ZSdcbiAgfCAnaW5mb3JtYXRpb24nXG4gIHwgJ3ByaW1hcnknXG4gIHwgJ3NlY29uZGFyeSc7XG5cbmV4cG9ydCB0eXBlIFRTdGFtcFByb3BzID0ge1xuICAvKipcbiAgICogSW5kaWNhdGVzIHRoZSBjb2xvciBzY2hlbWUgb2Ygc3RhbXBcbiAgICovXG4gIHRvbmU/OiBUVG9uZTtcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgcmVuZGVycyBhIGNvbmRlbnNlZCB2ZXJzaW9uIG9mIHRoZSBzdGFtcC5cbiAgICovXG4gIGlzQ29uZGVuc2VkOiBib29sZWFuO1xuICAvKipcbiAgICogQ29udGVudCB0byByZW5kZXIgd2l0aGluIHRoZSBzdGFtcC5cbiAgICogVGhpcyBwcm9wZXJ0eSBoYXMgYmVlbiAqKmRlcHJlY2F0ZWQqKiBpbiBmYXZvciBvZiBgbGFiZWxgLlxuICAgKi9cbiAgY2hpbGRyZW4/OiBSZWFjdE5vZGU7XG4gIC8qKlxuICAgKiBJY29uIHRvIHJlbmRlciBiZXNpZGUgKGxlZnQpIHRoZSBzdGFtcCB0ZXh0LlxuICAgKi9cbiAgaWNvbj86IFJlYWN0RWxlbWVudDtcbiAgLyoqXG4gICAqIFRleHQgdG8gcmVuZGVyIHdpdGhpbiB0aGUgc3RhbXAuXG4gICAqL1xuICBsYWJlbD86IHN0cmluZztcbn07XG5cbnR5cGUgVG9uZVJlbGF0ZWRQcm9wcyA9IHtcbiAgc3R5bGVzOiB7XG4gICAgYmFja2dyb3VuZENvbG9yOiBzdHJpbmc7XG4gICAgYm9yZGVyQ29sb3I6IHN0cmluZztcbiAgICBjb2xvcjogc3RyaW5nO1xuICB9O1xuICBpY29uQ29sb3I6IHN0cmluZztcbn07XG5cbnR5cGUgU3R5bGVzRnVuY3Rpb25QYXJhbXMgPSBUU3RhbXBQcm9wcyAmIHsgb3ZlcnJpZGVUZXh0Q29sb3I/OiBib29sZWFuIH07XG5cbmNvbnN0IHRvbmVzUHJvcHNNYXAgPSAoXG4gIHRoZW1lZFZhbHVlOiBUVXNlVGhlbWVSZXN1bHRbJ3RoZW1lZFZhbHVlJ11cbik6IFJlY29yZDxUVG9uZSwgVG9uZVJlbGF0ZWRQcm9wcz4gPT4gKHtcbiAgY3JpdGljYWw6IHtcbiAgICBzdHlsZXM6IHtcbiAgICAgIGJhY2tncm91bmRDb2xvcjogZGVzaWduVG9rZW5zLmNvbG9yRXJyb3I5NSxcbiAgICAgIGJvcmRlckNvbG9yOiBkZXNpZ25Ub2tlbnMuY29sb3JFcnJvcjg1LFxuICAgICAgY29sb3I6IGRlc2lnblRva2Vucy5jb2xvckVycm9yNDAsXG4gICAgfSxcbiAgICBpY29uQ29sb3I6ICdlcnJvcicsXG4gIH0sXG4gIHdhcm5pbmc6IHtcbiAgICBzdHlsZXM6IHtcbiAgICAgIGJhY2tncm91bmRDb2xvcjogZGVzaWduVG9rZW5zLmNvbG9yV2FybmluZzk1LFxuICAgICAgYm9yZGVyQ29sb3I6IGRlc2lnblRva2Vucy5jb2xvcldhcm5pbmc4NSxcbiAgICAgIGNvbG9yOiBkZXNpZ25Ub2tlbnMuY29sb3JXYXJuaW5nNDAsXG4gICAgfSxcbiAgICBpY29uQ29sb3I6ICd3YXJuaW5nJyxcbiAgfSxcbiAgcG9zaXRpdmU6IHtcbiAgICBzdHlsZXM6IHtcbiAgICAgIGJhY2tncm91bmRDb2xvcjogZGVzaWduVG9rZW5zLmJhY2tncm91bmRDb2xvckZvclN0YW1wQXNQb3NpdGl2ZSxcbiAgICAgIGJvcmRlckNvbG9yOiBkZXNpZ25Ub2tlbnMuY29sb3JQcmltYXJ5ODUsXG4gICAgICBjb2xvcjogZGVzaWduVG9rZW5zLmZvbnRDb2xvckZvclN0YW1wQXNQb3NpdGl2ZSxcbiAgICB9LFxuICAgIGljb25Db2xvcjogdGhlbWVkVmFsdWUoJ3ByaW1hcnknLCAnc3VjY2VzcycpLFxuICB9LFxuICBpbmZvcm1hdGlvbjoge1xuICAgIHN0eWxlczoge1xuICAgICAgYmFja2dyb3VuZENvbG9yOiBkZXNpZ25Ub2tlbnMuY29sb3JJbmZvOTUsXG4gICAgICBib3JkZXJDb2xvcjogZGVzaWduVG9rZW5zLmNvbG9ySW5mbzg1LFxuICAgICAgY29sb3I6IGRlc2lnblRva2Vucy5jb2xvckluZm80MCxcbiAgICB9LFxuICAgIGljb25Db2xvcjogJ2luZm8nLFxuICB9LFxuICBwcmltYXJ5OiB7XG4gICAgc3R5bGVzOiB7XG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6IGRlc2lnblRva2Vucy5iYWNrZ3JvdW5kQ29sb3JGb3JTdGFtcEFzUHJpbWFyeSxcbiAgICAgIGJvcmRlckNvbG9yOiBkZXNpZ25Ub2tlbnMuY29sb3JQcmltYXJ5ODUsXG4gICAgICBjb2xvcjogZGVzaWduVG9rZW5zLmNvbG9yUHJpbWFyeTI1LFxuICAgIH0sXG4gICAgaWNvbkNvbG9yOiAncHJpbWFyeTQwJyxcbiAgfSxcbiAgc2Vjb25kYXJ5OiB7XG4gICAgc3R5bGVzOiB7XG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6IGRlc2lnblRva2Vucy5jb2xvck5ldXRyYWw5NSxcbiAgICAgIGJvcmRlckNvbG9yOiBkZXNpZ25Ub2tlbnMuY29sb3JOZXV0cmFsODUsXG4gICAgICBjb2xvcjogZGVzaWduVG9rZW5zLmNvbG9yTmV1dHJhbDQwLFxuICAgIH0sXG4gICAgaWNvbkNvbG9yOiAnbmV1dHJhbDYwJyxcbiAgfSxcbn0pO1xuXG5leHBvcnQgY29uc3QgYXZhaWxhYmxlVG9uZXM6IFRUb25lW10gPSBbXG4gICdjcml0aWNhbCcsXG4gICd3YXJuaW5nJyxcbiAgJ3Bvc2l0aXZlJyxcbiAgJ2luZm9ybWF0aW9uJyxcbiAgJ3ByaW1hcnknLFxuICAnc2Vjb25kYXJ5Jyxcbl07XG5jb25zdCBnZXRQYWRkaW5nU3R5bGUgPSAocHJvcHM6IFN0eWxlc0Z1bmN0aW9uUGFyYW1zKSA9PiB7XG4gIGlmIChwcm9wcy5pc0NvbmRlbnNlZClcbiAgICByZXR1cm4gY3NzYFxuICAgICAgcGFkZGluZzogJHtkZXNpZ25Ub2tlbnMuc3BhY2luZzA1fSAke2Rlc2lnblRva2Vucy5zcGFjaW5nMTB9O1xuICAgIGA7XG4gIHJldHVybiBjc3NgXG4gICAgcGFkZGluZzogJHtkZXNpZ25Ub2tlbnMuc3BhY2luZzEwfSAke2Rlc2lnblRva2Vucy5zcGFjaW5nMjV9O1xuICBgO1xufTtcblxuY29uc3QgZ2V0SWNvbkNvbG9yID0gKFxuICBwcm9wczogU3R5bGVzRnVuY3Rpb25QYXJhbXMsXG4gIG92ZXJyaWRlVGV4dENvbG9yOiBib29sZWFuLFxuICB0aGVtZWRWYWx1ZTogVFVzZVRoZW1lUmVzdWx0Wyd0aGVtZWRWYWx1ZSddXG4pID0+IHtcbiAgaWYgKCFvdmVycmlkZVRleHRDb2xvcikge1xuICAgIHJldHVybiAnaW5oZXJpdCc7XG4gIH1cblxuICBjb25zdCB0b25lUHJvcHMgPSBwcm9wcy50b25lICYmIHRvbmVzUHJvcHNNYXAodGhlbWVkVmFsdWUpW3Byb3BzLnRvbmVdO1xuICByZXR1cm4gdG9uZVByb3BzID8gdG9uZVByb3BzLmljb25Db2xvciA6ICcnO1xufTtcblxuY29uc3QgZ2V0VG9uZVN0eWxlcyA9IChcbiAgcHJvcHM6IFN0eWxlc0Z1bmN0aW9uUGFyYW1zLFxuICB0aGVtZWRWYWx1ZTogVFVzZVRoZW1lUmVzdWx0Wyd0aGVtZWRWYWx1ZSddXG4pID0+IHtcbiAgaWYgKCFwcm9wcy50b25lIHx8ICF0b25lc1Byb3BzTWFwKHRoZW1lZFZhbHVlKVtwcm9wcy50b25lXSkge1xuICAgIHJldHVybiBjc3NgYDtcbiAgfVxuXG4gIGNvbnN0IHRvbmVQcm9wcyA9IHRvbmVzUHJvcHNNYXAodGhlbWVkVmFsdWUpW3Byb3BzLnRvbmVdO1xuICByZXR1cm4gY3NzYFxuICAgIGJhY2tncm91bmQtY29sb3I6ICR7dG9uZVByb3BzLnN0eWxlcy5iYWNrZ3JvdW5kQ29sb3J9O1xuXG4gICAgJixcbiAgICAmICoge1xuICAgICAgY29sb3I6ICR7cHJvcHMub3ZlcnJpZGVUZXh0Q29sb3IgPyB0b25lUHJvcHMuc3R5bGVzLmNvbG9yIDogJ2luaGVyaXQnfTtcbiAgICB9XG4gIGA7XG59O1xuXG5jb25zdCBnZXRTdGFtcFN0eWxlcyA9IChwcm9wczogU3R5bGVzRnVuY3Rpb25QYXJhbXMpID0+IHtcbiAgcmV0dXJuIGNzc2BcbiAgICBjb2xvcjogJHtwcm9wcy5vdmVycmlkZVRleHRDb2xvciA/ICdpbmhlcml0JyA6IGRlc2lnblRva2Vucy5jb2xvclNvbGlkfTtcbiAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gICAgYm9yZGVyLXJhZGl1czogJHtwcm9wcy5pc0NvbmRlbnNlZFxuICAgICAgPyBkZXNpZ25Ub2tlbnMuYm9yZGVyUmFkaXVzMlxuICAgICAgOiBkZXNpZ25Ub2tlbnMuYm9yZGVyUmFkaXVzNH07XG4gIGA7XG59O1xuXG5jb25zdCBTdGFtcCA9IChwcm9wczogVFN0YW1wUHJvcHMpID0+IHtcbiAgY29uc3QgeyB0aGVtZWRWYWx1ZSB9ID0gdXNlVGhlbWUoKTtcbiAgY29uc3QgSWNvbiA9XG4gICAgcHJvcHMuaWNvbiAmJlxuICAgIGNsb25lRWxlbWVudChwcm9wcy5pY29uLCB7XG4gICAgICBzaXplOiAnbWVkaXVtJyxcbiAgICAgIGNvbG9yOiBnZXRJY29uQ29sb3IocHJvcHMsIHRydWUsIHRoZW1lZFZhbHVlKSxcbiAgICB9KTtcblxuICB1c2VXYXJuRGVwcmVjYXRlZFByb3AoXG4gICAgIUJvb2xlYW4ocHJvcHMuY2hpbGRyZW4pLFxuICAgICdjaGlsZHJlbicsXG4gICAgJ1N0YW1wJyxcbiAgICAnUGxlYXNlIHVzZSBgbGFiZWxgIGFuZCBgaWNvbmAgcHJvcGVydGllcyBpbnN0ZWFkLidcbiAgKTtcblxuICBjb25zdCBTdGFtcExhYmVsID0gKHsgY2hpbGRyZW4gfTogeyBjaGlsZHJlbjogc3RyaW5nIH0pOiBSZWFjdEVsZW1lbnQgPT5cbiAgICBwcm9wcy5pc0NvbmRlbnNlZCA/IChcbiAgICAgIDxUZXh0LkNhcHRpb24gdG9uZT1cImluaGVyaXRcIiBmb250V2VpZ2h0PVwibWVkaXVtXCI+XG4gICAgICAgIHtjaGlsZHJlbn1cbiAgICAgIDwvVGV4dC5DYXB0aW9uPlxuICAgICkgOiAoXG4gICAgICA8VGV4dC5EZXRhaWwgdG9uZT1cImluaGVyaXRcIiBmb250V2VpZ2h0PVwibWVkaXVtXCI+XG4gICAgICAgIHtjaGlsZHJlbn1cbiAgICAgIDwvVGV4dC5EZXRhaWw+XG4gICAgKTtcblxuICByZXR1cm4gKFxuICAgIDxkaXZcbiAgICAgIGNzcz17W1xuICAgICAgICBnZXRTdGFtcFN0eWxlcyh7IC4uLnByb3BzLCBvdmVycmlkZVRleHRDb2xvcjogdHJ1ZSB9KSxcbiAgICAgICAgZ2V0VG9uZVN0eWxlcyh7IC4uLnByb3BzLCBvdmVycmlkZVRleHRDb2xvcjogdHJ1ZSB9LCB0aGVtZWRWYWx1ZSksXG4gICAgICAgIGdldFBhZGRpbmdTdHlsZShwcm9wcyksXG4gICAgICBdfVxuICAgID5cbiAgICAgIDxTcGFjaW5nc0lubGluZVxuICAgICAgICBhbGlnbkl0ZW1zPVwiY2VudGVyXCJcbiAgICAgICAgc2NhbGU9e3Byb3BzLmlzQ29uZGVuc2VkID8gJ3hzJyA6ICdzJ31cbiAgICAgID5cbiAgICAgICAge0ljb259XG4gICAgICAgIHtwcm9wcy5sYWJlbCA/IDxTdGFtcExhYmVsPntwcm9wcy5sYWJlbH08L1N0YW1wTGFiZWw+IDogcHJvcHMuY2hpbGRyZW59XG4gICAgICA8L1NwYWNpbmdzSW5saW5lPlxuICAgIDwvZGl2PlxuICApO1xufTtcbmNvbnN0IGRlZmF1bHRQcm9wczogUGljazxUU3RhbXBQcm9wcywgJ2lzQ29uZGVuc2VkJyB8ICd0b25lJz4gPSB7XG4gIGlzQ29uZGVuc2VkOiBmYWxzZSxcbiAgdG9uZTogJ2luZm9ybWF0aW9uJyxcbn07XG5TdGFtcC5kaXNwbGF5TmFtZSA9ICdTdGFtcCc7XG5TdGFtcC5kZWZhdWx0UHJvcHMgPSBkZWZhdWx0UHJvcHM7XG5cbmV4cG9ydCBkZWZhdWx0IFN0YW1wO1xuIl19 */");
};
const Stamp = props => {
  const _useTheme = useTheme(),
    themedValue = _useTheme.themedValue;
  const Icon = props.icon && /*#__PURE__*/cloneElement(props.icon, {
    size: 'medium',
    color: getIconColor(props, true, themedValue)
  });
  useWarnDeprecatedProp(!Boolean(props.children), 'children', 'Stamp', 'Please use `label` and `icon` properties instead.');
  const StampLabel = _ref => {
    let children = _ref.children;
    return props.isCondensed ? jsx(Text.Caption, {
      tone: "inherit",
      fontWeight: "medium",
      children: children
    }) : jsx(Text.Detail, {
      tone: "inherit",
      fontWeight: "medium",
      children: children
    });
  };
  return jsx("div", {
    css: [getStampStyles(_objectSpread(_objectSpread({}, props), {}, {
      overrideTextColor: true
    })), getToneStyles(_objectSpread(_objectSpread({}, props), {}, {
      overrideTextColor: true
    }), themedValue), getPaddingStyle(props), process.env.NODE_ENV === "production" ? "" : ";label:Stamp;", process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInN0YW1wLnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFvTU0iLCJmaWxlIjoic3RhbXAudHN4Iiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY2xvbmVFbGVtZW50LCB0eXBlIFJlYWN0RWxlbWVudCwgdHlwZSBSZWFjdE5vZGUgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBjc3MgfSBmcm9tICdAZW1vdGlvbi9yZWFjdCc7XG5pbXBvcnQge1xuICBkZXNpZ25Ub2tlbnMsXG4gIHVzZVRoZW1lLFxuICB0eXBlIFRVc2VUaGVtZVJlc3VsdCxcbn0gZnJvbSAnQGNvbW1lcmNldG9vbHMtdWlraXQvZGVzaWduLXN5c3RlbSc7XG5pbXBvcnQgVGV4dCBmcm9tICdAY29tbWVyY2V0b29scy11aWtpdC90ZXh0JztcbmltcG9ydCBTcGFjaW5nc0lubGluZSBmcm9tICdAY29tbWVyY2V0b29scy11aWtpdC9zcGFjaW5ncy1pbmxpbmUnO1xuaW1wb3J0IHsgdXNlV2FybkRlcHJlY2F0ZWRQcm9wIH0gZnJvbSAnQGNvbW1lcmNldG9vbHMtdWlraXQvdXRpbHMnO1xuXG5leHBvcnQgdHlwZSBUVG9uZSA9XG4gIHwgJ2NyaXRpY2FsJ1xuICB8ICd3YXJuaW5nJ1xuICB8ICdwb3NpdGl2ZSdcbiAgfCAnaW5mb3JtYXRpb24nXG4gIHwgJ3ByaW1hcnknXG4gIHwgJ3NlY29uZGFyeSc7XG5cbmV4cG9ydCB0eXBlIFRTdGFtcFByb3BzID0ge1xuICAvKipcbiAgICogSW5kaWNhdGVzIHRoZSBjb2xvciBzY2hlbWUgb2Ygc3RhbXBcbiAgICovXG4gIHRvbmU/OiBUVG9uZTtcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgcmVuZGVycyBhIGNvbmRlbnNlZCB2ZXJzaW9uIG9mIHRoZSBzdGFtcC5cbiAgICovXG4gIGlzQ29uZGVuc2VkOiBib29sZWFuO1xuICAvKipcbiAgICogQ29udGVudCB0byByZW5kZXIgd2l0aGluIHRoZSBzdGFtcC5cbiAgICogVGhpcyBwcm9wZXJ0eSBoYXMgYmVlbiAqKmRlcHJlY2F0ZWQqKiBpbiBmYXZvciBvZiBgbGFiZWxgLlxuICAgKi9cbiAgY2hpbGRyZW4/OiBSZWFjdE5vZGU7XG4gIC8qKlxuICAgKiBJY29uIHRvIHJlbmRlciBiZXNpZGUgKGxlZnQpIHRoZSBzdGFtcCB0ZXh0LlxuICAgKi9cbiAgaWNvbj86IFJlYWN0RWxlbWVudDtcbiAgLyoqXG4gICAqIFRleHQgdG8gcmVuZGVyIHdpdGhpbiB0aGUgc3RhbXAuXG4gICAqL1xuICBsYWJlbD86IHN0cmluZztcbn07XG5cbnR5cGUgVG9uZVJlbGF0ZWRQcm9wcyA9IHtcbiAgc3R5bGVzOiB7XG4gICAgYmFja2dyb3VuZENvbG9yOiBzdHJpbmc7XG4gICAgYm9yZGVyQ29sb3I6IHN0cmluZztcbiAgICBjb2xvcjogc3RyaW5nO1xuICB9O1xuICBpY29uQ29sb3I6IHN0cmluZztcbn07XG5cbnR5cGUgU3R5bGVzRnVuY3Rpb25QYXJhbXMgPSBUU3RhbXBQcm9wcyAmIHsgb3ZlcnJpZGVUZXh0Q29sb3I/OiBib29sZWFuIH07XG5cbmNvbnN0IHRvbmVzUHJvcHNNYXAgPSAoXG4gIHRoZW1lZFZhbHVlOiBUVXNlVGhlbWVSZXN1bHRbJ3RoZW1lZFZhbHVlJ11cbik6IFJlY29yZDxUVG9uZSwgVG9uZVJlbGF0ZWRQcm9wcz4gPT4gKHtcbiAgY3JpdGljYWw6IHtcbiAgICBzdHlsZXM6IHtcbiAgICAgIGJhY2tncm91bmRDb2xvcjogZGVzaWduVG9rZW5zLmNvbG9yRXJyb3I5NSxcbiAgICAgIGJvcmRlckNvbG9yOiBkZXNpZ25Ub2tlbnMuY29sb3JFcnJvcjg1LFxuICAgICAgY29sb3I6IGRlc2lnblRva2Vucy5jb2xvckVycm9yNDAsXG4gICAgfSxcbiAgICBpY29uQ29sb3I6ICdlcnJvcicsXG4gIH0sXG4gIHdhcm5pbmc6IHtcbiAgICBzdHlsZXM6IHtcbiAgICAgIGJhY2tncm91bmRDb2xvcjogZGVzaWduVG9rZW5zLmNvbG9yV2FybmluZzk1LFxuICAgICAgYm9yZGVyQ29sb3I6IGRlc2lnblRva2Vucy5jb2xvcldhcm5pbmc4NSxcbiAgICAgIGNvbG9yOiBkZXNpZ25Ub2tlbnMuY29sb3JXYXJuaW5nNDAsXG4gICAgfSxcbiAgICBpY29uQ29sb3I6ICd3YXJuaW5nJyxcbiAgfSxcbiAgcG9zaXRpdmU6IHtcbiAgICBzdHlsZXM6IHtcbiAgICAgIGJhY2tncm91bmRDb2xvcjogZGVzaWduVG9rZW5zLmJhY2tncm91bmRDb2xvckZvclN0YW1wQXNQb3NpdGl2ZSxcbiAgICAgIGJvcmRlckNvbG9yOiBkZXNpZ25Ub2tlbnMuY29sb3JQcmltYXJ5ODUsXG4gICAgICBjb2xvcjogZGVzaWduVG9rZW5zLmZvbnRDb2xvckZvclN0YW1wQXNQb3NpdGl2ZSxcbiAgICB9LFxuICAgIGljb25Db2xvcjogdGhlbWVkVmFsdWUoJ3ByaW1hcnknLCAnc3VjY2VzcycpLFxuICB9LFxuICBpbmZvcm1hdGlvbjoge1xuICAgIHN0eWxlczoge1xuICAgICAgYmFja2dyb3VuZENvbG9yOiBkZXNpZ25Ub2tlbnMuY29sb3JJbmZvOTUsXG4gICAgICBib3JkZXJDb2xvcjogZGVzaWduVG9rZW5zLmNvbG9ySW5mbzg1LFxuICAgICAgY29sb3I6IGRlc2lnblRva2Vucy5jb2xvckluZm80MCxcbiAgICB9LFxuICAgIGljb25Db2xvcjogJ2luZm8nLFxuICB9LFxuICBwcmltYXJ5OiB7XG4gICAgc3R5bGVzOiB7XG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6IGRlc2lnblRva2Vucy5iYWNrZ3JvdW5kQ29sb3JGb3JTdGFtcEFzUHJpbWFyeSxcbiAgICAgIGJvcmRlckNvbG9yOiBkZXNpZ25Ub2tlbnMuY29sb3JQcmltYXJ5ODUsXG4gICAgICBjb2xvcjogZGVzaWduVG9rZW5zLmNvbG9yUHJpbWFyeTI1LFxuICAgIH0sXG4gICAgaWNvbkNvbG9yOiAncHJpbWFyeTQwJyxcbiAgfSxcbiAgc2Vjb25kYXJ5OiB7XG4gICAgc3R5bGVzOiB7XG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6IGRlc2lnblRva2Vucy5jb2xvck5ldXRyYWw5NSxcbiAgICAgIGJvcmRlckNvbG9yOiBkZXNpZ25Ub2tlbnMuY29sb3JOZXV0cmFsODUsXG4gICAgICBjb2xvcjogZGVzaWduVG9rZW5zLmNvbG9yTmV1dHJhbDQwLFxuICAgIH0sXG4gICAgaWNvbkNvbG9yOiAnbmV1dHJhbDYwJyxcbiAgfSxcbn0pO1xuXG5leHBvcnQgY29uc3QgYXZhaWxhYmxlVG9uZXM6IFRUb25lW10gPSBbXG4gICdjcml0aWNhbCcsXG4gICd3YXJuaW5nJyxcbiAgJ3Bvc2l0aXZlJyxcbiAgJ2luZm9ybWF0aW9uJyxcbiAgJ3ByaW1hcnknLFxuICAnc2Vjb25kYXJ5Jyxcbl07XG5jb25zdCBnZXRQYWRkaW5nU3R5bGUgPSAocHJvcHM6IFN0eWxlc0Z1bmN0aW9uUGFyYW1zKSA9PiB7XG4gIGlmIChwcm9wcy5pc0NvbmRlbnNlZClcbiAgICByZXR1cm4gY3NzYFxuICAgICAgcGFkZGluZzogJHtkZXNpZ25Ub2tlbnMuc3BhY2luZzA1fSAke2Rlc2lnblRva2Vucy5zcGFjaW5nMTB9O1xuICAgIGA7XG4gIHJldHVybiBjc3NgXG4gICAgcGFkZGluZzogJHtkZXNpZ25Ub2tlbnMuc3BhY2luZzEwfSAke2Rlc2lnblRva2Vucy5zcGFjaW5nMjV9O1xuICBgO1xufTtcblxuY29uc3QgZ2V0SWNvbkNvbG9yID0gKFxuICBwcm9wczogU3R5bGVzRnVuY3Rpb25QYXJhbXMsXG4gIG92ZXJyaWRlVGV4dENvbG9yOiBib29sZWFuLFxuICB0aGVtZWRWYWx1ZTogVFVzZVRoZW1lUmVzdWx0Wyd0aGVtZWRWYWx1ZSddXG4pID0+IHtcbiAgaWYgKCFvdmVycmlkZVRleHRDb2xvcikge1xuICAgIHJldHVybiAnaW5oZXJpdCc7XG4gIH1cblxuICBjb25zdCB0b25lUHJvcHMgPSBwcm9wcy50b25lICYmIHRvbmVzUHJvcHNNYXAodGhlbWVkVmFsdWUpW3Byb3BzLnRvbmVdO1xuICByZXR1cm4gdG9uZVByb3BzID8gdG9uZVByb3BzLmljb25Db2xvciA6ICcnO1xufTtcblxuY29uc3QgZ2V0VG9uZVN0eWxlcyA9IChcbiAgcHJvcHM6IFN0eWxlc0Z1bmN0aW9uUGFyYW1zLFxuICB0aGVtZWRWYWx1ZTogVFVzZVRoZW1lUmVzdWx0Wyd0aGVtZWRWYWx1ZSddXG4pID0+IHtcbiAgaWYgKCFwcm9wcy50b25lIHx8ICF0b25lc1Byb3BzTWFwKHRoZW1lZFZhbHVlKVtwcm9wcy50b25lXSkge1xuICAgIHJldHVybiBjc3NgYDtcbiAgfVxuXG4gIGNvbnN0IHRvbmVQcm9wcyA9IHRvbmVzUHJvcHNNYXAodGhlbWVkVmFsdWUpW3Byb3BzLnRvbmVdO1xuICByZXR1cm4gY3NzYFxuICAgIGJhY2tncm91bmQtY29sb3I6ICR7dG9uZVByb3BzLnN0eWxlcy5iYWNrZ3JvdW5kQ29sb3J9O1xuXG4gICAgJixcbiAgICAmICoge1xuICAgICAgY29sb3I6ICR7cHJvcHMub3ZlcnJpZGVUZXh0Q29sb3IgPyB0b25lUHJvcHMuc3R5bGVzLmNvbG9yIDogJ2luaGVyaXQnfTtcbiAgICB9XG4gIGA7XG59O1xuXG5jb25zdCBnZXRTdGFtcFN0eWxlcyA9IChwcm9wczogU3R5bGVzRnVuY3Rpb25QYXJhbXMpID0+IHtcbiAgcmV0dXJuIGNzc2BcbiAgICBjb2xvcjogJHtwcm9wcy5vdmVycmlkZVRleHRDb2xvciA/ICdpbmhlcml0JyA6IGRlc2lnblRva2Vucy5jb2xvclNvbGlkfTtcbiAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gICAgYm9yZGVyLXJhZGl1czogJHtwcm9wcy5pc0NvbmRlbnNlZFxuICAgICAgPyBkZXNpZ25Ub2tlbnMuYm9yZGVyUmFkaXVzMlxuICAgICAgOiBkZXNpZ25Ub2tlbnMuYm9yZGVyUmFkaXVzNH07XG4gIGA7XG59O1xuXG5jb25zdCBTdGFtcCA9IChwcm9wczogVFN0YW1wUHJvcHMpID0+IHtcbiAgY29uc3QgeyB0aGVtZWRWYWx1ZSB9ID0gdXNlVGhlbWUoKTtcbiAgY29uc3QgSWNvbiA9XG4gICAgcHJvcHMuaWNvbiAmJlxuICAgIGNsb25lRWxlbWVudChwcm9wcy5pY29uLCB7XG4gICAgICBzaXplOiAnbWVkaXVtJyxcbiAgICAgIGNvbG9yOiBnZXRJY29uQ29sb3IocHJvcHMsIHRydWUsIHRoZW1lZFZhbHVlKSxcbiAgICB9KTtcblxuICB1c2VXYXJuRGVwcmVjYXRlZFByb3AoXG4gICAgIUJvb2xlYW4ocHJvcHMuY2hpbGRyZW4pLFxuICAgICdjaGlsZHJlbicsXG4gICAgJ1N0YW1wJyxcbiAgICAnUGxlYXNlIHVzZSBgbGFiZWxgIGFuZCBgaWNvbmAgcHJvcGVydGllcyBpbnN0ZWFkLidcbiAgKTtcblxuICBjb25zdCBTdGFtcExhYmVsID0gKHsgY2hpbGRyZW4gfTogeyBjaGlsZHJlbjogc3RyaW5nIH0pOiBSZWFjdEVsZW1lbnQgPT5cbiAgICBwcm9wcy5pc0NvbmRlbnNlZCA/IChcbiAgICAgIDxUZXh0LkNhcHRpb24gdG9uZT1cImluaGVyaXRcIiBmb250V2VpZ2h0PVwibWVkaXVtXCI+XG4gICAgICAgIHtjaGlsZHJlbn1cbiAgICAgIDwvVGV4dC5DYXB0aW9uPlxuICAgICkgOiAoXG4gICAgICA8VGV4dC5EZXRhaWwgdG9uZT1cImluaGVyaXRcIiBmb250V2VpZ2h0PVwibWVkaXVtXCI+XG4gICAgICAgIHtjaGlsZHJlbn1cbiAgICAgIDwvVGV4dC5EZXRhaWw+XG4gICAgKTtcblxuICByZXR1cm4gKFxuICAgIDxkaXZcbiAgICAgIGNzcz17W1xuICAgICAgICBnZXRTdGFtcFN0eWxlcyh7IC4uLnByb3BzLCBvdmVycmlkZVRleHRDb2xvcjogdHJ1ZSB9KSxcbiAgICAgICAgZ2V0VG9uZVN0eWxlcyh7IC4uLnByb3BzLCBvdmVycmlkZVRleHRDb2xvcjogdHJ1ZSB9LCB0aGVtZWRWYWx1ZSksXG4gICAgICAgIGdldFBhZGRpbmdTdHlsZShwcm9wcyksXG4gICAgICBdfVxuICAgID5cbiAgICAgIDxTcGFjaW5nc0lubGluZVxuICAgICAgICBhbGlnbkl0ZW1zPVwiY2VudGVyXCJcbiAgICAgICAgc2NhbGU9e3Byb3BzLmlzQ29uZGVuc2VkID8gJ3hzJyA6ICdzJ31cbiAgICAgID5cbiAgICAgICAge0ljb259XG4gICAgICAgIHtwcm9wcy5sYWJlbCA/IDxTdGFtcExhYmVsPntwcm9wcy5sYWJlbH08L1N0YW1wTGFiZWw+IDogcHJvcHMuY2hpbGRyZW59XG4gICAgICA8L1NwYWNpbmdzSW5saW5lPlxuICAgIDwvZGl2PlxuICApO1xufTtcbmNvbnN0IGRlZmF1bHRQcm9wczogUGljazxUU3RhbXBQcm9wcywgJ2lzQ29uZGVuc2VkJyB8ICd0b25lJz4gPSB7XG4gIGlzQ29uZGVuc2VkOiBmYWxzZSxcbiAgdG9uZTogJ2luZm9ybWF0aW9uJyxcbn07XG5TdGFtcC5kaXNwbGF5TmFtZSA9ICdTdGFtcCc7XG5TdGFtcC5kZWZhdWx0UHJvcHMgPSBkZWZhdWx0UHJvcHM7XG5cbmV4cG9ydCBkZWZhdWx0IFN0YW1wO1xuIl19 */"],
    children: jsxs(SpacingsInline, {
      alignItems: "center",
      scale: props.isCondensed ? 'xs' : 's',
      children: [Icon, props.label ? jsx(StampLabel, {
        children: props.label
      }) : props.children]
    })
  });
};
Stamp.propTypes = process.env.NODE_ENV !== "production" ? {
  tone: _pt.oneOf(['critical', 'warning', 'positive', 'information', 'primary', 'secondary']),
  isCondensed: _pt.bool.isRequired,
  children: _pt.node,
  icon: _pt.element,
  label: _pt.string
} : {};
const defaultProps = {
  isCondensed: false,
  tone: 'information'
};
Stamp.displayName = 'Stamp';
Stamp.defaultProps = defaultProps;
var Stamp$1 = Stamp;

// NOTE: This string will be replaced on build time with the package version.
var version = "18.3.0";

export { Stamp$1 as default, version };
