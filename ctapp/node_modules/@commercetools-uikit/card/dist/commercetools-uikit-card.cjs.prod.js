'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _Object$keys = require('@babel/runtime-corejs3/core-js-stable/object/keys');
var _Object$getOwnPropertySymbols = require('@babel/runtime-corejs3/core-js-stable/object/get-own-property-symbols');
var _filterInstanceProperty = require('@babel/runtime-corejs3/core-js-stable/instance/filter');
var _Object$getOwnPropertyDescriptor = require('@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptor');
var _forEachInstanceProperty = require('@babel/runtime-corejs3/core-js-stable/instance/for-each');
var _Object$getOwnPropertyDescriptors = require('@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptors');
var _Object$defineProperties = require('@babel/runtime-corejs3/core-js-stable/object/define-properties');
var _Object$defineProperty = require('@babel/runtime-corejs3/core-js-stable/object/define-property');
var _defineProperty = require('@babel/runtime-corejs3/helpers/defineProperty');
require('prop-types');
require('react');
var react = require('@emotion/react');
var designSystem = require('@commercetools-uikit/design-system');
var utils = require('@commercetools-uikit/utils');
var Inset = require('@commercetools-uikit/spacings-inset');
var reactRouterDom = require('react-router-dom');
var jsxRuntime = require('@emotion/react/jsx-runtime');

function _interopDefault (e) { return e && e.__esModule ? e : { 'default': e }; }

var _Object$keys__default = /*#__PURE__*/_interopDefault(_Object$keys);
var _Object$getOwnPropertySymbols__default = /*#__PURE__*/_interopDefault(_Object$getOwnPropertySymbols);
var _filterInstanceProperty__default = /*#__PURE__*/_interopDefault(_filterInstanceProperty);
var _Object$getOwnPropertyDescriptor__default = /*#__PURE__*/_interopDefault(_Object$getOwnPropertyDescriptor);
var _forEachInstanceProperty__default = /*#__PURE__*/_interopDefault(_forEachInstanceProperty);
var _Object$getOwnPropertyDescriptors__default = /*#__PURE__*/_interopDefault(_Object$getOwnPropertyDescriptors);
var _Object$defineProperties__default = /*#__PURE__*/_interopDefault(_Object$defineProperties);
var _Object$defineProperty__default = /*#__PURE__*/_interopDefault(_Object$defineProperty);
var Inset__default = /*#__PURE__*/_interopDefault(Inset);

function ownKeys(e, r) { var t = _Object$keys__default["default"](e); if (_Object$getOwnPropertySymbols__default["default"]) { var o = _Object$getOwnPropertySymbols__default["default"](e); r && (o = _filterInstanceProperty__default["default"](o).call(o, function (r) { return _Object$getOwnPropertyDescriptor__default["default"](e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var _context, _context2; var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? _forEachInstanceProperty__default["default"](_context = ownKeys(Object(t), !0)).call(_context, function (r) { _defineProperty(e, r, t[r]); }) : _Object$getOwnPropertyDescriptors__default["default"] ? _Object$defineProperties__default["default"](e, _Object$getOwnPropertyDescriptors__default["default"](t)) : _forEachInstanceProperty__default["default"](_context2 = ownKeys(Object(t))).call(_context2, function (r) { _Object$defineProperty__default["default"](e, r, _Object$getOwnPropertyDescriptor__default["default"](t, r)); }); } return e; }
const Card = props => {
  const isClickable = Boolean(!props.isDisabled && (props.onClick || props.to));
  // Only disable styling if the card is not clickable
  const shouldBeDisabled = props.isDisabled && (props.onClick || props.to);
  const commonProps = _objectSpread(_objectSpread({}, utils.filterDataAttributes(props)), {}, {
    onClick: isClickable ? props.onClick : undefined,
    'aria-disabled': props.isDisabled ? true : undefined,
    css: /*#__PURE__*/react.css("box-sizing:border-box;width:100%;font-size:1rem;box-shadow:", props.type === 'raised' ? designSystem.designTokens.shadow17 : 'none', ";border-radius:", designSystem.designTokens.borderRadius4, ";border:", props.type === 'raised' ? "1px solid ".concat(designSystem.designTokens.colorNeutral90) : 'none', ";background:", props.theme === 'dark' ? designSystem.designTokens.colorNeutral95 : designSystem.designTokens.colorSurface, ";cursor:", shouldBeDisabled ? 'not-allowed' : isClickable ? 'pointer' : 'default', ";:hover{background:", props.theme === 'dark' ? isClickable ? designSystem.designTokens.colorNeutral90 : undefined : isClickable ? designSystem.designTokens.colorNeutral98 : undefined, ";}display:block;color:inherit;&>div{opacity:", shouldBeDisabled ? 0.5 : 1, ";}" + ("" ), "" ),
    className: props.className
  });
  const content = props.insetScale === 'none' ? jsxRuntime.jsx("div", {
    children: props.children
  }) : jsxRuntime.jsx(Inset__default["default"], {
    scale: props.insetScale,
    height: "expanded",
    children: props.children
  });
  if (isClickable) {
    if (props.to) {
      if (props.isExternalLink) {
        return jsxRuntime.jsx("a", _objectSpread(_objectSpread({}, commonProps), {}, {
          href: props.to,
          target: "_blank",
          rel: "noopener noreferrer",
          children: content
        }));
      } else {
        return jsxRuntime.jsx(reactRouterDom.Link, _objectSpread(_objectSpread({}, commonProps), {}, {
          to: props.to,
          children: content
        }));
      }
    }
  }
  return jsxRuntime.jsx("div", _objectSpread(_objectSpread({}, commonProps), {}, {
    // Support accessibility as a button when the `onClick` prop is provided
    role: isClickable ? 'button' : undefined,
    tabIndex: isClickable ? 0 : undefined,
    onKeyDown: event => {
      if (isClickable && props.onClick && event.key === 'Enter') {
        props.onClick();
      }
    },
    children: content
  }));
};
Card.propTypes = {};
const defaultProps = {
  type: 'raised',
  theme: 'light',
  insetScale: 'm'
};
Card.displayName = 'Card';
Card.defaultProps = defaultProps;
var Card$1 = Card;

// NOTE: This string will be replaced on build time with the package version.
var version = "18.3.0";

exports["default"] = Card$1;
exports.version = version;
