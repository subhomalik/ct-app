'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _Object$keys = require('@babel/runtime-corejs3/core-js-stable/object/keys');
var _Object$getOwnPropertySymbols = require('@babel/runtime-corejs3/core-js-stable/object/get-own-property-symbols');
var _filterInstanceProperty = require('@babel/runtime-corejs3/core-js-stable/instance/filter');
var _Object$getOwnPropertyDescriptor = require('@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptor');
var _forEachInstanceProperty = require('@babel/runtime-corejs3/core-js-stable/instance/for-each');
var _Object$getOwnPropertyDescriptors = require('@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptors');
var _Object$defineProperties = require('@babel/runtime-corejs3/core-js-stable/object/define-properties');
var _Object$defineProperty = require('@babel/runtime-corejs3/core-js-stable/object/define-property');
var _defineProperty = require('@babel/runtime-corejs3/helpers/defineProperty');
var _pt = require('prop-types');
require('react');
var Text = require('@commercetools-uikit/text');
var utils = require('@commercetools-uikit/utils');
var jsxRuntime = require('@emotion/react/jsx-runtime');

function _interopDefault (e) { return e && e.__esModule ? e : { 'default': e }; }

var _Object$keys__default = /*#__PURE__*/_interopDefault(_Object$keys);
var _Object$getOwnPropertySymbols__default = /*#__PURE__*/_interopDefault(_Object$getOwnPropertySymbols);
var _filterInstanceProperty__default = /*#__PURE__*/_interopDefault(_filterInstanceProperty);
var _Object$getOwnPropertyDescriptor__default = /*#__PURE__*/_interopDefault(_Object$getOwnPropertyDescriptor);
var _forEachInstanceProperty__default = /*#__PURE__*/_interopDefault(_forEachInstanceProperty);
var _Object$getOwnPropertyDescriptors__default = /*#__PURE__*/_interopDefault(_Object$getOwnPropertyDescriptors);
var _Object$defineProperties__default = /*#__PURE__*/_interopDefault(_Object$defineProperties);
var _Object$defineProperty__default = /*#__PURE__*/_interopDefault(_Object$defineProperty);
var _pt__default = /*#__PURE__*/_interopDefault(_pt);
var Text__default = /*#__PURE__*/_interopDefault(Text);

function ownKeys(e, r) { var t = _Object$keys__default["default"](e); if (_Object$getOwnPropertySymbols__default["default"]) { var o = _Object$getOwnPropertySymbols__default["default"](e); r && (o = _filterInstanceProperty__default["default"](o).call(o, function (r) { return _Object$getOwnPropertyDescriptor__default["default"](e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var _context, _context2; var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? _forEachInstanceProperty__default["default"](_context = ownKeys(Object(t), !0)).call(_context, function (r) { _defineProperty(e, r, t[r]); }) : _Object$getOwnPropertyDescriptors__default["default"] ? _Object$defineProperties__default["default"](e, _Object$getOwnPropertyDescriptors__default["default"](t)) : _forEachInstanceProperty__default["default"](_context2 = ownKeys(Object(t))).call(_context2, function (r) { _Object$defineProperty__default["default"](e, r, _Object$getOwnPropertyDescriptor__default["default"](t, r)); }); } return e; }
const ErrorMessage = props => jsxRuntime.jsx(Text__default["default"].Detail, _objectSpread(_objectSpread({
  id: props.id,
  intlMessage: props.intlMessage,
  tone: "negative"
}, utils.filterDataAttributes(props)), {}, {
  children: props.children
}));
ErrorMessage.propTypes = process.env.NODE_ENV !== "production" ? {
  id: _pt__default["default"].string,
  intlMessage: _pt__default["default"].shape({
    id: _pt__default["default"].string.isRequired,
    description: _pt__default["default"].oneOfType([_pt__default["default"].string, _pt__default["default"].object]),
    defaultMessage: _pt__default["default"].string.isRequired,
    values: _pt__default["default"].objectOf(_pt__default["default"].node)
  }),
  children: _pt__default["default"].node
} : {};
ErrorMessage.displayName = 'ErrorMessage';
var ErrorMessage$1 = ErrorMessage;

const WarningMessage = props => jsxRuntime.jsx(Text__default["default"].Detail, {
  id: props.id,
  intlMessage: props.intlMessage,
  tone: "warning",
  children: props.children
});
WarningMessage.propTypes = process.env.NODE_ENV !== "production" ? {
  id: _pt__default["default"].string,
  intlMessage: _pt__default["default"].shape({
    id: _pt__default["default"].string.isRequired,
    description: _pt__default["default"].oneOfType([_pt__default["default"].string, _pt__default["default"].object]),
    defaultMessage: _pt__default["default"].string.isRequired,
    values: _pt__default["default"].objectOf(_pt__default["default"].node)
  }),
  children: _pt__default["default"].node
} : {};
WarningMessage.displayName = 'WarningMessage';
var WarningMessage$1 = WarningMessage;

const AdditionalInfoMessage = props => {
  // We use a `Text.Detail` component prop if the receive message is a react-intl message descriptor
  if (props.message && typeof props.message === 'object' && 'id' in props.message) {
    return jsxRuntime.jsx(Text__default["default"].Detail, {
      id: props.id,
      intlMessage: props.message,
      tone: "tertiary"
    });
  }
  return jsxRuntime.jsx(Text__default["default"].Detail, {
    id: props.id,
    tone: "tertiary",
    children: props.message
  });
};
AdditionalInfoMessage.propTypes = process.env.NODE_ENV !== "production" ? {
  id: _pt__default["default"].string,
  message: _pt__default["default"].oneOfType([_pt__default["default"].string, _pt__default["default"].node, _pt__default["default"].shape({
    id: _pt__default["default"].string.isRequired,
    description: _pt__default["default"].oneOfType([_pt__default["default"].string, _pt__default["default"].object]),
    defaultMessage: _pt__default["default"].string.isRequired,
    values: _pt__default["default"].objectOf(_pt__default["default"].node)
  })]).isRequired
} : {};
AdditionalInfoMessage.displayName = 'AdditionalInfoMessage';
var AdditionalInfoMessage$1 = AdditionalInfoMessage;

// NOTE: This string will be replaced on build time with the package version.
var version = "18.3.0";

exports.AdditionalInfoMessage = AdditionalInfoMessage$1;
exports.ErrorMessage = ErrorMessage$1;
exports.WarningMessage = WarningMessage$1;
exports.version = version;
