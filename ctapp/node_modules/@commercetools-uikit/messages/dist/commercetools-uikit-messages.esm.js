import _Object$keys from '@babel/runtime-corejs3/core-js-stable/object/keys';
import _Object$getOwnPropertySymbols from '@babel/runtime-corejs3/core-js-stable/object/get-own-property-symbols';
import _filterInstanceProperty from '@babel/runtime-corejs3/core-js-stable/instance/filter';
import _Object$getOwnPropertyDescriptor from '@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptor';
import _forEachInstanceProperty from '@babel/runtime-corejs3/core-js-stable/instance/for-each';
import _Object$getOwnPropertyDescriptors from '@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptors';
import _Object$defineProperties from '@babel/runtime-corejs3/core-js-stable/object/define-properties';
import _Object$defineProperty from '@babel/runtime-corejs3/core-js-stable/object/define-property';
import _defineProperty from '@babel/runtime-corejs3/helpers/esm/defineProperty';
import _pt from 'prop-types';
import 'react';
import Text from '@commercetools-uikit/text';
import { filterDataAttributes } from '@commercetools-uikit/utils';
import { jsx } from '@emotion/react/jsx-runtime';

function ownKeys(e, r) { var t = _Object$keys(e); if (_Object$getOwnPropertySymbols) { var o = _Object$getOwnPropertySymbols(e); r && (o = _filterInstanceProperty(o).call(o, function (r) { return _Object$getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var _context, _context2; var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? _forEachInstanceProperty(_context = ownKeys(Object(t), !0)).call(_context, function (r) { _defineProperty(e, r, t[r]); }) : _Object$getOwnPropertyDescriptors ? _Object$defineProperties(e, _Object$getOwnPropertyDescriptors(t)) : _forEachInstanceProperty(_context2 = ownKeys(Object(t))).call(_context2, function (r) { _Object$defineProperty(e, r, _Object$getOwnPropertyDescriptor(t, r)); }); } return e; }
const ErrorMessage = props => jsx(Text.Detail, _objectSpread(_objectSpread({
  id: props.id,
  intlMessage: props.intlMessage,
  tone: "negative"
}, filterDataAttributes(props)), {}, {
  children: props.children
}));
ErrorMessage.propTypes = process.env.NODE_ENV !== "production" ? {
  id: _pt.string,
  intlMessage: _pt.shape({
    id: _pt.string.isRequired,
    description: _pt.oneOfType([_pt.string, _pt.object]),
    defaultMessage: _pt.string.isRequired,
    values: _pt.objectOf(_pt.node)
  }),
  children: _pt.node
} : {};
ErrorMessage.displayName = 'ErrorMessage';
var ErrorMessage$1 = ErrorMessage;

const WarningMessage = props => jsx(Text.Detail, {
  id: props.id,
  intlMessage: props.intlMessage,
  tone: "warning",
  children: props.children
});
WarningMessage.propTypes = process.env.NODE_ENV !== "production" ? {
  id: _pt.string,
  intlMessage: _pt.shape({
    id: _pt.string.isRequired,
    description: _pt.oneOfType([_pt.string, _pt.object]),
    defaultMessage: _pt.string.isRequired,
    values: _pt.objectOf(_pt.node)
  }),
  children: _pt.node
} : {};
WarningMessage.displayName = 'WarningMessage';
var WarningMessage$1 = WarningMessage;

const AdditionalInfoMessage = props => {
  // We use a `Text.Detail` component prop if the receive message is a react-intl message descriptor
  if (props.message && typeof props.message === 'object' && 'id' in props.message) {
    return jsx(Text.Detail, {
      id: props.id,
      intlMessage: props.message,
      tone: "tertiary"
    });
  }
  return jsx(Text.Detail, {
    id: props.id,
    tone: "tertiary",
    children: props.message
  });
};
AdditionalInfoMessage.propTypes = process.env.NODE_ENV !== "production" ? {
  id: _pt.string,
  message: _pt.oneOfType([_pt.string, _pt.node, _pt.shape({
    id: _pt.string.isRequired,
    description: _pt.oneOfType([_pt.string, _pt.object]),
    defaultMessage: _pt.string.isRequired,
    values: _pt.objectOf(_pt.node)
  })]).isRequired
} : {};
AdditionalInfoMessage.displayName = 'AdditionalInfoMessage';
var AdditionalInfoMessage$1 = AdditionalInfoMessage;

// NOTE: This string will be replaced on build time with the package version.
var version = "18.3.0";

export { AdditionalInfoMessage$1 as AdditionalInfoMessage, ErrorMessage$1 as ErrorMessage, WarningMessage$1 as WarningMessage, version };
