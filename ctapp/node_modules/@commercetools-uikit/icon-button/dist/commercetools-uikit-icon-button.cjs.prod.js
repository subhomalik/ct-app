'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _Object$keys = require('@babel/runtime-corejs3/core-js-stable/object/keys');
var _Object$getOwnPropertySymbols = require('@babel/runtime-corejs3/core-js-stable/object/get-own-property-symbols');
var _filterInstanceProperty = require('@babel/runtime-corejs3/core-js-stable/instance/filter');
var _Object$getOwnPropertyDescriptor = require('@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptor');
var _forEachInstanceProperty = require('@babel/runtime-corejs3/core-js-stable/instance/for-each');
var _Object$getOwnPropertyDescriptors = require('@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptors');
var _Object$defineProperties = require('@babel/runtime-corejs3/core-js-stable/object/define-properties');
var _Object$defineProperty = require('@babel/runtime-corejs3/core-js-stable/object/define-property');
var _defineProperty = require('@babel/runtime-corejs3/helpers/defineProperty');
require('prop-types');
var react$1 = require('react');
var react = require('@emotion/react');
var designSystem = require('@commercetools-uikit/design-system');
var utils = require('@commercetools-uikit/utils');
var AccessibleButton = require('@commercetools-uikit/accessible-button');
var jsxRuntime = require('@emotion/react/jsx-runtime');

function _interopDefault (e) { return e && e.__esModule ? e : { 'default': e }; }

var _Object$keys__default = /*#__PURE__*/_interopDefault(_Object$keys);
var _Object$getOwnPropertySymbols__default = /*#__PURE__*/_interopDefault(_Object$getOwnPropertySymbols);
var _filterInstanceProperty__default = /*#__PURE__*/_interopDefault(_filterInstanceProperty);
var _Object$getOwnPropertyDescriptor__default = /*#__PURE__*/_interopDefault(_Object$getOwnPropertyDescriptor);
var _forEachInstanceProperty__default = /*#__PURE__*/_interopDefault(_forEachInstanceProperty);
var _Object$getOwnPropertyDescriptors__default = /*#__PURE__*/_interopDefault(_Object$getOwnPropertyDescriptors);
var _Object$defineProperties__default = /*#__PURE__*/_interopDefault(_Object$defineProperties);
var _Object$defineProperty__default = /*#__PURE__*/_interopDefault(_Object$defineProperty);
var AccessibleButton__default = /*#__PURE__*/_interopDefault(AccessibleButton);

// Gets the color which the icon should have based on context of button's state/cursor behavior
const getIconThemeColor = props => {
  var _props$icon;
  const isActive = props.isToggleButton && props.isToggled;

  // if button has a theme, icon should be white when hovering/clicking
  if (props.theme !== 'default' && isActive) {
    if (props.isDisabled) {
      return 'neutral60';
    }
    return 'surface';
  }

  // if button is disabled, icon should be neutral60
  if (props.isDisabled) return 'neutral60';
  // if button is not disabled nor has a theme, return icon's default color
  return (_props$icon = props.icon) === null || _props$icon === void 0 ? void 0 : _props$icon.props.theme;
};
var _ref = {
  name: "18wgrk7",
  styles: "border-radius:50%"
} ;
const getShapeStyles = (shape, size) => {
  switch (shape) {
    case 'round':
      return _ref;
    case 'square':
      switch (size) {
        case 'small':
          return /*#__PURE__*/react.css("border-radius:", designSystem.designTokens.borderRadius2, ";" + ("" ), "" );
        case 'medium':
        case 'big':
          return /*#__PURE__*/react.css("border-radius:", designSystem.designTokens.borderRadius4, ";" + ("" ), "" );
        default:
          return /*#__PURE__*/react.css("" , "" );
      }
    default:
      return /*#__PURE__*/react.css("" , "" );
  }
};
const getSizeStyles = size => {
  switch (size) {
    case 'small':
      return /*#__PURE__*/react.css("height:", designSystem.designTokens.heightForButtonAsSmall, ";width:", designSystem.designTokens.heightForButtonAsSmall, ";" + ("" ), "" );
    case 'medium':
      return /*#__PURE__*/react.css("height:", designSystem.designTokens.heightForButtonAsMedium, ";width:", designSystem.designTokens.heightForButtonAsMedium, ";" + ("" ), "" );
    case 'big':
      return /*#__PURE__*/react.css("height:", designSystem.designTokens.heightForButtonAsBig, ";width:", designSystem.designTokens.heightForButtonAsBig, ";" + ("" ), "" );
    default:
      return /*#__PURE__*/react.css("" , "" );
  }
};
const getBaseStyles = (theme, isDisabled, isActive) => {
  if (isDisabled) {
    return /*#__PURE__*/react.css("&,&:hover{background-color:", designSystem.designTokens.backgroundColorForButtonWhenDisabled, ";border-color:", designSystem.designTokens.colorSurface, ";color:", designSystem.designTokens.colorNeutral60, ";box-shadow:none;}" + ("" ), "" );
  }
  if (!theme || theme === 'default') {
    return /*#__PURE__*/react.css("&:hover{background-color:", designSystem.designTokens.backgroundColorForButtonWhenHovered, ";box-shadow:", designSystem.designTokens.shadow0, ";}", isActive ? '&,' : '', " &:active{background-color:", designSystem.designTokens.backgroundColorForButtonWhenActive, ";box-shadow:", designSystem.designTokens.shadow0, ";border-color:", designSystem.designTokens.borderColorForButtonAsSecondary, ";}" + ("" ), "" );
  }
  switch (theme) {
    // TODO: These custom colors where itroduced in the Merchant Center redign 2023
    // We need to check with designers if we want to introduce them in our color palette
    // #15A390 -> color-primary with 10% black opacity
    // #057FCC -> color-info with 10% black opacity
    case 'primary':
      return /*#__PURE__*/react.css("&:hover{background-color:", designSystem.designTokens.backgroundColorForButtonAsPrimaryWhenHovered, ";box-shadow:", designSystem.designTokens.shadow0, ";}", isActive ? '&,' : '', " &:active{background-color:", designSystem.designTokens.backgroundColorForButtonAsPrimary, ";box-shadow:", designSystem.designTokens.shadow0, ";}", isActive ? '&,' : '', " &:hover,&:active{border-color:", designSystem.designTokens.colorNeutral, ";}" + ("" ), "" );
    case 'info':
      return /*#__PURE__*/react.css("&:hover{background-color:", designSystem.designTokens.colorInfo, ";box-shadow:", designSystem.designTokens.shadow0, ";}", isActive ? '&,' : '', " &:active{background-color:#057fcc;box-shadow:", designSystem.designTokens.shadow0, ";}", isActive ? '&,' : '', " &:hover,&:active{border-color:", designSystem.designTokens.colorNeutral, ";}" + ("" ), "" );
    default:
      {
        return /*#__PURE__*/react.css("" , "" );
      }
  }
};
const getHoverStyles = (isDisabled, theme) => {
  if (theme === 'default' || isDisabled) return /*#__PURE__*/react.css("" , "" );
  return /*#__PURE__*/react.css("&:hover{*{fill:", designSystem.designTokens.colorSurface, ";}}" + ("" ), "" );
};

function ownKeys(e, r) { var t = _Object$keys__default["default"](e); if (_Object$getOwnPropertySymbols__default["default"]) { var o = _Object$getOwnPropertySymbols__default["default"](e); r && (o = _filterInstanceProperty__default["default"](o).call(o, function (r) { return _Object$getOwnPropertyDescriptor__default["default"](e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var _context, _context2; var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? _forEachInstanceProperty__default["default"](_context = ownKeys(Object(t), !0)).call(_context, function (r) { _defineProperty(e, r, t[r]); }) : _Object$getOwnPropertyDescriptors__default["default"] ? _Object$defineProperties__default["default"](e, _Object$getOwnPropertyDescriptors__default["default"](t)) : _forEachInstanceProperty__default["default"](_context2 = ownKeys(Object(t))).call(_context2, function (r) { _Object$defineProperty__default["default"](e, r, _Object$getOwnPropertyDescriptor__default["default"](t, r)); }); } return e; }
const defaultProps = {
  type: 'button',
  theme: 'default',
  size: 'big',
  shape: 'round',
  isToggleButton: false
};
const IconButton = props => {
  const buttonAttributes = _objectSpread({
    'data-track-component': 'IconButton'
  }, utils.filterInvalidAttributes(props));
  const isActive = Boolean(props.isToggleButton && props.isToggled);
  return jsxRuntime.jsx(AccessibleButton__default["default"], {
    as: props.as,
    buttonAttributes: buttonAttributes,
    type: props.type,
    label: props.label,
    onClick: props.onClick,
    isToggleButton: props.isToggleButton,
    isToggled: props.isToggled,
    isDisabled: props.isDisabled,
    css: [/*#__PURE__*/react.css("width:100%;height:100%;display:flex;align-items:center;justify-content:center;border:1px solid ", designSystem.designTokens.borderColorForButtonAsSecondary, ";background-color:", designSystem.designTokens.colorSurface, ";box-shadow:", designSystem.designTokens.shadow0, ";color:", designSystem.designTokens.fontColorForButtonAsSecondary, ";*{fill:", designSystem.designTokens.fontColorForButtonAsSecondary, ";}transition:background-color ", designSystem.designTokens.transitionLinear80Ms, ",box-shadow 150ms ease-in-out;" + ("" ), "" ), getBaseStyles(props.theme, props.isDisabled, isActive), getShapeStyles('square', props.size), getSizeStyles(props.size), getHoverStyles(props.isDisabled, props.theme), "" , "" ],
    children: props.icon && /*#__PURE__*/react$1.cloneElement(props.icon, {
      size: props.size,
      color: getIconThemeColor(props)
    })
  });
};
IconButton.propTypes = {};
IconButton.defaultProps = defaultProps;
IconButton.displayName = 'IconButton';
var IconButton$1 = IconButton;

// NOTE: This string will be replaced on build time with the package version.
var version = "18.3.0";

exports["default"] = IconButton$1;
exports.version = version;
