import { AdapterConfigurationStatus, adapterIdentifiers, AdapterInitializationStatus, type TAdapterEventHandlers, type TFlagName, type TFlags, type TFlagVariation, type TMemoryAdapterArgs, type TMemoryAdapterInterface, type TUpdateFlagsOptions, type TUser } from '@flopflip/types';
declare class MemoryAdapter implements TMemoryAdapterInterface {
    #private;
    id: typeof adapterIdentifiers.memory;
    constructor();
    getUser: () => TUser | undefined;
    updateFlags: (flags: TFlags, options?: TUpdateFlagsOptions) => void;
    configure(adapterArgs: TMemoryAdapterArgs, adapterEventHandlers: TAdapterEventHandlers): Promise<{
        initializationStatus: AdapterInitializationStatus;
    }>;
    reconfigure(adapterArgs: TMemoryAdapterArgs, _adapterEventHandlers: TAdapterEventHandlers): Promise<{
        initializationStatus: AdapterInitializationStatus;
    }>;
    getIsConfigurationStatus(configurationStatus: AdapterConfigurationStatus): boolean;
    setConfigurationStatus(nextConfigurationStatus: AdapterConfigurationStatus): void;
    reset: () => void;
    waitUntilConfigured(): Promise<void>;
    getFlag(flagName: TFlagName): TFlagVariation;
    unsubscribe: () => void;
    subscribe: () => void;
}
declare const adapter: MemoryAdapter;
export default adapter;
